schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type AccountDetailsPage
  @join__type(graph: IRIS)
{
  feed: [MyAccountFeedItem]!
}

"""
Can Attach to any component. This needs to work together with
$supportedLinks and $supportedActions query parameters passed by app.
"""
type Action
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """
  Type of the action. e.g. "LINK", "APPLOCAL"
  """
  type: ActionType!

  """
  If type is LINK, the action needs to be an url, deeplink etc.
  If type is APPLOCAL, the action is a custom identifier maps
    to a custom function on FE. These constant local actions perform
    consistent and same thing anywhere in the app.
    * openBottomSheet?id=bottomSheet1
  """
  action: String!

  """Unique identifier to assist FE to identify the action"""
  id: String

  """Optional Analytics fields to be used on FE for actions"""
  analytics: Analytics
}

"""
A card that executes the deepLink upon tapping
Card's data including the hosting of image are fully managed in AEM & Target
"""
type ActionableCard
  @join__type(graph: IRIS)
{
  """A full URL to the image asset"""
  image: String!

  """Accessibility alternate text for image"""
  altText: String!

  """
  The size of the card.
  e.g. SMALL, MEDIUM, LARGE
  """
  cardHeight: CardHeight!

  """The deepLink to action if the card is tapped"""
  link: String!

  """
  Common BFF custom flag to allow independent chain resolvers.
  Having item with _excluded:true, means it should not be used in FE
  """
  _excluded(supportedLinks: [String!]): Boolean

  """
  Dynamic data to tealium. Defined as scalar - the plan is to
  populate this analytics data from the source (AEM form) when
  the content/card is being authored
  
  NOTE: This field won't be used for Content Page / AEM authored pages
  """
  analytics: TealiumAnalytics

  """
  Analytics fields to be used for impression events:
  * tealiumEvent - banner_impression
  * eventAction - impression
  * + all other fields
  """
  actionableCardImpressionAnalytics: Analytics

  """
  Analytics fields to be used for click events:
  * tealiumEvent - banner_click
  * eventAction - click
  * + all other fields
  """
  actionableCardClickAnalytics: Analytics
}

union ActionMetaData
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RecipeTagList")
  @join__unionMember(graph: IRIS, member: "RecipeSource")
 = RecipeTagList | RecipeSource

type ActionTile
  @join__type(graph: IRIS)
{
  id: String!
  title: String!
  iconUrl: String!
}

enum ActionType
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  LINK @join__enumValue(graph: CPS) @join__enumValue(graph: IRIS)
  APPLOCAL @join__enumValue(graph: CPS) @join__enumValue(graph: IRIS)
}

"""Native height of AdBanner"""
enum AdBannerNativeSize
  @join__type(graph: IRIS)
{
  SMALL @join__enumValue(graph: IRIS)
  MEDIUM @join__enumValue(graph: IRIS)
  LARGE @join__enumValue(graph: IRIS)
}

type AddCreditCard
  @join__type(graph: IRIS)
{
  title: String!
  clickAnalytics: Analytics!
}

input AddCreditCardInput
  @join__type(graph: IRIS)
{
  flowType: FlowType!
}

type AddCreditCardResponse
  @join__type(graph: IRIS)
{
  url: String!
  isMandatorySave: Boolean!
  infoText: String
  clickAnalytics: Analytics!
}

type AddGiftCard
  @join__type(graph: IRIS)
{
  title: String!
  clickAnalytics: Analytics!
}

input AddGiftCardInput
  @join__type(graph: IRIS)
{
  number: String!
  pin: String!

  """determines if we link the card to account or not"""
  link: Boolean!
}

type AddGiftCardResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  id: String
  message: String
}

type AddPayPal
  @join__type(graph: IRIS)
{
  icon: String!
  title: String!
  alert: AddPayPalAlert!
}

type AddPayPalAlert
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  primaryButtonTitle: String!
  secondaryButtonTitle: String!
  clickAnalytics: Analytics!
}

"""Usually home address of the customer"""
type Address
  @join__type(graph: IRIS)
{
  """Address unique ID"""
  id: Int!

  """Readable address text"""
  text: String!

  """
  Is address primary address
  in context of shopping mode we will essentially always have it as `true`
  """
  isPrimary: Boolean!

  """Postal Code"""
  postalCode: String!

  """Address Street line 1"""
  street1: String!

  """Address Street line 2"""
  street2: String!

  """Suburb ID (not a postcode, but internal ID)"""
  suburbId: Int!

  """Readable suburb name"""
  suburbName: String!

  """State"""
  state: String!

  """Id of the fulfilment store for this delivery address"""
  fulfillmentStoreId: Int

  """Id of the express delivery store for this delivery address"""
  expressDeliveryStoreId: Int
}

input AddressInput
  @join__type(graph: IRIS)
{
  amasId: String
  street1: String
  street2: String
  suburbId: Int
  postcode: String
  isForBilling: Boolean
  isAlternateAddressId: Boolean
  alternateAddressId: Int
}

type AddressItem
  @join__type(graph: IRIS)
{
  id: String
  text: String
  postcode: String
}

enum AddressType
  @join__type(graph: IRIS)
{
  ALTERNATE @join__enumValue(graph: IRIS)
  PRIMARY @join__enumValue(graph: IRIS)
}

"""
One of available address types

Usage:
```graphql
address {
   ... on Address {
     __typename
   }
 }
```
"""
union AddressUnion
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "Address")
 = Address

"""Displays if no edr. Drives the add rewards card tile on the FE."""
type AddRewardsCard
  @join__type(graph: IRIS)
{
  """'+ Add Rewards Card'"""
  addRewardsCardTitle: String!

  """'Collect points and boost your savings'"""
  addRewardsCardSubtitle: String!
}

"""Ad banner that comes from Adobe Experience Manager (AEM)"""
type AdobeAdBannerCard
  @join__type(graph: IRIS)
{
  """
  The type of content that the card targets on action. This should be used to determine the target screen.
  """
  promotionType: String

  """The parameters used for graphql queries."""
  queryParameters: QueryParameters

  """A full URL to the promotional image asset."""
  image: String!

  """Accessibility alternate text for image."""
  altText: String!

  """
  A description of the image content for accessibility and fallback when an image fails to load.
  """
  title: String

  """
  The size of the banner.
  e.g. SMALL, MEDIUM, LARGE
  """
  height: AdBannerNativeSize!

  """
  Tracking ID used to track performance of ad banner. This is same value of stitch-id.
  """
  trackingId: String
}

"""Holds Adobe Target Delivery API analytics data"""
type AdobeTargetAnalytics
  @join__type(graph: IRIS)
{
  """
  One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics
  """
  tnta: String

  """
  One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics
  """
  pe: String

  """
  Common BFF custom flag to allow independent chain resolvers.
  Having item with _excluded:true, means it should not be used in FE
  """
  _excluded: Boolean
}

"""
DEPRECATED: Holds AEM/Google Ads analytics data

ShopApp version indicates when to do complete removal
* 21.10 (Android only)
  * AdTealiumAnalytics - moved to a new independent type JIRA TAN-75
"""
type AdTealiumAnalytics
  @join__type(graph: IRIS)
{
  """
  DEPRECATED: One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics
  """
  adobeTnta: String @deprecated(reason: "Use `ProductList.analytics` of type `AdobeTargetAnalytics` to get adobe analytics associated to this content")

  """
  DEPRECATED: One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics
  """
  adobePe: String @deprecated(reason: "Use `ProductList.analytics` of type `AdobeTargetAnalytics` to get adobe analytics associated to this content")
}

"""
Represents the AEM content page, which can be any page that follows the AEM generic page standard
"""
type AEMContentPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents the top section of the page
  """
  header: AEMContentPageHeader

  """
  Inherited from GenericPage.
  Represents the scrollable section of the page
  """
  items: [GenericPageFeedItem]!

  """
  Inherited from GenericPage.
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. openBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type AEMContentPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents text to display on top bar
  """
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  implement from generic type, represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

enum AisleSide
  @join__type(graph: IRIS)
{
  left @join__enumValue(graph: IRIS)
  right @join__enumValue(graph: IRIS)
}

type AlertIndicator
  @join__type(graph: IRIS)
{
  indicatorType: AlertIndicatorType!
  message: String!
}

enum AlertIndicatorType
  @join__type(graph: IRIS)
{
  ERROR @join__enumValue(graph: IRIS)
}

type AlertMessage
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
}

type AlternativeProductsCtaSection
  @join__type(graph: IRIS)
{
  """
  Represents the CTA text.
  e.g. "See all"
  """
  text: String!

  """
  Defines the action to be taken when the CTA is clicked.
  e.g. "search-by-category"
  """
  action: String!

  """
  Represents the search term text to be used in next screen when the CTA is clicked.
  """
  actionTerm: String
}

type AlternativeProductsDisclaimer
  @join__type(graph: IRIS)
{
  """Represents the title text"""
  title: String!

  """Represents the subtitle text"""
  subtitle: String!

  """Represents the dismiss CTA text"""
  dismissCtaText: String!
}

type AlternativeProductsInsetBannerSection
  @join__type(graph: IRIS)
{
  """Represents the inset banner."""
  insetBanner: InsetBanner
}

enum AlternativeProductsMode
  @join__type(graph: IRIS)
{
  VALUE_SWAPS @join__enumValue(graph: IRIS)
  SMART_ALTERNATIVES @join__enumValue(graph: IRIS)
  UNIVERSAL @join__enumValue(graph: IRIS)
}

type AlternativeProductsNoResultSection
  @join__type(graph: IRIS)
{
  """No results text"""
  text: String!
}

"""
DEPRECATED: in favour of AlternativeProductsProductsHeader in AlternativeProductsProductSection
Duplicate data will be returned if both are queried

Represents a section detailing alternative product counts.
"""
type AlternativeProductsProductCountSection
  @join__type(graph: IRIS)
{
  """
  Represents the number of products text
  e.g. 2 Products
  """
  text: String!

  """Represents the disclaimer text"""
  disclaimer: AlternativeProductsDisclaimer
}

type AlternativeProductsProductSection
  @join__type(graph: IRIS)
{
  """
  Represents the upstream API where the products were sourced.
  Used for analytics.
  Either "category suggested product", "substitute suggested product"
  """
  substitutionSource: String!

  """Represents the list of products."""
  products: [ProductCard!]!

  """Header of the product section"""
  sectionHeader: AlternativeProductsProductsHeader
}

type AlternativeProductsProductsHeader
  @join__type(graph: IRIS)
{
  """
  Optional Title
  example: "2 products", "More in this category"
  """
  title: String

  """Represents the disclaimer text"""
  disclaimer: AlternativeProductsDisclaimer

  """Optional Tag for Type"""
  typeTag: AlternativeProductsTypeTag
}

union AlternativeProductsSections
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AlternativeProductsTargetProductSection")
  @join__unionMember(graph: IRIS, member: "AlternativeProductsInsetBannerSection")
  @join__unionMember(graph: IRIS, member: "AlternativeProductsProductCountSection")
  @join__unionMember(graph: IRIS, member: "AlternativeProductsProductSection")
  @join__unionMember(graph: IRIS, member: "AlternativeProductsNoResultSection")
  @join__unionMember(graph: IRIS, member: "AlternativeProductsCtaSection")
 = AlternativeProductsTargetProductSection | AlternativeProductsInsetBannerSection | AlternativeProductsProductCountSection | AlternativeProductsProductSection | AlternativeProductsNoResultSection | AlternativeProductsCtaSection

type AlternativeProductsTargetProductSection
  @join__type(graph: IRIS)
{
  """Represents the target product which is to be replaced."""
  product: ProductCard!

  """
  Represents the purpose of this section which is used for screen readers.
  """
  altText: String!
}

enum AlternativeProductsType
  @join__type(graph: IRIS)
{
  PRICE @join__enumValue(graph: IRIS)
  SPECIALS @join__enumValue(graph: IRIS)
  REWARDS @join__enumValue(graph: IRIS)
}

type AlternativeProductsTypeTag
  @join__type(graph: IRIS)
{
  swapType: AlternativeProductsType!
  text: String!
}

"""
We can attach this to any type.
e.g. action level analytics(click event), component level analytics(impression)
"""
type Analytics
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """
  app.Section
  example: Other
  """
  appSection: String

  """
  screen.Name
  example: eComm campaign screen
  """
  screenName: String

  """
  screen.Type
  example: campaign
  """
  screenType: String

  """
  event.Action
  example: impression
  """
  eventAction: String

  """
  event.Category
  example: marketing landing page
  """
  eventCategory: String

  """event.Label"""
  eventLabel: String

  """event.Value"""
  eventValue: String

  """event.Description"""
  eventDescription: String

  """tealium_event"""
  tealiumEvent: String

  """Any additional analytics fields to be passed as-is"""
  extraContent: [AnalyticsExtraContent!]
}

"""
Provides extra analytics content that can be passed as-is to Analytics server.
Note that the client should first take `value`, if `null`, use `values`.
"""
type AnalyticsExtraContent
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """The key to be passed as-is (e.g. acs.StitchID)"""
  key: String!

  """Optional value, Nullable so the implementation can be explicit"""
  value: String

  """Optional array value, Nullable so the implementation can be explicit"""
  values: [String!]
}

type ApigeeHash
  @join__type(graph: IRIS)
{
  name: String!
  value: String
}

type ApigeeResponse
  @join__type(graph: IRIS)
{
  headers: [ApigeeHash]!
  environmentVariables: [ApigeeHash]!
}

type AppConfig
  @join__type(graph: IRIS)
{
  upgradeType: UpgradeType!
  isForcedUpgrade: Boolean
  indicativeUpgradeDate: String
  alert: AppConfigAlert

  """BFF Version, e.g. Iris 25.11"""
  bff: String!
}

union AppConfigAlert
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AppConfigSoftAlert")
  @join__unionMember(graph: IRIS, member: "AppConfigForcedAlert")
 = AppConfigSoftAlert | AppConfigForcedAlert

type AppConfigForcedAlert
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  primaryActionLabel: String!
  rewardsCardActionLabel: String
}

type AppConfigSoftAlert
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  primaryActionLabel: String!
  secondaryActionLabel: String!
}

type ApplePay
  @join__type(graph: IRIS)
{
  title: String!
  isSelected: Boolean!
  amountTitle: String!
  amountValue: String!
  amountToPay: Int!
  id: String!
  supportedNetworks: [String!]!
}

type ApplyCheckoutCreditResponse
  @join__type(graph: IRIS)
{
  success: Boolean!

  """message used for failure"""
  message: String!

  """checkout summary after applying store credits"""
  checkoutSummary: CheckoutContent
}

type ApplyCheckoutPromoCodeResponse
  @join__type(graph: IRIS)
{
  result: ApplyPromoCodeResult!

  """
  FE decide if it need to query the checkout summary to refresh
  e.g. apply promotion outside of checkout summary don't need to query this field
  """
  checkoutSummary: CheckoutContent
}

type ApplyPromoCodeAdditionalInfo
  @join__type(graph: IRIS)
{
  banner: InsetBanner!
  type: ApplyPromoCodeBannerType!
  clickAnalytics: Analytics!
}

enum ApplyPromoCodeBannerType
  @join__type(graph: IRIS)
{
  CREDIT @join__enumValue(graph: IRIS)
}

type ApplyPromoCodeFail
  @join__type(graph: IRIS)
{
  message: String!
}

type ApplyPromoCodeReplaceConfirmation
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  primaryButtonTitle: String!
  secondaryButtonTitle: String!
}

union ApplyPromoCodeResult
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ApplyPromoCodeFail")
  @join__unionMember(graph: IRIS, member: "ApplyPromoCodeSuccess")
  @join__unionMember(graph: IRIS, member: "ApplyPromoCodeReplaceConfirmation")
  @join__unionMember(graph: IRIS, member: "ApplyPromoCodeAdditionalInfo")
 = ApplyPromoCodeFail | ApplyPromoCodeSuccess | ApplyPromoCodeReplaceConfirmation | ApplyPromoCodeAdditionalInfo

type ApplyPromoCodeSuccess
  @join__type(graph: IRIS)
{
  message: String!
}

enum AppOS
  @join__type(graph: IRIS)
{
  IOS @join__enumValue(graph: IRIS)
  ANDROID @join__enumValue(graph: IRIS)
}

"""Represents the AEM article page"""
type ArticlePage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents the top section of the page
  """
  header: ArticlePageHeader

  """
  Inherited from GenericPage.
  Represents the scrollable section of the page
  """
  items: [GenericPageFeedItem]!

  """
  Inherited from GenericPage.
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. openBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type ArticlePageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents text to display on top bar
  """
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  implement from generic type, represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

type Badge
  @join__type(graph: IRIS)
{
  """label that is shown in the badge"""
  label: String!

  """
  altLabel will hold the string that is shown to the user along with 
  text that is ready by screen reader for accessibility
  """
  altLabel: TextWithAlt

  """
  type of badge used to apply different background colours based on BadgeType
  """
  type: BadgeType!
}

enum BadgeType
  @join__type(graph: IRIS)
{
  """Matches with BrandSpecials"""
  SPECIAL @join__enumValue(graph: IRIS)

  """Matches with BrandNew"""
  NEW @join__enumValue(graph: IRIS)

  """Matches with BrandRewards"""
  REWARDS @join__enumValue(graph: IRIS)

  """Matches with ColorPrimary"""
  PRIMARY @join__enumValue(graph: IRIS)

  """Matches with BrandInfo"""
  INFO @join__enumValue(graph: IRIS)

  """Matches with BrandAlways"""
  ALWAYS @join__enumValue(graph: IRIS)

  """Matches with TextDisabled"""
  DISABLED @join__enumValue(graph: IRIS)

  """No Matching color Palette, Invalid"""
  TEMPORARY @join__enumValue(graph: IRIS)

  """Badge appears in Disabled tile"""
  UNAVAILABLE @join__enumValue(graph: IRIS)
}

enum BannerImageFormat
  @join__type(graph: IRIS)
{
  HALF_WIDTH @join__enumValue(graph: IRIS)
  FULL_WIDTH @join__enumValue(graph: IRIS)
  PORTRAIT @join__enumValue(graph: IRIS)
}

enum BannerTarget
  @join__type(graph: IRIS)
{
  FRESH_MAG @join__enumValue(graph: IRIS)
  SAVED_RECIPES @join__enumValue(graph: IRIS)
}

enum BarcodeType
  @join__type(graph: IRIS)
{
  EAN_13 @join__enumValue(graph: IRIS)
  EAN_8 @join__enumValue(graph: IRIS)
  DATAMATRIX @join__enumValue(graph: IRIS)
  QR @join__enumValue(graph: IRIS)
  CODE_128 @join__enumValue(graph: IRIS)
  CODE_39 @join__enumValue(graph: IRIS)
  UPCE @join__enumValue(graph: IRIS)
  GS1_DATABAR_EXPANDED @join__enumValue(graph: IRIS)
  GS1_DATABAR @join__enumValue(graph: IRIS)
  GS1_DATABAR_LIMITED @join__enumValue(graph: IRIS)
}

"""Base interface for all node types"""
interface BaseNode
  @join__type(graph: IRIS)
{
  """Unique identifier for the node"""
  nodeId: String
}

"""Basic Broadcast Banner Component with UI, action, and analytics."""
type BasicCoreBroadcastBanner
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """
  UI components of the broadcast banner, such as title, subtitle, and style.
  """
  broadcastBannerUI: CoreBroadcastBannerUI!

  """An optional action associated with the banner"""
  broadcastBannerAction: Action

  """An optional label for the action, providing a call-to-action text."""
  broadcastBannerActionLabel: String

  """Analytics data to track impressions and interactions with the banner."""
  impressionAnalytics: Analytics

  """
  Unique ID used in FE when user dismiss the banner to ensure it's never displayed again
  (Required when broadcastBannerDismissible is true)
  """
  broadcastBannerId: String

  """Display "X" to dismiss banner when true"""
  broadcastBannerDismissible: Boolean!

  """
  Analytics data to track when user clicks the dismiss button of the banner
  """
  broadcastBannerDismissAnalytics: Analytics
}

"""
Business logic for CoreRowUI.
It implements some of the Core DS Row features and should be extended with additional features as required.
There might be specific use-cases which goes beyond BasicCoreRow, then a new type might be considered.
"""
type BasicCoreRow
  @join__type(graph: IRIS)
{
  """Row UI"""
  row: CoreRowUI!

  """
  Action is required because on Android there's no indication if a row is tappable or not.
  By making it required it ensure a consistent behaviour and enhance the UX.
  """
  action: Action!
}

"""Container for BasicCoreRow"""
type BasicCoreRowList
  @join__type(graph: IRIS)
{
  basicCoreRowListSectionTitle: String
  basicCoreRowListItems: [BasicCoreRow!]!

  """
  Dynamic Analytics fields to be used for all component events:
  * eventCategory - e.g. branded_shop
  * eventLabel - <label>
  * extraContent - <custom field(s) with array of values from the row items>
  """
  basicCoreRowListAnalytics: Analytics

  """
  Analytics fields to be used for impression events:
  * tealiumEvent - e.g. bsotd_impression
  * eventAction - e.g. bsotd_impression
  """
  basicCoreRowListImpressionAnalytics: Analytics
}

type BasicInsetAlert
  @join__type(graph: IRIS)
{
  insetAlertUI: CoreInsetAlertUI!
  insetAlertAction: Action
  insetAlertActionLabel: String
  impressionAnalytics: Analytics
}

type BayNumberPreferences
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  bayNumber: [String!]!
  confirmButton: Button!
  bayNumberUnknownButton: Button!
}

union BoostEdrOfferResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "EdrOffer")
  @join__unionMember(graph: IRIS, member: "SnackBar")
 = EdrOffer | SnackBar

"""Display list of rewards offer boosters"""
type BoosterHorizontalList implements HorizontalListBase & BaseNode
  @join__implements(graph: IRIS, interface: "HorizontalListBase")
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  actionTitle: String
  deepLink: String
  tigerOfferIds: [String!]!
  items: [HorizontalListItem!]!
  nodeId: String
}

type BoostOfferResponse
  @join__type(graph: IRIS)
{
  offerId: String!
  success: Boolean!
  message: String!
  info: RewardsOfferInfo
}

type BoostTagProductOffersResponse
  @join__type(graph: IRIS)
{
  boostOffers: [BoostOfferResponse!]
}

interface BottomSheetContent
  @join__type(graph: IRIS)
{
  bottomSheetTitle: String!
  bottomSheetBody: String!
  showOnceOnly: Boolean
  bannerAsset: DownloadableAsset
  primaryCta: ContentCta
  secondaryCta: ContentCta
}

"""Input parameters of the Query.brandedShop"""
input BrandedShopInput
  @join__type(graph: IRIS)
{
  """
  Represents the page/content identification
  that needs to be displayed.
  """
  contentId: String

  """Represents the store id. *e.g. "1550"*."""
  storeId: String

  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]!

  """
  List of app action that the client supports. This ensures
  that app actions coming out of this response works for the client
  ie. ["openbottomsheet"]
  """
  supportedActions: [String!]!
}

"""Represents the branded shop page"""
type BrandedShopPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents the top section of the page
  """
  header: BrandedShopPageHeader

  """
  Inherited from GenericPage.
  Represents the scrollable section of the page
  """
  items: [GenericPageFeedItem]!

  """
  Inherited from GenericPage.
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type BrandedShopPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents text to display on top bar
  """
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  implement from generic type, represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

"""Brand from Trader eg: Pauls"""
type BrandItem implements MarketplaceItem
  @join__implements(graph: IRIS, interface: "MarketplaceItem")
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String!
  logoUrl: String!
}

"""List of Brands"""
type Brands implements MarketplaceSectionItem
  @join__implements(graph: IRIS, interface: "MarketplaceSectionItem")
  @join__type(graph: IRIS)
{
  pageName: MarketplaceLandingPageName!
  displayName: String!
  channel: ProductListChannelType!
  facet: ProductListFacetType!
  items: [BrandItem!]!
}

type BroadcastBanner
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  deeplink: String
  type: BroadcastBannerType!
  imageUrl: String!
  actionLabel: String
  analyticsLabel: String
  dismissible: Boolean
  bannerId: String
}

enum BroadcastBannerType
  @join__type(graph: IRIS)
{
  NEUTRAL @join__enumValue(graph: IRIS)
  PRIMARY @join__enumValue(graph: IRIS)
  REWARDS @join__enumValue(graph: IRIS)
}

type Bundle
  @join__type(graph: IRIS)
{
  """All bundle details elements above the horizontal list"""
  bundleDetails: BundleDetails!

  """Horizontal List of Cards in the bundle"""
  bundleItems: [BundleItem!]!

  """CTA (e.g. "Add bundle to cart")"""
  bundleCta: BundleCTA!

  """
  Dynamic Analytics fields to be used for all component and sub-component events:
  * eventCategory - bundle_products
  * eventDescription - <bundle name>
  """
  bundleAnalytics: Analytics

  """
  Analytics fields to be used for impression events:
  * tealiumEvent - show_bundle_products
  * eventAction - show
  * eventLabel - <bundle type, etc>
  """
  bundleImpressionAnalytics: Analytics

  """
  Message (Warning / Restriction) to customer about the product bundle e.g. "Afternoon delivery & pick up"
  """
  footerText: String
}

type BundleComparisonPrice
  @join__type(graph: IRIS)
{
  """Optional icon to show before the title"""
  leadingAsset: IconAsset

  """
  e.g. "MEMBER PRICE" or "NON-MEMBER PRICE"
  """
  title: String!

  """
  e.g. "$17.95"
  """
  price: String!
}

type BundleComparisonPricing
  @join__type(graph: IRIS)
{
  """Member pricing logo for top right corner"""
  logo: String

  """e.g. Member pricing"""
  promotionPrice: BundleComparisonPrice

  """e.g. Non-Member pricing"""
  standardPrice: BundleComparisonPrice
}

union BundleCTA
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "BundleQuantityStepper")
 = BundleQuantityStepper

type BundleDetails
  @join__type(graph: IRIS)
{
  """Online / In-store tag"""
  titleTag: BundleTitleTag

  """Bundle name (e.g. "Old El Paso Taco Night, Hard ...")"""
  title: String!

  """Optional description of the bundle (e.g. "Add all N products ...")"""
  description: String

  """Pricing section"""
  pricing: BundlePricing!
}

union BundleItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "BundleProductCard")
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "StackedProductCards")
 = BundleProductCard | ProductCard | StackedProductCards

union BundlePricing
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "BundleStandardPricing")
  @join__unionMember(graph: IRIS, member: "BundleComparisonPricing")
 = BundleStandardPricing | BundleComparisonPricing

type BundleProductCard
  @join__type(graph: IRIS)
{
  """The visible Product Card on top of the stack"""
  productCard: ProductCard!

  """Optional field to display the quantity (e.g. Qty 2)"""
  quantity: String
}

"""Bundle promotion info for online and EDR member only."""
type BundlePromotionInfo
  @join__type(graph: IRIS)
{
  title: String!
  isApplied: Boolean!
  bundleType: BundleType!
  appliedQuantity: Float!
  isShowBanner: Boolean!
}

type BundleQuantityStepper
  @join__type(graph: IRIS)
{
  """Minimum amount that can be added to cart."""
  minimum: Int!

  """Maximum amount that can be added to cart."""
  maximum: Int!

  """Increment for adding bundle to cart."""
  increment: Int!

  """Represents how many bundles are currently in users cart."""
  inCart: Int!

  """Button label to show when no bundles in cart"""
  addToCartLabel: String!

  """
  Label to show when inCart reaches maximum (e.g. "Bundle limit reached")
  """
  maximumReachedLabel: String
}

union Bundles
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "BundlesLandingPage")
  @join__unionMember(graph: IRIS, member: "BundlesLandingErrorPage")
 = BundlesLandingPage | BundlesLandingErrorPage

union BundlesFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "BasicCoreBroadcastBanner")
  @join__unionMember(graph: IRIS, member: "Bundle")
 = BasicCoreBroadcastBanner | Bundle

type BundlesHeader
  @join__type(graph: IRIS)
{
  """Optional list of sort options (No options = no Sort chip)"""
  sortOptions: BundleSortOptions

  """
  Chips like "Member price"
  """
  chips: [Chip!]

  """
  To show "X bundles"
  """
  totalBundles: String!
}

input BundlesInput
  @join__type(graph: IRIS)
{
  """Represents the store id when shopping mode is In-store."""
  storeId: String

  """Selected chips"""
  chips: [String!]

  """Apply a sorting option to the bundles result using a sorting algorithm"""
  sortOption: String

  """
  When true, BFF will apply any filters, chips etc pass in arguments field (instead of the input fields)
  """
  initialLoad: Boolean

  """
  Optional arguments to pass arbitrary parameters to BFF, mainly to be used together with initialLoad: true
  """
  argument: String
}

type BundlesLandingErrorPage
  @join__type(graph: IRIS)
{
  """Optional image"""
  image: String

  """Optional title"""
  title: String

  """Optional description"""
  description: String

  """
  e.g. "Try again"
  """
  cta: Link

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics
}

type BundlesLandingPage
  @join__type(graph: IRIS)
{
  """To be displayed on top/above the scrollable area."""
  header: BundlesHeader!

  """
  List of different ui components. To be displayed in
  the main scrollable area of the Page
  """
  items: [BundlesFeedItem]!

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics
}

type BundleSortOption
  @join__type(graph: IRIS)
{
  """Identifier used by BFF to associate sort option with algorithm"""
  id: String!

  """
  Core UI Component for a Radio Row
  Only the default option will be selected, front-end to handle user selection
  """
  coreRadioRowUI: CoreRadioRowUI!
}

type BundleSortOptions
  @join__type(graph: IRIS)
{
  """
  e.g. "Sort by"
  """
  title: String!

  """The sorting options"""
  options: [BundleSortOption!]!
}

type BundleStandardPricing
  @join__type(graph: IRIS)
{
  """
  e.g. "SAVE $2.00"
  """
  tag: CoreTagUI

  """
  e.g. "N products for"
  """
  prefix: String!

  """
  e.g. "$17.00"
  """
  price: String!
}

type BundleTitleTag
  @join__type(graph: IRIS)
{
  """
  e.g. "Online Only" or "Online and In-store"
  """
  text: String!

  """Mandatory foreground (text) colour"""
  textColor: CompatibleColor!
}

enum BundleType
  @join__type(graph: IRIS)
{
  MEMBER @join__enumValue(graph: IRIS)
  ONLINE @join__enumValue(graph: IRIS)
}

type Button
  @join__type(graph: IRIS)
{
  buttonId: String
  label: String!
  style: ButtonStyle
  enabled: Boolean!

  """
  Any free form string eg. submit/cancel/add-to-cart etc
  If url field is used, set action to LINK
  """
  action: String @deprecated(reason: "Please ask your BFF dev to start using `Button.buttonAction` to adapt to generic implementation of action of any component")

  """Deeplink url"""
  url: String @deprecated(reason: "Please ask your BFF dev to start using `Button.buttonAction` to adapt to generic implementation of action of any component")

  """Generic way of defining the action of a button."""
  buttonAction: Action

  """return the image for the button if it's a image button"""
  iconUrl: String

  """Text to be read out by screen reader"""
  altText: String

  """Optional analytics object for APP"""
  analytics: ButtonAnalytics
}

"""Type to provide custom analytics for Button"""
type ButtonAnalytics
  @join__type(graph: IRIS)
{
  """Used to populate event.Label"""
  label: String
}

"""
a section for buttons to be arranged for full width layouts like feeds, bottomsheets, etc
"""
type ButtonSection
  @join__type(graph: IRIS)
{
  buttonSectionButton: CoreButton!
}

enum ButtonState
  @join__type(graph: IRIS)
{
  ENABLED @join__enumValue(graph: IRIS)
  DISABLED @join__enumValue(graph: IRIS)
}

enum ButtonStyle
  @join__type(graph: IRIS)
{
  PRIMARY @join__enumValue(graph: IRIS)
  SECONDARY @join__enumValue(graph: IRIS)
  TERTIARY @join__enumValue(graph: IRIS)
  DESTRUCTIVE @join__enumValue(graph: IRIS)
  INFO @join__enumValue(graph: IRIS)
  INSTOCK @join__enumValue(graph: IRIS)
}

"""Used by Buy Again filter failed to return matching products"""
type BuyAgainFilterStatus
  @join__type(graph: IRIS)
{
  """
  Feedback for the filters. For now this is only used when a filter was reverted.
  """
  message: String

  """Id of filter chips that were reverted."""
  revertedFilterChipIds: [String!]!
}

"""Represents the Buy Again Product list footer"""
type BuyAgainFooter
  @join__type(graph: IRIS)
{
  """Represents Save to list button info for Buy Again Product list"""
  saveToListBtn: Button

  """
  Represents Add to cart button info for Buy Again Product list only for online mode
  """
  addToCartBtn: Button
}

"""Represents the Buy Again Product list header"""
type BuyAgainHeader
  @join__type(graph: IRIS)
{
  """Represents total product count in text"""
  totalProductsText: String!
}

"""Get Buy Again Reorder products from DAAS"""
type BuyAgainProductList
  @join__type(graph: IRIS)
{
  """Represents buy again header"""
  header: BuyAgainHeader!

  """Represents buy again footer"""
  footer: BuyAgainFooter!

  """Represents buy again product list"""
  buyAgainProducts: ProductList!

  """Additional status information related to the filters"""
  filterStatus: BuyAgainFilterStatus
}

input CallerState
  @join__type(graph: IRIS)
{
  """Location Tracker UI states based on status"""
  pickupLocationComponent: PickupLocationComponent
}

type CampaignCard implements CampaignCardBase
  @join__implements(graph: IRIS, interface: "CampaignCardBase")
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String!
  imageAltText: String
  action: String!
  subtitle: String
}

interface CampaignCardBase
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String!
  imageAltText: String
  action: String!
  subtitle: String
}

type CampaignCardCarousel
  @join__type(graph: IRIS)
{
  campaignCardCarouselTitle: String
  campaignCards: [CampaignCard!]!
}

type CampaignCardList
  @join__type(graph: IRIS)
{
  campaignCardListTitle: String
  campaignCards: [FullWidthCampaignCard!]!
}

"""
At least one of the three fields should be present, BFF should NOT return an
instance of this type with all fields null
"""
type CampaignCopy
  @join__type(graph: IRIS)
{
  campaignCopyTitle: String
  campaignCopySubtitle: String
  campaignCopyBody: String
}

type CampaignTermsAndConditions
  @join__type(graph: IRIS)
{
  termsAndConditionsTitle: String!
  markdownText: String!
}

enum CancelOrderReason
  @join__type(graph: IRIS)
{
  WINDOW_CLOSED @join__enumValue(graph: IRIS)
  NOT_FOUND @join__enumValue(graph: IRIS)
}

type CancelOrderResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  message: String
  reason: CancelOrderReason
  title: String
}

type CancelWarning
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  message: String!
}

"""Height of Card"""
enum CardHeight
  @join__type(graph: IRIS)
{
  SMALL @join__enumValue(graph: IRIS)
  MEDIUM @join__enumValue(graph: IRIS)
  LARGE @join__enumValue(graph: IRIS)
}

enum CardSize
  @join__type(graph: IRIS)
{
  SMALL @join__enumValue(graph: IRIS)
  MEDIUM @join__enumValue(graph: IRIS)
  LARGE @join__enumValue(graph: IRIS)
  COMPACT @join__enumValue(graph: IRIS)
  REGULAR @join__enumValue(graph: IRIS)
}

type Carousel
  @join__type(graph: IRIS)
{
  carouselItems: [CarouselItem!]!
}

union CarouselItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "HeroBanner")
 = HeroBanner

type CartActions
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  numberOfItems: Int!
  actionTiles: [ActionTile!]!
}

"""Alert shown in cart"""
type CartAlert
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  buttonTitle: String!
  analytics: Analytics
}

"""Cart Available Product section"""
type CartAvailableProductSection
  @join__type(graph: IRIS)
{
  """Title of the product section"""
  title: String

  """Section header with title and icon"""
  sectionHeader: CheckoutSectionHeader

  """Array of product feeds"""
  products: [CartProductFeed!]!
}

"""Banners for cart"""
type CartBanner
  @join__type(graph: IRIS)
{
  banner: InsetBanner!

  """Specify the type of action mapped on FE for the banner"""
  type: CartBannerType!
}

enum CartBannerType
  @join__type(graph: IRIS)
{
  """Default banner action"""
  STANDARD @join__enumValue(graph: IRIS)

  """Action lead to product review"""
  PRODUCT_REVIEW @join__enumValue(graph: IRIS)

  """Action lead to update fulfilment details"""
  FULFILMENT_WINDOW @join__enumValue(graph: IRIS)
}

"""Cart footer"""
type CartFooter
  @join__type(graph: IRIS)
{
  button: Button!
  totalLabel: String!
  totalAmount: String!
  totalDescription: String
  savings: String

  """
  panelMarkdown is used to display the cart "About estimated totals" panel. Currently only supported by the NZ app.
  """
  panelMarkdown: String
}

"""Cart Header"""
type CartHeader
  @join__type(graph: IRIS)
{
  """Total price including delivery fees"""
  subtotalInclDelivery: String!

  """Savings on cart e.g., You have saved $0.20"""
  savingsOnCart: SavingsOnCart

  """Checkout button"""
  cartCheckoutBtn: Button!

  """Subtitle"""
  subtitle: String!
}

type CartInfoProductQuantity
  @join__type(graph: IRIS)
{
  productId: String!
  quantity: Float!
}

type CartInfoResponse
  @join__type(graph: IRIS)
{
  totalProductCount: Int!
  productQuantities: [CartInfoProductQuantity!]!
}

type CartMarketProductSection
  @join__type(graph: IRIS)
{
  """Section header with title and icon"""
  sectionHeader: CheckoutSectionHeader

  """Market shipping message"""
  shippingMessage: InlineMessage @deprecated(reason: "Not used by FE from 22.19 onwards, use shippingMessageBanner")

  """Market shipping message banner"""
  shippingMessageBanner: ShippingMessageBanner

  """Array of sellerGroups"""
  sellerGroups: [MarketSellerCard]!

  """Market shipping fee tracker"""
  cartTracker: MarketplaceCartTracker

  """Stock codes list that are undeliverable"""
  undeliverableStockcodes: [Int!]!
}

"""Product card"""
type CartProductCard implements ProductRow
  @join__implements(graph: IRIS, interface: "ProductRow")
  @join__type(graph: IRIS)
{
  """product id that is unique to each item"""
  productId: String!

  """Description of the product"""
  title: String!

  """Image url of the product"""
  imageUrl: String!

  """Is the product available (true or false)"""
  isAvailable: Boolean!

  """
  Total price (it will be removed once FE started consuming unitPrice and totalPrice)
  """
  price: Int

  """Price per item in cents"""
  unitPrice: Int

  """Total Price of same products in cents"""
  totalPrice: Int

  """Quanitities in cart"""
  quantity: Float!

  """Disclaimer text for meat loss and tobacco products"""
  disclaimer: InsetBanner

  """quantity selector information"""
  quantityInfo: CartProductQuantityInfo!

  """marketplace info for market product"""
  marketplace: MarketplaceProductInfo

  """Total saving for this product"""
  saving: String

  """Total price before reduction"""
  wasPrice: String

  """EDR member product price promotion info"""
  memberPricePromotionInfo: MemberPricePromotionInfo

  """Non EDR member buy more save more product promotion info"""
  multiBuyPromotionInfo: MultiBuyPromotionInfo

  """Bundle promotion info"""
  bundlePromotionInfo: BundlePromotionInfo

  """Additional fields on cart product(initially used for analytics)"""
  cartProductInfo: CartProductInfo

  """Available limit for ATP/Trader limit restrictions"""
  availableLimit: String
}

type CartProductCategory
  @join__type(graph: IRIS)
{
  title: String!
}

"""Array of product feeds"""
union CartProductFeed
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CartProductCard")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "CartProductCategory")
 = CartProductCard | InsetBanner | CartProductCategory

"""Additional cart state fields"""
type CartProductInfo
  @join__type(graph: IRIS)
{
  """totalPrice as number eg: 15.5"""
  totalPrice: String

  """wasPrice as number eg: 15.5"""
  totalOriginalPrice: String

  """savings as number eg: 5.5"""
  totalDiscount: String
}

"""Response for update product cart quantities"""
type CartProductQuantitiesUpdatedResponse
  @join__type(graph: IRIS)
{
  productCount: Int!
  updatedProductQuantities: [CartProductQuantityUpdated!]!
  totalProductCount: Int!
  cart: CartResponse!
}

type CartProductQuantity
  @join__type(graph: IRIS)
{
  productId: String!
  quantity: Float!
}

enum CartProductQuantityAction
  @join__type(graph: IRIS)
{
  ADD @join__enumValue(graph: IRIS)
  REMOVE @join__enumValue(graph: IRIS)
  UPDATE_INCREASE @join__enumValue(graph: IRIS)
  UPDATE_DECREASE @join__enumValue(graph: IRIS)
  INVALID @join__enumValue(graph: IRIS)
}

"""Represents the products currently added to users shopping cart."""
type CartProductQuantityInfo
  @join__type(graph: IRIS)
{
  """Minimum amount that can be added to cart."""
  minimum: Float!

  """Maximum amount that can be added to cart."""
  maximum: Float!

  """Increment for adding products to cart."""
  increment: Float!

  """
  Default amount to initialize the quantity selector when item is not already added to any cart
  """
  default: Float!

  """Measurement used for product."""
  unit: String
}

"""Quantity update for a single cart product"""
input CartProductQuantityUpdate
  @join__type(graph: IRIS)
{
  productId: String!
  quantity: Float!
  adId: String
  source: String
}

"""Updated quantity for a single cart product"""
type CartProductQuantityUpdated
  @join__type(graph: IRIS)
{
  productId: String!
  updatedQuantity: Float!

  """
  deltaQuantity, deltaSubtotal, productQuantityAction required for calculating analytics info
  """
  deltaQuantity: Float
  deltaSubtotal: String
  productQuantityAction: CartProductQuantityAction
  success: Boolean!
  error: ErrorUpdateCartProductQuantity
}

"""Cart Product section"""
type CartProductSection
  @join__type(graph: IRIS)
{
  """Title of the product section"""
  title: String

  """Section header with title and icon"""
  sectionHeader: CheckoutSectionHeader

  """Array of product feeds"""
  products: [CartProductFeed!]!
}

"""Promotion Information such as rewards credits"""
type CartPromotionInfo
  @join__type(graph: IRIS)
{
  """
  To show different background colours based on isRewardsLinked flag (true or false)
  """
  active: Boolean!

  """Image url of rewards credits icon"""
  imageUrl: String!

  """Rewards credits description"""
  description: String!

  """Rewards credits tooltip message"""
  tooltipMessage: CartPromotionsToolTipMessage!
}

"""Promotion section"""
type CartPromotionSection
  @join__type(graph: IRIS)
{
  """Promotion Id such as rewardcredits"""
  promotionId: String!

  """Array of product feeds"""
  products: [CartProductFeed!]!

  """Title of the section"""
  title: String

  """Promotion info (e.g., Rewards credits info)"""
  info: CartPromotionInfo!
}

type CartPromotionsToolTipMessage
  @join__type(graph: IRIS)
{
  """Title"""
  title: String!

  """tooltip message"""
  message: String!
}

"""Cart section that has products, rewards, savings etc"""
type CartResponse
  @join__type(graph: IRIS)
{
  """Cart header"""
  header: CartHeader!

  """
  Total products in cart (e.g., 4), used for showing the empty state of cart
  """
  totalProducts: Int!

  """Rewards points earned will be shown only for rewards linked customers"""
  rewardsInfo: CartRewardsInfo

  """Product sections"""
  cartSections: [CartSection!]!

  """Remove all products from cart"""
  removeAllAction: String!

  """Cart footer"""
  footer: CartFooter!

  """Help FE with navigation, indicating Products in cart requires review"""
  requiresProductReview: Boolean!

  """
  Help FE with navigation, indicating a Fulfilment window needs to be selected
  """
  requiresFulfilmentWindow: Boolean!

  """
  Help FE with navigation, indicating a HaveYouForgotten screen is required
  """
  requiresHaveYouForgotten: Boolean!

  """
  Help FE with navigation, indicating customer need to enter their address
  """
  requiresFulfilmentAddress: Boolean!

  """
  Help FE with navigation, indicating customer need to address something before next step
  """
  requiredAlert: CartAlert

  """Analytics for cart"""
  analytics: [Analytics!]!

  """All products in cart for list actions"""
  cartProductQuantities: [CartProductQuantity!]!
}

"""Rewards information"""
type CartRewardsInfo
  @join__type(graph: IRIS)
{
  """Image url of rewards card icon"""
  imageUrl: String!

  """content showing rewards points earned"""
  title: String!
}

"""Array of different sections within the cart"""
union CartSection
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CartProductSection")
  @join__unionMember(graph: IRIS, member: "CartPromotionSection")
  @join__unionMember(graph: IRIS, member: "CartMarketProductSection")
  @join__unionMember(graph: IRIS, member: "InlineMessage")
  @join__unionMember(graph: IRIS, member: "ImageTextBanner")
  @join__unionMember(graph: IRIS, member: "CartAvailableProductSection")
  @join__unionMember(graph: IRIS, member: "CartBanner")
  @join__unionMember(graph: IRIS, member: "CouponBanner")
 = CartProductSection | CartPromotionSection | CartMarketProductSection | InlineMessage | ImageTextBanner | CartAvailableProductSection | CartBanner | CouponBanner

type CatalogueBrowse
  @join__type(graph: IRIS)
{
  pages: [CatalogueBrowsePageItem!]!
  totalNumberOfPages: Int!
}

type CatalogueBrowseCategoryPage
  @join__type(graph: IRIS)
{
  pageNumber: Int!
  backgroundUrl: String!
  backgroundColor: String

  """
  Category ID(nodeId) e.g. 1_DEB537E, if there is new collection required that not part
  of categories, new ID will be added
  """
  id: ID!
  items: [CatalogueBrowseCategoryPageItem!]!
}

type CatalogueBrowseCategoryPageButton
  @join__type(graph: IRIS)
{
  button: Button!
}

type CatalogueBrowseCategoryPageHeader
  @join__type(graph: IRIS)
{
  title: String!
  iconUrl: String!
}

union CatalogueBrowseCategoryPageItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CatalogueBrowseCategoryPageHeader")
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "CatalogueBrowseCategoryPageButton")
 = CatalogueBrowseCategoryPageHeader | ProductCard | CatalogueBrowseCategoryPageButton

union CatalogueBrowsePageItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CatalogueBrowseCategoryPage")
  @join__unionMember(graph: IRIS, member: "CatalogueBrowsePromotionPage")
 = CatalogueBrowseCategoryPage | CatalogueBrowsePromotionPage

enum CatalogueBrowsePageType
  @join__type(graph: IRIS)
{
  CATEGORY @join__enumValue(graph: IRIS)
  PROMOTION @join__enumValue(graph: IRIS)
}

type CatalogueBrowsePromotionPage
  @join__type(graph: IRIS)
{
  pageNumber: Int!
  backgroundUrl: String!
  backgroundColor: String
  id: ID!
  items: [CatalogueBrowsePromotionPageItem!]!
}

type CatalogueBrowsePromotionPageButton
  @join__type(graph: IRIS)
{
  button: Button!
}

type CatalogueBrowsePromotionPageHeader
  @join__type(graph: IRIS)
{
  title: String!
  iconUrl: String!
}

union CatalogueBrowsePromotionPageItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CatalogueBrowsePromotionPageHeader")
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "CatalogueBrowsePromotionPageButton")
  @join__unionMember(graph: IRIS, member: "ProductHeroCard")
 = CatalogueBrowsePromotionPageHeader | ProductCard | CatalogueBrowsePromotionPageButton | ProductHeroCard

"""Always showing. Drives the catalogue tile on the FE."""
type CatalogueCard
  @join__type(graph: IRIS)
{
  """'Catalogue'"""
  title: String!

  """'View current specials'"""
  subtitle: String!
  imageLeft: String
  imageRight: String
  imageBackground: String
  catalogueCardType: CatalogueCardType

  """Sale Finder saleId"""
  id: ID
}

enum CatalogueCardType
  @join__type(graph: IRIS)
{
  CURRENT @join__enumValue(graph: IRIS)
  SNEAK_PEEK @join__enumValue(graph: IRIS)
}

type CatalogueHome
  @join__type(graph: IRIS)
{
  items: [CatalogueHomeItem!]!
}

interface CatalogueHomeCard
  @join__type(graph: IRIS)
{
  title: String!
  image: String!
  id: ID!
  dateDisplay: String!
}

type CatalogueHomeCardSneakPeek
  @join__type(graph: IRIS)
{
  """e.g., Sneak Peek"""
  title: String!

  """e.g., On sale"""
  subtitle: String!

  """
  A date in EEE d/M format
  e.g., Wed. 8/6
  """
  dateDisplay: String!
}

type CatalogueHomeCardTracking
  @join__type(graph: IRIS)
{
  """The id of the catalogue e.g,. 45341"""
  id: ID!
  validity: CatalogueHomeCardTrackingValidity!

  """e.g., Weekly Specials NSW"""
  type: String!

  """All dates in following format: yyyy-MM-dd HH:mm:ss"""
  publishDate: String!
  startDate: String!
  endDate: String!
  postCode: String!

  """e.g., NSW"""
  state: String!
}

enum CatalogueHomeCardTrackingValidity
  @join__type(graph: IRIS)
{
  FUTURE @join__enumValue(graph: IRIS)
  CURRENT @join__enumValue(graph: IRIS)
}

type CatalogueHomeCatalogueCard implements CatalogueHomeCard
  @join__implements(graph: IRIS, interface: "CatalogueHomeCard")
  @join__type(graph: IRIS)
{
  title: String!
  image: String!
  id: ID!
  dateDisplay: String!
  description: String
  downloadLink: String

  """
  An optional sneak peek pink decoration for future catalogues
  displayed on Tuesday
  """
  sneakPeek: CatalogueHomeCardSneakPeek

  """Tracking metadata for analytics"""
  tracking: CatalogueHomeCardTracking!

  """Represents the page path from content management system(AEM)"""
  pagePath: String
}

type CatalogueHomeChangeStore
  @join__type(graph: IRIS)
{
  storeName: String!
  postCode: String!
  button: Button!
}

union CatalogueHomeItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CatalogueHomeSpecialsCard")
  @join__unionMember(graph: IRIS, member: "CatalogueHomeCatalogueCard")
  @join__unionMember(graph: IRIS, member: "CatalogueHomeChangeStore")
  @join__unionMember(graph: IRIS, member: "CatalogueHomeTermsAndConditions")
 = CatalogueHomeSpecialsCard | CatalogueHomeCatalogueCard | CatalogueHomeChangeStore | CatalogueHomeTermsAndConditions

input CatalogueHomeSaleFinderStore
  @join__type(graph: IRIS)
{
  """
  The SaleFinder storeId e.g., 4922 for Sydney Metcentre (different from Woolies storeId)
  """
  id: String!

  """e.g., Woolworths Sydney Metcentre"""
  name: String!

  """e.g., 2000"""
  postCode: String!
}

type CatalogueHomeSpecialsCard implements CatalogueHomeCard
  @join__implements(graph: IRIS, interface: "CatalogueHomeCard")
  @join__type(graph: IRIS)
{
  """the URL of the image resource for the card"""
  image: String!

  """
  e.g., "My Specials Catalogue"
  """
  title: String!

  """
  a unique ID so that we know what catalogue to open when the item is clicked
  """
  id: ID!

  """
  Offer valid date range
  e.g. Offer valid Wed 8 Jun - Tue 14 Jun 2022
  """
  dateDisplay: String!
}

type CatalogueHomeTerm
  @join__type(graph: IRIS)
{
  """e.g., Weekly Specials NSW - Sneak Peek"""
  title: String!

  """e.g., On sale from Wednesday 8th June, 2022 until..."""
  body: String!
}

type CatalogueHomeTermsAndConditions
  @join__type(graph: IRIS)
{
  button: Button!

  """A collated array of the terms and conditions for every catalogue"""
  terms: [CatalogueHomeTerm!]!
}

type CatalogueLanding
  @join__type(graph: IRIS)
{
  items: [CatalogueLandingItem!]!
}

interface CatalogueLandingCard
  @join__type(graph: IRIS)
{
  title: String!
  image: String!
  id: ID!
}

type CatalogueLandingCategoryCard implements CatalogueLandingCard
  @join__implements(graph: IRIS, interface: "CatalogueLandingCard")
  @join__type(graph: IRIS)
{
  """The display title for a Category Card"""
  title: String!

  """The display image URL for a Category Card"""
  image: String!

  """The category ID for a Category Card"""
  id: ID!
}

type CatalogueLandingHeader
  @join__type(graph: IRIS)
{
  """The display image URL for header"""
  headerImage: String!
}

union CatalogueLandingItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CatalogueLandingHeader")
  @join__unionMember(graph: IRIS, member: "CatalogueLandingPrimaryContentCard")
  @join__unionMember(graph: IRIS, member: "CatalogueLandingCategoryCard")
  @join__unionMember(graph: IRIS, member: "ActionableCard")
 = CatalogueLandingHeader | CatalogueLandingPrimaryContentCard | CatalogueLandingCategoryCard | ActionableCard

"""
@deprecated Removed from FE as of Shop App 25.11, remove after next force-upgrade
"""
type CatalogueLandingPrimaryContentCard implements CatalogueLandingCard
  @join__implements(graph: IRIS, interface: "CatalogueLandingCard")
  @join__type(graph: IRIS)
{
  """The display title"""
  title: String!

  """The display image URL for Primary Content Card"""
  image: String!

  """The subtitle shows 'xxx PRODUCTS'"""
  subtitle: String!
  id: ID!
}

type CatalogueListing
  @join__type(graph: IRIS)
{
  header: CatalogueListingHeader
  items: [CatalogueListingItem!]!
}

type CatalogueListingHeader
  @join__type(graph: IRIS)
{
  title: String!
  backgroundImageUrl: String
  backgroundColor: String
}

"""A full width "hero" product card."""
type CatalogueListingHeroProductCard
  @join__type(graph: IRIS)
{
  product: ProductCard!
}

union CatalogueListingItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CatalogueListingHeroProductCard")
  @join__unionMember(graph: IRIS, member: "ProductCard")
 = CatalogueListingHeroProductCard | ProductCard

type CataloguePromotionDetails
  @join__type(graph: IRIS)
{
  """List of catalogue promotion details item"""
  items: [CataloguePromotionDetailsItem!]!
}

"""Input parameters of the Query.cataloguePromotionDetails"""
input CataloguePromotionDetailsInput
  @join__type(graph: IRIS)
{
  """Represents the store id. *e.g. "1550"*."""
  storeId: String

  """Represents the current shopping mode."""
  mode: ShoppingModeType!

  """Represents the promotion fragment path."""
  pagePath: String @deprecated(reason: "Not using for promotion carousel, will use for digi cat in future")

  """Represents the sneak warning message path."""
  sneakWarningPath: String @deprecated(reason: "Not using for promotion carousel, will use for digi cat in future")

  """Represents the size of the page."""
  pageSize: Int

  """Represents the number of the page."""
  pageNumber: Int

  """Represents the product id. *e.g. "123456"*."""
  productId: String

  """Represents the offer id. *e.g. "1550"*."""
  offerId: String

  """Product source for analytics"""
  requestSource: String
}

union CataloguePromotionDetailsItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PromotionDetailsHeader")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "TermsAndConditions")
  @join__unionMember(graph: IRIS, member: "ProductCard")
 = PromotionDetailsHeader | InsetBanner | TermsAndConditions | ProductCard

type CataloguePromotionGroup
  @join__type(graph: IRIS)
{
  cataloguePromotionGroupBadge: ImageWithAlt
  cataloguePromotionGroupBackgroundColor: String
  cataloguePromotionGroupItems: [CataloguePromotionGroupItem!]
}

union CataloguePromotionGroupItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "ProductHeroCard")
 = ProductCard | ProductHeroCard

type CataloguePromotionListing
  @join__type(graph: IRIS)
{
  header: CataloguePromotionListingHeader
  items: [CataloguePromotionListingItem!]!
}

type CataloguePromotionListingHeader
  @join__type(graph: IRIS)
{
  title: String!
  backgroundImageUrl: String
  backgroundColor: String
}

union CataloguePromotionListingItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "ProductHeroCard")
  @join__unionMember(graph: IRIS, member: "CataloguePromotionGroup")
 = ProductCard | ProductHeroCard | CataloguePromotionGroup

"""List of Categories"""
type Categories implements MarketplaceSectionItem
  @join__implements(graph: IRIS, interface: "MarketplaceSectionItem")
  @join__type(graph: IRIS)
{
  pageName: MarketplaceLandingPageName!
  displayName: String!
  channel: ProductListChannelType!
  facet: ProductListFacetType!
  promotionBanner: PromotionBanner
  items: [CategoryItem!]!
}

enum CategoriesType
  @join__type(graph: IRIS)
{
  SPECIALS @join__enumValue(graph: IRIS)
  PRODUCTS @join__enumValue(graph: IRIS)
  PRODUCTS_EM @join__enumValue(graph: IRIS)
}

input CategoryAndEventsInput
  @join__type(graph: IRIS)
{
  """
  Category or Events Page ID
  (null = default landing page)
  """
  id: ID

  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  Represents the store id. *e.g. "1550"*.
  Required if mode is INSTORE
  """
  storeId: String

  """
  List of app action that the client supports. This ensures
  that app actions coming out of this response works for the client
  ie. ["openbottomsheet"]
  """
  supportedActions: [String!]!

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]!
}

type CategoryAndEventsPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Different metadata that may be displayed on top/above
  the scrollable area.
  """
  header: CategoryAndEventsPageHeader

  """
  List of different ui components. To be displayed in
  the main scrollable area of the Page
  """
  items: [GenericPageFeedItem]!

  """
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type CategoryAndEventsPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """represents page title"""
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

"""Category from Trader - is of Level 1 - eg: Pet"""
type CategoryItem implements MarketplaceItem
  @join__implements(graph: IRIS, interface: "MarketplaceItem")
  @join__type(graph: IRIS)
{
  id: String!
  title: String!
  imageUrl: String!
  displayOrder: String!
  isFinalLevel: Boolean!
  source: String
}

type CategoryMenuItem
  @join__type(graph: IRIS)
{
  categoryId: String!
  title: String!
  headerTitle: String!
  displayOrder: String!
  iconUrl: String
  isFinalLevel: Boolean!

  """
  category navigation path for product source
  eg: Aisle.Pantry.Baking for Baking category object
  """
  source: String
}

type CategoryTile
  @join__type(graph: IRIS)
{
  title: String!
  action: String!
  imageUrl: String!
  imageAltText: String
}

type CategoryTileList
  @join__type(graph: IRIS)
{
  categoryTileListTitle: String
  categoryTileListTiles: [CategoryTile!]!
}

type ChangeMyOrderDeliveryInstructions
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  iconUrl: String!
}

type ChangeMyOrderDetailsSection
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  items: [ChangeMyOrderDetailsSectionItems!]!
}

union ChangeMyOrderDetailsSectionItems
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "FulfilmentMethod")
  @join__unionMember(graph: IRIS, member: "ChangeMyOrderDeliveryInstructions")
  @join__unionMember(graph: IRIS, member: "FulfilmentTimeSlot")
  @join__unionMember(graph: IRIS, member: "CartActions")
 = FulfilmentMethod | ChangeMyOrderDeliveryInstructions | FulfilmentTimeSlot | CartActions

type ChangeMyOrderSummary
  @join__type(graph: IRIS)
{
  banner: BasicCoreBroadcastBanner
  orderDetailsSection: ChangeMyOrderDetailsSection!
  paymentSummarySection: PaymentSummarySection!
  footerCTASection: FooterCTASection!
}

"""Chat Entry Card used in Specials Home Screen"""
type ChatEntryCard
  @join__type(graph: IRIS)
{
  chatEntryCardTitle: String!
  chatEntryCardSubtitle: String!
  chatEntryCardShowBeta: Boolean
  chatEntryCardTextPrompts: [String!]!
  chatEntryCardAction: Action!
  chatEntryCardImageUrl: String!
}

type CheaperSubstitutesSection
  @join__type(graph: IRIS)
{
  banner: BroadcastBanner!
}

enum CheckInType
  @join__type(graph: IRIS)
{
  checkIn15mins @join__enumValue(graph: IRIS)
  checkInNow @join__enumValue(graph: IRIS)
}

enum CheckoutBadgeStyle
  @join__type(graph: IRIS)
{
  PLAIN @join__enumValue(graph: IRIS)
  PRIMARY @join__enumValue(graph: IRIS)
  PRIMARY_SOLID @join__enumValue(graph: IRIS)
}

enum CheckoutBadgeType
  @join__type(graph: IRIS)
{
  Status @join__enumValue(graph: IRIS)
  Restriction @join__enumValue(graph: IRIS)
}

union CheckoutCollectionAddress
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutCollectionAddressDelivery")
  @join__unionMember(graph: IRIS, member: "CheckoutCollectionAddressPickup")
 = CheckoutCollectionAddressDelivery | CheckoutCollectionAddressPickup

type CheckoutCollectionAddressDelivery
  @join__type(graph: IRIS)
{
  """eg: Deliver To or Pickup from"""
  title: String!

  """address id"""
  addressId: Int!

  """postcode"""
  postcode: String!

  """street1"""
  street1: String!

  """street2"""
  street2: String!

  """suburbId"""
  suburbId: Int!

  """street2"""
  suburbName: String!

  """Delivery or Pickup"""
  modeId: CollectionModeId!

  """name string"""
  displayName: String!

  """logo"""
  imageUrl: String! @deprecated(reason: "Use `addressImageUrl` instead from Iris 22.5 onwards")

  """new image"""
  addressImageUrl: String

  """text displayed on the button"""
  buttonText: String!

  """Store Id that delivers products for delivery now customers"""
  expressDeliveryStoreId: Int
}

type CheckoutCollectionAddressEmpty
  @join__type(graph: IRIS)
{
  """eg: Deliver To or Pickup from"""
  title: String!

  """eg: Additional text"""
  displayName: String!

  """text displayed on the button"""
  buttonText: String!
}

type CheckoutCollectionAddressPickup
  @join__type(graph: IRIS)
{
  """eg: Deliver To or Pickup from"""
  title: String!

  """address id"""
  addressId: Int!

  """store id"""
  storeId: Int!

  """Delivery or Pickup"""
  modeId: CollectionModeId!

  """address string"""
  text: String!

  """name string"""
  displayName: String!

  """logo"""
  imageUrl: String! @deprecated(reason: "Use `addressImageUrl` instead from Iris 22.5 onwards")

  """new image"""
  addressImageUrl: String

  """label"""
  label: String!

  """text displayed on the button"""
  buttonText: String!
}

"""
Union type in details page to select a collection method eg: delivery/pickup
"""
type CheckoutCollectionMethod
  @join__type(graph: IRIS)
{
  """Text to be displayed to the user eg: select a collection method"""
  title: String!

  """collection options"""
  options: [CheckoutCollectionMethodOption!]!

  """address details"""
  address: CheckoutCollectionAddress!

  """Fields used to "sync" shopping mode with App"""
  shoppingModeDetails: ShoppingModeDetails!

  """Bottomsheet to indicate of switching to pickup with EM items"""
  marketPickupSheet: CheckoutMarketPickupBottomSheet

  """
  Inset banner to indicate DTBNow/Delivery Now orders will jump up the queue
  """
  insetBanner: InsetBanner
}

type CheckoutCollectionMethodOption
  @join__type(graph: IRIS)
{
  """
  Set when modeId is Delivery or DeliveryNow and user has a Primary Address
  """
  addressId: Int

  """Delivery or Pickup"""
  title: String!

  """Delivery or Pickup"""
  modeId: CollectionModeId!

  """if the collection method is selected or not"""
  isSelected: Boolean!
}

type CheckoutContent
  @join__type(graph: IRIS)
{
  productsInfo: [CheckoutProductInfo!]
  errors: [CheckoutSegmentError!]! @deprecated(reason: "Always returns empty array")
  message: CheckoutSegmentMessage
  legacyErrors: [LegacyError!]!
  progress: [CheckoutSegmentProgress!]!
  content: [CheckoutSegmentContent!]!
  orderTotalDetails: CheckoutOrderTotalDetails!
  idVerificationBottomSheet: IdVerificationBottomSheet
  impressionAnalytics: [Analytics!]!
  isUserWPayMigrated: Boolean!
}

type CheckoutCredit
  @join__type(graph: IRIS)
{
  """Checkout store credit title"""
  title: String!

  """Checkout credit description, e.g. Available credit: $10.30"""
  description: String!

  """Shows credit applied icon when true"""
  appliedIcon: Boolean!

  """modal detail"""
  detail: CheckoutCreditDetail!

  """tile click analytics"""
  actionClickAnalytics: Analytics
}

union CheckoutCreditDetail
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutCreditEmpty")
  @join__unionMember(graph: IRIS, member: "CheckoutCreditItems")
  @join__unionMember(graph: IRIS, member: "CheckoutCreditUnavailable")
 = CheckoutCreditEmpty | CheckoutCreditItems | CheckoutCreditUnavailable

type CheckoutCreditEmpty
  @join__type(graph: IRIS)
{
  """empty state title"""
  title: String!

  """empty state message"""
  message: String!
}

type CheckoutCreditItem
  @join__type(graph: IRIS)
{
  """$xx.xx Store credit"""
  title: String!

  """store credit code"""
  subtitle: String!

  """Expires on DD/MM/YY"""
  primaryLabel: String!

  """Issued on DD/MM/YY"""
  secondaryLabel: String!

  """Indicate if the credit is already applied"""
  isApplied: Boolean!

  """the actual code for apply or remove"""
  code: String!

  """$xx.xx formatted amount this store credit have"""
  amount: String!
}

type CheckoutCreditItems
  @join__type(graph: IRIS)
{
  """Available balance"""
  title: String!

  """$20.00"""
  subtitle: String!
  items: [CheckoutCreditItem!]!
}

type CheckoutCreditUnavailable
  @join__type(graph: IRIS)
{
  """unavailable state title"""
  title: String!

  """unavailable state message"""
  message: String!

  """unvailable state retry button title"""
  retryButtonTitle: String!
}

type CheckoutDeliveryNowWindow
  @join__type(graph: IRIS)
{
  """window id"""
  id: Int!

  """startTime string"""
  startTime: String!

  """Delivery Now"""
  title: String!

  """eg: In approx 1hr and 10 minutes"""
  subtitle: String!

  """eg: 50 item limit"""
  secondarySubtitle: String

  """price eg: $19.00"""
  sectionTitle: String!

  """image"""
  imageUrl: String!

  """learn more about"""
  messageTitle: String!

  """delivery now"""
  buttonTitle: String!

  """additional delivery now info"""
  info: InfoSection!

  """is DN selected"""
  isSelected: Boolean!

  """
  DeliveryNow tile is enabled when slots are availble
  DeliveryNow tile is disabled when slots are exhausted or outside of operating hours for DTBNow
  """
  isEnabled: Boolean!

  """
  Show badge as "At full capacity, check back soon" when slots are exhaused for DeliveryNow
  Show badge as "Available from <start time> - <end time>" when it was outside of DeliveryNow operating hours
  Do not show badge when window slots are available
  """
  badge: Badge

  """Contextual information about the slot"""
  selectionInfo: FulfilmentWindowSlotSelectionInfo
}

enum CheckoutDeliveryPreferenceId
  @join__type(graph: IRIS)
{
  SelfIsolation @join__enumValue(graph: IRIS)
  LeaveUnattended @join__enumValue(graph: IRIS)
  DeliveryInstruction @join__enumValue(graph: IRIS)
  NominatedIdCheck @join__enumValue(graph: IRIS)
}

type CheckoutDeliveryPreferenceText
  @join__type(graph: IRIS)
{
  preferenceId: CheckoutDeliveryPreferenceId!
  isEnabled: Boolean!
  title: String!
  descriptionText: String
  placeholderText: String
  text: String
  inputLimit: InputTextLimit

  """text displayed on the button"""
  buttonTitle: String!
  inlineMessage: InlineMessage
}

"""user preference"""
type CheckoutDeliveryPreferenceToggle
  @join__type(graph: IRIS)
{
  preferenceId: CheckoutDeliveryPreferenceId!
  isEnabled: Boolean!
  title: String!
  subtitle: String!
  label: String!
  value: Boolean!
  inlineMessage: InlineMessage
}

type CheckoutDirectToBootNowWindow
  @join__type(graph: IRIS)
{
  """window id"""
  id: Int!

  """startTime string"""
  startTime: String!

  """Direct To Boot Now"""
  title: String!

  """eg: within 60mins"""
  subtitle: String!

  """eg: 50 item limit"""
  secondarySubtitle: String

  """price eg: $19.00"""
  sectionTitle: String!

  """image"""
  imageUrl: String!

  """is DTBNow selected"""
  isSelected: Boolean!

  """
  DTBNow tile is enabled when slots are availble
  DTBNow tile is disabled when slots are exhausted or outside of operating hours for DTBNow
  """
  isEnabled: Boolean!

  """
  Show badge as "At full capacity, check back soon" when slots are exhaused for DTBNow
  Show badge as "Available from <start time> - <end time>" when it was outside of DTBNow operating hours
  Do not show badge when window slots are available
  """
  badge: Badge

  """Show badges like NEW when DTBNow feature is new to a given user"""
  tileBadge: Badge

  """Contextual information about the slot"""
  selectionInfo: FulfilmentWindowSlotSelectionInfo
}

type CheckoutFulfilmentWindow
  @join__type(graph: IRIS)
{
  """eg: Today or Tomorrow"""
  title: String!

  """09 Jul"""
  subtitle: String!

  """if the windows in this date are available"""
  isAvailable: Boolean!

  """if this is selected"""
  isSelected: Boolean!

  """eg: From $19.00"""
  footer: String!

  """eg: Select time"""
  sectionTitle: String!

  """
  optional clickable text to reveal more information about the fulfilment (e.g. delivery or pickup) options. Currently only supported by NZ app.
  """
  extraInfoButton: ExtraInfoButton

  """
  optional extra information about the available fulfilment (e.g. delivery or pickup) options. Currently only supported by NZ app.
  """
  extraInfo: FulfilmentExtraInfo

  """optional delivery now window"""
  deliveryNow: CheckoutDeliveryNowWindow

  """
  optional delivery now window to show all the time with enabled/disabled state if store supports
  """
  deliveryNowV2: CheckoutDeliveryNowWindow

  """delivery now status Open/Closed/Exhausted ... etc"""
  deliveryNowStatus: DeliveryNowStatus!

  """optional direct to boot now"""
  directToBootNow: CheckoutDirectToBootNowWindow

  """
  optional direct to boot now to be shown all the time with enabled/disabled state if store supports
  """
  directToBootNowV2: CheckoutDirectToBootNowWindow

  """direct to boot now status Open/Closed/Exhausted ... etc"""
  directToBootNowStatus: DirectToBootNowStatus!

  """timeslot groups"""
  groups: [CheckoutFulfilmentWindowGroup!]!

  """green window banner"""
  greenWindowBanner: GreenWindowBanner @deprecated(reason: "Use `banner` instead")

  """Promotional banner"""
  banner: FulfilmentWindowPromotionalBanner
}

type CheckoutFulfilmentWindowGroup
  @join__type(graph: IRIS)
{
  """time group eg: morning"""
  title: String!

  """if any of the slots under this timegroup is selected"""
  isSelected: Boolean!

  """time group image"""
  imageUrl: String!

  """if slots are not available"""
  message: CheckoutFulfilmentWindowGroupMessage

  """times starting 5am - 12pm"""
  subtitle: String

  """all timeslots in this timegroup"""
  slots: [CheckoutFulfilmentWindowSlot!]!
}

type CheckoutFulfilmentWindowGroupMessage
  @join__type(graph: IRIS)
{
  """No windows currently offered"""
  title: String!

  """details"""
  subtitle: String!
}

type CheckoutFulfilmentWindows
  @join__type(graph: IRIS)
{
  """select delivery date"""
  title: String!

  """select a delivery window"""
  header: String!

  """(expiry notice) We’ll reserve your selection..."""
  subheader: InsetBanner

  """select date"""
  subtitle: String!

  """all fulfilment windows"""
  options: [CheckoutFulfilmentWindow!]!
  footer: FulfilmentWindowsFooter

  """
  displays the delivery and pickup fees information. Currently only supported by NZ app
  """
  feesInfo: FulfilmentExtraInfo

  """displays the fulfilment options window. Currently only used by NZ app"""
  selectionOptionsInfo: FulfilmentWindowSelectionOptionsInfo
}

type CheckoutFulfilmentWindowsEmptyState
  @join__type(graph: IRIS)
{
  """select delivery date"""
  title: String!

  """Error messages to be displayed"""
  message: String!
}

type CheckoutFulfilmentWindowSlot
  @join__type(graph: IRIS)
{
  """time window as a string eg: 12pm - 1pm"""
  title: String!

  """time duration eg: 1hr window"""
  subtitle: String!

  """startTime string"""
  startTime: String!

  """unique identifier of this slot"""
  id: Int!

  """if the slot if available or closed"""
  isAvailable: Boolean!

  """if this is selected"""
  isSelected: Boolean!

  """if is partner driver"""
  isPartnerDriver: Boolean!

  """price eg: $19.00"""
  sectionTitle: String!

  """badges eg: Closing Soon"""
  badges: [CheckoutFulfilmentWindowSlotBadge!]!

  """Contextual information about the slot"""
  selectionInfo: FulfilmentWindowSlotSelectionInfo

  """
  Contextual information about the slot state. Currently only used by the NZ app
  """
  selectionOptionsState: FulfilmentWindowSlotSelectionOptionsState
}

type CheckoutFulfilmentWindowSlotBadge
  @join__type(graph: IRIS)
{
  """eg: Status"""
  type: CheckoutBadgeType! @deprecated(reason: "Use style instead")

  """eg: Closing Soon"""
  title: String!

  """eg: PLAIN, PRIMARY, PRIMARY_SOLID"""
  style: CheckoutBadgeStyle!
}

"""Union type in details page Once the user selects a timewindow"""
type CheckoutFulfilmentWindowsSelectedState
  @join__type(graph: IRIS)
{
  """Select delivery date"""
  title: String!

  """Tomorrow, 09 Sep"""
  subtitle: String!

  """time window as a string eg: 12pm - 1pm"""
  timeWindow: String!

  """price eg: $19.00"""
  price: String!

  """Change"""
  buttonTitle: String!

  """all fulfilment windows"""
  windows: CheckoutFulfilmentWindows!

  """in case of any errors"""
  inlineMessage: InlineMessage
}

type CheckoutInfoDialog
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  buttonTitle: String!
  secondaryButtonTitle: String
}

enum CheckoutInputType
  @join__type(graph: IRIS)
{
  SegmentIndex @join__enumValue(graph: IRIS)
  CollectionMode @join__enumValue(graph: IRIS)
  FulfilmentWindow @join__enumValue(graph: IRIS)
  Packaging @join__enumValue(graph: IRIS)
}

type CheckoutMarketFulfilmentAddress
  @join__type(graph: IRIS)
{
  """Label: Ship to"""
  title: String!

  """Address text"""
  displayName: String!

  """Determine whether address is selected for EDM or not required"""
  addressStatus: MarketFulfilmentAddressStatus!

  """Add/Edit address button title in pickup mode, null for delivery mode"""
  addressButtonTitle: String

  """Indicates whether update primary address or EM alt address"""
  addressType: AddressType!

  """Grocery collection mode, used for client synchronisation"""
  modeId: CollectionModeId! @deprecated(reason: "Use `addressData.modeId` for collection mode synchronisation")

  """Delivery mode data used for client synchronise in EM only scenario"""
  addressData: CheckoutCollectionAddress

  """Fields used to "sync" shopping mode with App"""
  shoppingModeDetails: ShoppingModeDetails!
}

type CheckoutMarketPickupBottomSheet implements BottomSheetContent
  @join__implements(graph: IRIS, interface: "BottomSheetContent")
  @join__type(graph: IRIS)
{
  bottomSheetTitle: String!
  bottomSheetBody: String!
  showOnceOnly: Boolean
  bannerAsset: DownloadableAsset
  primaryCta: ContentCta
  secondaryCta: ContentCta
}

type CheckoutMarketProducts
  @join__type(graph: IRIS)
{
  title: String!
  descriptionText: String
  sellerGroups: [MarketSellerGroup!]!
}

enum CheckoutMessageType
  @join__type(graph: IRIS)
{
  Error @join__enumValue(graph: IRIS)
  Warning @join__enumValue(graph: IRIS)
  Info @join__enumValue(graph: IRIS)
}

type CheckoutOrderAddresses
  @join__type(graph: IRIS)
{
  title: String!
  addressSections: [CheckoutOrderAddressSegment!]!
  insetBanner: InsetBanner
}

union CheckoutOrderAddressSegment
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutOrderGroceryAddress")
  @join__unionMember(graph: IRIS, member: "CheckoutOrderMarketAddress")
 = CheckoutOrderGroceryAddress | CheckoutOrderMarketAddress

type CheckoutOrderGroceryAddress
  @join__type(graph: IRIS)
{
  imageUrl: String!
  title: String!
  addressText: String!
  fulfilmentWindow: String!
}

type CheckoutOrderMarketAddress
  @join__type(graph: IRIS)
{
  imageUrl: String!
  title: String!
  addressText: String!
  sellerInfo: [CheckoutOrderMarketSellerInfo!]!
}

type CheckoutOrderMarketSellerInfo
  @join__type(graph: IRIS)
{
  sellerName: String!
  dispatchNote: String!
}

type CheckoutOrderSummary
  @join__type(graph: IRIS)
{
  title: String!
  summaryText: String
  sections: [[CheckoutOrderTotalDetailsRow!]!]!
}

type CheckoutOrderTotalDetails
  @join__type(graph: IRIS)
{
  inlineMessage: InlineMessage
  sections: [[CheckoutOrderTotalDetailsRow!]!]!
  total: CheckoutOrderTotalDetailsSummaryRow!
  reviewProducts: CheckoutReviewProductsList @deprecated(reason: "Replaced by product restriction feature")
  refundInfo: CheckoutRefundInfoBottomSheet
}

type CheckoutOrderTotalDetailsRow
  @join__type(graph: IRIS)
{
  """eg: Subtotal or You'll collect"""
  title: String!

  """Style type of title"""
  titleType: CheckoutSummaryValueType!

  """eg: 72 points or $21.00"""
  value: String!

  """Type of value"""
  valueType: CheckoutSummaryValueType!

  """Optional image url"""
  imageUrl: String

  """Optional message for popup dialog box"""
  message: CheckoutOrderTotalDetailsRowMessage
}

type CheckoutOrderTotalDetailsRowMessage
  @join__type(graph: IRIS)
{
  title: String
  body: String
}

type CheckoutOrderTotalDetailsSummaryRow
  @join__type(graph: IRIS)
{
  """eg: Subtotal or You'll collect"""
  title: String!

  """eg: 72 points or $21.00"""
  value: String!

  """payable amount number eg: 21.00"""
  balanceToPay: Float!

  """Optional button text eg: Continue"""
  buttonTitle: String!

  """Next step on button click"""
  progressId: CheckoutProgressId

  """is the button enabled"""
  isEnabled: Boolean!
}

type CheckoutPackagingMethod
  @join__type(graph: IRIS)
{
  """
  string for displaying the section eg: How would you like your groceries packaged?
  """
  title: String!

  """package options"""
  options: [CheckoutPackagingOption!]!
}

type CheckoutPackagingOption
  @join__type(graph: IRIS)
{
  """packaging option identifier"""
  id: Int!

  """if the option is selected or not"""
  isSelected: Boolean!

  """eg: Reusable bags"""
  title: String!

  """eg: $1.5"""
  price: String!

  """eg: per order"""
  description: String

  """image url of the type"""
  imageUrl: String!
}

type CheckoutPackagingOptionInfo
  @join__type(graph: IRIS)
{
  """eg: learn more about"""
  title: String!

  """eg: Paper bags"""
  buttonTitle: String!

  """eg: Paper bags"""
  messageTitle: String!

  """description"""
  description: String!
}

enum CheckoutPackagingType
  @join__type(graph: IRIS)
{
  ReusableBags @join__enumValue(graph: IRIS)
  PaperBags @join__enumValue(graph: IRIS)
  BYOBags @join__enumValue(graph: IRIS)
}

type CheckoutPay
  @join__type(graph: IRIS)
{
  title: String!
  header: String
  options: [CheckoutPayOption!]!
}

type CheckoutPayOption
  @join__type(graph: IRIS)
{
  selected: Boolean
  title: String
  imageUrl: String
}

type CheckoutProductCampaignItem
  @join__type(graph: IRIS)
{
  label: String!
  title: String!
  subtitle: String!
  id: Int!
  imageUrl: String!
  isOptedIn: Boolean!
  campaignInfo: CheckoutInfoDialog!
}

type CheckoutProductCampaigns
  @join__type(graph: IRIS)
{
  campaigns: [CheckoutProductCampaignItem!]!
}

type CheckoutProductInfo
  @join__type(graph: IRIS)
{
  productId: String!
  productName: String!
  price: Float!
  quantity: Float!
  subtotal: Float!
  isAvailable: Boolean!
  sellerName: String
  brandName: String
  dispatchNote: String
  source: String
}

type CheckoutProductInstruction
  @join__type(graph: IRIS)
{
  """User entered text - null if no user input"""
  text: String

  """Text to be displayed when empty instructions eg: Add Instructions"""
  label: String!

  """Instructions text box title eg: Add Instructions"""
  title: String!

  """eg: Ripe tomatoes please"""
  placeholderText: String

  """eg: Save"""
  buttonTitle: String!
  inputLimit: InputTextLimit
}

type CheckoutProductRewards
  @join__type(graph: IRIS)
{
  """eg: +5 points"""
  points: String!
  imageUrl: String!
}

type CheckoutProductRow implements ProductRow
  @join__implements(graph: IRIS, interface: "ProductRow")
  @join__type(graph: IRIS)
{
  """eg: Products(2)"""
  title: String!
  quantity: Float!
  productId: String!

  """eg: $6.98"""
  unitPrice: String!

  """eg: Total"""
  totalTitle: String!

  """eg: $13.96"""
  totalPrice: String!
  imageUrl: String!
  instruction: CheckoutProductInstruction!

  """rewards info"""
  rewards: CheckoutProductRewards

  """disclaimer"""
  disclaimer: String @deprecated(reason: "use messages instead")
  allowSubstitution: Boolean!
  removeInfo: CheckoutInfoDialog!
  messages: [String!]!

  """indicates if we show substitution toggle to customer"""
  showSubstitution: Boolean!

  """Additional fields on cart product(initially used for analytics)"""
  cartProductInfo: CartProductInfo

  """Hold the substitution preferences from smart subs."""
  substitutionPreference: CheckoutProductSubstitutionPreference
}

type CheckoutProducts
  @join__type(graph: IRIS)
{
  title: String!
  descriptionText: String
  substitution: CheckoutSubstitution
  substitutionPreferences: CheckoutSubstitutionPreferences
  useSubstitutionPreference: Boolean!
  products: [CheckoutProductRow!]!
  substitutionPreferenceOnboardingBanner: BroadcastBanner
}

type CheckoutProductSubstitutionPreference
  @join__type(graph: IRIS)
{
  state: SubstitutionState!

  """ Optional header, useful in error state """
  header: String

  """
  Error State: Unable to load pref
  Non Error State: Substitute
  """
  title: String!

  """Hold the value for the action button in the row."""
  action: Button!
}

enum CheckoutProgressId
  @join__type(graph: IRIS)
{
  Details @join__enumValue(graph: IRIS)
  ReviewProducts @join__enumValue(graph: IRIS) @deprecated(reason: "Replaced by product restrictions")
  Products @join__enumValue(graph: IRIS)
  Summary @join__enumValue(graph: IRIS)
  Pay @join__enumValue(graph: IRIS)
}

type CheckoutPromoCode
  @join__type(graph: IRIS)
{
  """Checkout promo code title"""
  title: String!

  """Checkout promo code description. blank if no applied promo codes"""
  description: String!

  """Shows applied icon when true"""
  appliedIcon: Boolean!

  """tile click analytics"""
  actionClickAnalytics: Analytics

  """Promo code modal"""
  detail: CheckoutPromoCodeDetail!
}

type CheckoutPromoCodeDetail
  @join__type(graph: IRIS)
{
  """placeholder text, Enter promo code"""
  placeholderText: String

  """Apply"""
  buttonTitle: String!

  """List of applied promo codes and available promotions(in future)"""
  promoCodes: [CheckoutPromotionItem!]!
}

type CheckoutPromoCodeItem
  @join__type(graph: IRIS)
{
  """Promo code"""
  title: String!

  """optional subtitle, empty string if nothing"""
  subtitle: String!

  """T&Cs apply"""
  primaryLabel: String!

  """Expires on DD/MM/YY"""
  secondaryLabel: String!

  """Indicate if the promo code is already applied"""
  isApplied: Boolean!

  """the actual code for apply or remove"""
  code: String!
}

type CheckoutPromotionCode
  @join__type(graph: IRIS)
{
  """Promo code"""
  title: String!

  """Enter Promo Code"""
  placeholderText: String

  """Apply"""
  buttonTitle: String!

  """Applied discount"""
  discounts: PromoDiscount
}

union CheckoutPromotionItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutPromoCodeItem")
 = CheckoutPromoCodeItem

type CheckoutRefundInfoBottomSheet implements BottomSheetContent
  @join__implements(graph: IRIS, interface: "BottomSheetContent")
  @join__type(graph: IRIS)
{
  bottomSheetTitle: String!
  bottomSheetBody: String!
  showOnceOnly: Boolean
  bannerAsset: DownloadableAsset
  primaryCta: ContentCta
  secondaryCta: ContentCta
}

type CheckoutReviewProduct implements CheckoutReviewProductRow
  @join__implements(graph: IRIS, interface: "CheckoutReviewProductRow")
  @join__type(graph: IRIS)
{
  quantity: Float
  subtotal: Float
  checkoutErrorMessage: String
  stockcode: Int
  name: String
  displayName: String
  volumeSize: String
  imagePath: String
  isAvailable: Boolean
  isRestricted: Boolean
  minQuantity: Float
  supplyLimit: Float
  price: Float
}

type CheckoutReviewProductContent
  @join__type(graph: IRIS)
{
  legacyErrors: [LegacyError!]!
  reviewProducts: CheckoutReviewProductsList
}

interface CheckoutReviewProductRow
  @join__type(graph: IRIS)
{
  quantity: Float
  subtotal: Float
  checkoutErrorMessage: String
  stockcode: Int
  name: String
  displayName: String
  volumeSize: String
  imagePath: String
  isAvailable: Boolean
  isRestricted: Boolean
  minQuantity: Float
  supplyLimit: Float
  price: Float
}

type CheckoutReviewProductsList
  @join__type(graph: IRIS)
{
  unavailableOrderItems: [CheckoutReviewProductRow!]!
  restrictedOrderItems: [CheckoutReviewProductRow!]!
  exceededSupplyLimitProductGroups: [CheckoutReviewSupplyLimitGroups!]!
  restrictedProductsByDeliveryMethod: [CheckoutReviewProductRow!]!
  restrictedProductsByDeliPlatter: [CheckoutReviewProductRow!]!
  availableOrderItems: [CheckoutReviewProductRow!]!
}

type CheckoutReviewProductSupplyLimit implements CheckoutReviewProductRow
  @join__implements(graph: IRIS, interface: "CheckoutReviewProductRow")
  @join__type(graph: IRIS)
{
  quantity: Float
  subtotal: Float
  checkoutErrorMessage: String
  stockcode: Int
  name: String
  displayName: String
  volumeSize: String
  imagePath: String
  isAvailable: Boolean
  isRestricted: Boolean
  minQuantity: Float
  supplyLimit: Float
  price: Float

  """Additional field for supply limit items"""
  productGroupSupplyLimit: Float
}

type CheckoutReviewSupplyLimitGroups
  @join__type(graph: IRIS)
{
  products: [CheckoutReviewProductRow!]!
  errorMessage: String
}

type CheckoutRewards
  @join__type(graph: IRIS)
{
  """Checkout rewards title"""
  title: String!

  """Checkout rewards description, e.g. Available: $10"""
  description: String!

  """Shows rewards redeem icon when true"""
  redeemedIcon: Boolean!

  """Checkout rewards action"""
  rewardsAction: CheckoutRewardsAction

  """tile click analytics"""
  actionClickAnalytics: Analytics
}

"""Checkout rewards action"""
union CheckoutRewardsAction
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutRewardsRedeem")
  @join__unionMember(graph: IRIS, member: "CheckoutRewardsInfo")
  @join__unionMember(graph: IRIS, member: "CheckoutRewardsLink")
 = CheckoutRewardsRedeem | CheckoutRewardsInfo | CheckoutRewardsLink

"""
Checkout Rewards and Discounts segment
Replaces CheckoutSummaryRewards and CheckoutSummaryRewardsUnregistered
"""
type CheckoutRewardsAndDiscounts
  @join__type(graph: IRIS)
{
  """Rewards and discounts title"""
  title: String!

  """List of rewards and discounts"""
  rewardsAndDiscounts: [CheckoutRewardsAndDiscountsTile!]!

  """Analytics for rewards and discounts"""
  impressionAnalytics: [Analytics!]!
}

union CheckoutRewardsAndDiscountsTile
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutRewards")
  @join__unionMember(graph: IRIS, member: "CheckoutPromoCode")
  @join__unionMember(graph: IRIS, member: "CheckoutCredit")
 = CheckoutRewards | CheckoutPromoCode | CheckoutCredit

"""Checkout rewards info provides information about the users rewards"""
type CheckoutRewardsInfo
  @join__type(graph: IRIS)
{
  title: String!
  description: String!
  buttonTitle: String!
  impressionAnalytics: Analytics
  buttonClickAnalytics: Analytics
}

"""
Checkout rewards link provides a link to the rewards page for the user to sign up
"""
type CheckoutRewardsLink
  @join__type(graph: IRIS)
{
  _: Boolean
}

"""Checkout rewards redeem let's the user redeem his rewards"""
type CheckoutRewardsRedeem
  @join__type(graph: IRIS)
{
  """Information for selecting amount to redeem"""
  rewardsRedeemInfo: CheckoutRewardsRedeemInfo!

  """Rewards Dollars"""
  title: String!

  """Available $0.00"""
  description: String!

  """redeem bottom sheet impression"""
  impressionAnalytics: Analytics
}

type CheckoutRewardsRedeemInfo
  @join__type(graph: IRIS)
{
  """Minimum amount in cents that can be redeemed e.g. 1000 for $10"""
  minimum: Int!

  """Maximum amount in cents that is available"""
  maximum: Int!

  """Maximum amount in cents that is redeemable"""
  maximumRedeemable: Int!

  """Increment in cents e.g. 1000 for $10"""
  increment: Int!

  """
  Current amount in cents to initialize the quantity selector
  When not redeemed, 0
  when we amount is already redeemed, it's the amount used
  """
  current: Int!

  """banner when selected amount exceed redeemable amount"""
  unRedeemableBanner: InsetBanner
}

"""
Type in details page to return product sections info - can be used in cart/checkout
"""
type CheckoutSectionHeader
  @join__type(graph: IRIS)
{
  """Section title"""
  title: String!

  """image"""
  imageUrl: String!
}

union CheckoutSegmentContent
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "CheckoutMarketFulfilmentAddress")
  @join__unionMember(graph: IRIS, member: "CheckoutCollectionMethod")
  @join__unionMember(graph: IRIS, member: "CheckoutFulfilmentWindows")
  @join__unionMember(graph: IRIS, member: "CheckoutFulfilmentWindowsEmptyState")
  @join__unionMember(graph: IRIS, member: "CheckoutFulfilmentWindowsSelectedState")
  @join__unionMember(graph: IRIS, member: "CheckoutDeliveryPreferenceToggle")
  @join__unionMember(graph: IRIS, member: "CheckoutDeliveryPreferenceText")
  @join__unionMember(graph: IRIS, member: "CheckoutPackagingMethod")
  @join__unionMember(graph: IRIS, member: "CheckoutPromotionCode")
  @join__unionMember(graph: IRIS, member: "CheckoutProductCampaigns")
  @join__unionMember(graph: IRIS, member: "CheckoutProducts")
  @join__unionMember(graph: IRIS, member: "CheckoutSectionHeader")
  @join__unionMember(graph: IRIS, member: "CheckoutCollectionAddressDelivery")
  @join__unionMember(graph: IRIS, member: "CheckoutMarketProducts")
  @join__unionMember(graph: IRIS, member: "CheckoutCollectionAddressEmpty")
  @join__unionMember(graph: IRIS, member: "CheckoutSummaryBillingAddress")
  @join__unionMember(graph: IRIS, member: "CheckoutSummaryBillingAddressEmpty")
  @join__unionMember(graph: IRIS, member: "CheckoutRewardsAndDiscounts")
  @join__unionMember(graph: IRIS, member: "CheckoutSummaryRewards")
  @join__unionMember(graph: IRIS, member: "CheckoutSummaryRewardsUnregistered")
  @join__unionMember(graph: IRIS, member: "CheckoutOrderAddresses")
  @join__unionMember(graph: IRIS, member: "CheckoutOrderSummary")
  @join__unionMember(graph: IRIS, member: "CheckoutTermsConditions")
  @join__unionMember(graph: IRIS, member: "ImageTextBanner")
 = InsetBanner | CheckoutMarketFulfilmentAddress | CheckoutCollectionMethod | CheckoutFulfilmentWindows | CheckoutFulfilmentWindowsEmptyState | CheckoutFulfilmentWindowsSelectedState | CheckoutDeliveryPreferenceToggle | CheckoutDeliveryPreferenceText | CheckoutPackagingMethod | CheckoutPromotionCode | CheckoutProductCampaigns | CheckoutProducts | CheckoutSectionHeader | CheckoutCollectionAddressDelivery | CheckoutMarketProducts | CheckoutCollectionAddressEmpty | CheckoutSummaryBillingAddress | CheckoutSummaryBillingAddressEmpty | CheckoutRewardsAndDiscounts | CheckoutSummaryRewards | CheckoutSummaryRewardsUnregistered | CheckoutOrderAddresses | CheckoutOrderSummary | CheckoutTermsConditions | ImageTextBanner

union CheckoutSegmentError
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AlertMessage")
  @join__unionMember(graph: IRIS, member: "SnackBar")
 = AlertMessage | SnackBar

union CheckoutSegmentMessage
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "SnackBar")
 = SnackBar

type CheckoutSegmentProgress
  @join__type(graph: IRIS)
{
  index: String!
  title: String!

  """progress identifier"""
  id: CheckoutProgressId!
}

type CheckoutSubstitution
  @join__type(graph: IRIS)
{
  title: String!
  info: CheckoutInfoDialog!

  """Selected option title"""
  selectedOptionTitle: String!
  options: [CheckoutSubstitutionOption]!
}

input CheckoutSubstitutionInput
  @join__type(graph: IRIS)
{
  """stock code"""
  productId: String!

  """Quantity"""
  quantity: Float!

  """InstructionText, required otherwise upstread reset the value"""
  text: String

  """text"""
  allowSubstitution: Boolean!
}

type CheckoutSubstitutionOption
  @join__type(graph: IRIS)
{
  title: String!
  id: String!
}

type CheckoutSubstitutionPreferences
  @join__type(graph: IRIS)
{
  title: String!
  body: String
  state: SubstitutionState!
  info: CheckoutInfoDialog!
}

type CheckoutSummaryBillingAddress
  @join__type(graph: IRIS)
{
  title: String!
  addressText: String!
}

type CheckoutSummaryBillingAddressEmpty
  @join__type(graph: IRIS)
{
  title: String!
  displayName: String!
  buttonText: String!
}

"""Deprecating new type CheckoutRewards"""
type CheckoutSummaryRewards
  @join__type(graph: IRIS)
{
  title: String!
  rewardsSections: [CheckoutSummaryRewardsSegment!]!
}

type CheckoutSummaryRewardsRegistered
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  imageUrl: String!
}

type CheckoutSummaryRewardsRegisteredRedeemable
  @join__type(graph: IRIS)
{
  redeemText: String!
  buttonTitle: String!
  isRedeemed: Boolean!
  redeemInfo: CheckoutInfoDialog
}

union CheckoutSummaryRewardsSegment
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutSummaryRewardsRegistered")
  @join__unionMember(graph: IRIS, member: "CheckoutSummaryRewardsRegisteredRedeemable")
 = CheckoutSummaryRewardsRegistered | CheckoutSummaryRewardsRegisteredRedeemable

"""Deprecating new type CheckoutRewards"""
type CheckoutSummaryRewardsUnregistered
  @join__type(graph: IRIS)
{
  buttonTitle: String!
}

enum CheckoutSummaryValueType
  @join__type(graph: IRIS)
{
  Total @join__enumValue(graph: IRIS)
  Plain @join__enumValue(graph: IRIS)
  Point @join__enumValue(graph: IRIS)
  Negative @join__enumValue(graph: IRIS)
  Bold @join__enumValue(graph: IRIS)
}

type CheckoutSurvey
  @join__type(graph: IRIS)
{
  """Survey ID - uniq per survey type"""
  surveyId: ID!

  """
  Response ID - must be sent to the mutation when sending back the response to BFF
  """
  responseId: ID!

  """Text to display after survey has completed"""
  commentText: String!

  """
  Text to display on get comment button. If null, we don't display the button.
  """
  commentPrompt: String

  """List of questions"""
  questions: [Question!]!
  vocSurvey: VocSurvey
}

"""Survey response input"""
input CheckoutSurveyResponse
  @join__type(graph: IRIS)
{
  """Question ID"""
  id: ID!

  """
  Answer for the current question
  
  NOTE: There are no "any" or union of basic types in graphql.
  For now, all answers are expected to be string
  """
  answer: String!

  """Comment for the current question"""
  comment: String
}

type CheckoutTermsConditions
  @join__type(graph: IRIS)
{
  markdownText: String!
}

type Chip
  @join__type(graph: IRIS)
{
  """Identifier used by BFF to associate chip to action"""
  id: ID!

  """Is the chip selected"""
  isSelected: Boolean!

  """
  Text to be displayed in chip,
    including Accessibility text, for example "See specials only"
  """
  text: TextWithAlt!

  """number of products matching filter chip"""
  count: Int

  """
  Identifier to be used if FE should persist the chip (null = not persisted)
  """
  persistentId: String
}

input ChipsProductListInputArgs
  @join__type(graph: IRIS)
{
  """List of selected Chips (id field) (isSelected: true in Chip type)"""
  selected: [String!]!

  """Chips which user action triggered to select (list if ids)"""
  toggleOn: [String!]!

  """Chips which user action triggered to unselect (list if ids)"""
  toggleOff: [String!]!
}

type ClearFulfilmentWindowStateResultSuccess
  @join__type(graph: IRIS)
{
  _: Boolean
}

enum CollectionModeId
  @join__type(graph: IRIS)
{
  Delivery @join__enumValue(graph: IRIS)
  Pickup @join__enumValue(graph: IRIS)
  DeliveryNow @join__enumValue(graph: IRIS)
}

type CompactOrder implements Order
  @join__implements(graph: IRIS, interface: "Order")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  status: OrderStatus
  id: ID!
  total: String!
  date: String!
  iconUrl: String!
  timeLabel: String!
  timeValue: String!
}

"""Represents a company in the system."""
type Company
  @join__type(graph: CPS, key: "id")
{
  id: ID!
  name: String
  industry: String

  """List of users belonging to this company."""
  users: [User]
}

type CompatibleColor
  @join__type(graph: IRIS)
{
  lightHexCode: String!
}

input CompleteIdVerificationInput
  @join__type(graph: IRIS)
{
  applicationToken: String!
}

input ConfigInput
  @join__type(graph: IRIS)
{
  appVersion: String!
  platform: AppOS!
  osVersion: String!
}

type ContactItem
  @join__type(graph: IRIS)
{
  day: String!
  time: String!
}

"""
An actionable item in HorizontalList with 3:2 Image, title, and description
"""
type ContentCard implements ContentCardBase
  @join__implements(graph: IRIS, interface: "ContentCardBase")
  @join__type(graph: IRIS)
{
  """Content card Id for AEM driven components"""
  contentCardId: String

  """
  The URL of the 3:2 image displayed in the card. Must be a valid URL and is non-nullable.
  """
  contentCardImageUrl: String!

  """If provided, this title will be displayed below the image."""
  contentCardTitle: String

  """If provided, this description will be displayed below the title."""
  contentCardDescription: String

  """
  If sponsored card, return the "Sponsored" text to show under the description
  """
  contentCardSponsoredText: String

  """
  If provided, the whole card will perform the attached action when tapped
  """
  contentCardAction: Action

  """If provided, the content card footer will be displayed"""
  contentCardFooter: ContentCardFooter

  """If provided, the badge image with alt text will be displayed"""
  contentCardBrandImage: ImageWithAlt

  """If provided, the content card has a video in it"""
  contentCardIsVideoAvailable: Boolean

  """
  If provided, it indicates the content card size: largeSquare -> large, square & landscape -> small
  """
  contentCardSize: ContentCardSize

  """
  Base Analytics fields which will be used by HorizontalList.
  * extraContent (key & value) - Used to send offer details to Tealium
  """
  contentCardAnalytics: Analytics
}

"""An actionable content card with 3:2 Image, title, and description"""
interface ContentCardBase
  @join__type(graph: IRIS)
{
  """Content card Id for AEM driven components"""
  contentCardId: String

  """
  The URL of the 3:2 image displayed in the card. Must be a valid URL and is non-nullable.
  """
  contentCardImageUrl: String!

  """If provided, this title will be displayed below the image."""
  contentCardTitle: String

  """If provided, this description will be displayed below the title."""
  contentCardDescription: String

  """
  If provided, the whole card will perform the attached action when tapped
  """
  contentCardAction: Action

  """If provided, the content card has a video in it"""
  contentCardIsVideoAvailable: Boolean

  """
  If provided, it indicates the content card size: largeSquare -> large, square & landscape -> small
  """
  contentCardSize: ContentCardSize
}

"""An footer section with text and logo"""
type ContentCardFooter
  @join__type(graph: IRIS)
{
  """If provided, it indicates the footer style"""
  style: FooterStyle!

  """If provided, the text will be displayed"""
  text: String

  """If provided, the logo with alt text will be displayed"""
  logo: ImageWithAlt
}

"""content card size"""
enum ContentCardSize
  @join__type(graph: IRIS)
{
  SMALL @join__enumValue(graph: IRIS)
  LARGE @join__enumValue(graph: IRIS)
}

type ContentCta
  @join__type(graph: IRIS)
{
  label: String!
  url: String
  onCtaClickAnalytics: Analytics
}

type ContentList
  @join__type(graph: IRIS)
{
  contentListTitle: String
  contentListItems: [ContentListItem!]!
}

type ContentListItem
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String!
  imageAltText: String
  subtitle: String
  cta: DynamicPageAction
}

input ContentPageExtraInput
  @join__type(graph: IRIS)
{
  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  Represents the store id. *e.g. "1550"*.
  Required if mode is INSTORE
  """
  storeId: String

  """
  List of app action that the client supports. This ensures
  that app actions coming out of this response works for the client
  ie. ["openbottomsheet"]
  """
  supportedActions: [String!]!

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]!

  """
  Used to determine where paginated response should begin.
  FE should send pageNumber as null when requesting the first page, bff will default it to 1
  """
  pageNumber: Int
}

"""Represents the content playbook page"""
type ContentPlaybookPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  header: ContentPlaybookPageHeader

  """
  Inherited from GenericPage.
  Represents the scrollable section of the page
  """
  items: [GenericPageFeedItem]!

  """
  Inherited from GenericPage.
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type ContentPlaybookPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents text to display on top bar
  """
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  implement from generic type, represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

enum ContextType
  @join__type(graph: IRIS)
{
  """represents the search nav card context for recipes"""
  RECIPES @join__enumValue(graph: IRIS)
}

enum CoreAlertStyle
  @join__type(graph: IRIS)
{
  INFO @join__enumValue(graph: IRIS)
  WARNING @join__enumValue(graph: IRIS)
  ERROR @join__enumValue(graph: IRIS)
  SUCCESS @join__enumValue(graph: IRIS)
}

"""Enumeration of broadcast banner styles for various themes."""
enum CoreBroadcastBannerStyle
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """A standard style, typically used as a default."""
  STANDARD @join__enumValue(graph: CPS) @join__enumValue(graph: IRIS)

  """A style that contrasts with the background for better visibility."""
  ON_CONTRAST @join__enumValue(graph: CPS) @join__enumValue(graph: IRIS)

  """A style specific to Woolworths branding."""
  WOOLWORTHS @join__enumValue(graph: CPS) @join__enumValue(graph: IRIS)

  """A style specific to Everyday branding."""
  EVERYDAY @join__enumValue(graph: CPS) @join__enumValue(graph: IRIS)

  """A style specific to Big W branding."""
  BIG_W @join__enumValue(graph: CPS) @join__enumValue(graph: IRIS)
}

"""Core Broadcast Banner UI Component"""
type CoreBroadcastBannerUI
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """The main title text displayed on the banner (required)."""
  title: String!

  """An optional subtitle text that appears below the title."""
  subtitle: String

  """Specifies the style of the banner"""
  style: CoreBroadcastBannerStyle!

  """Icon asset associated with the banner"""
  icon: IconAsset!
}

type CoreButton
  @join__type(graph: IRIS)
{
  """represents button variant"""
  coreButtonStyle: CoreButtonStyle!

  """
  represents button label. Free text to act as body/title text for button.
  """
  coreButtonLabel: String!

  """represents button leading icon"""
  coreButtonLeadingIcon: CoreIcon

  """represents button trailing icon"""
  coreButtonTrailingIcon: CoreIcon

  """
  represents button action, Options: login , olive-chat , side-cart , null
  """
  coreButtonAction: Action!

  """indicates whether button is enabled, default is true"""
  coreButtonEnabled: Boolean!
}

enum CoreButtonStyle
  @join__type(graph: IRIS)
{
  PRIMARY @join__enumValue(graph: IRIS)
  SECONDARY @join__enumValue(graph: IRIS)
  TERTIARY @join__enumValue(graph: IRIS)
  DESTRUCTIVE @join__enumValue(graph: IRIS)
}

type CoreColorTheme
  @join__type(graph: IRIS)
{
  background: CompatibleColor!
  foreground: CoreForegroundColors!
}

type CoreForegroundColors
  @join__type(graph: IRIS)
{
  primary: CompatibleColor!
  secondary: CompatibleColor!
  highlight: CompatibleColor!
}

"""Icon hosted in app code as part of Core Icon set"""
type CoreIcon
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """Icon name per Core Design System"""
  coreIconName: String!
}

type CoreInsetAlertUI
  @join__type(graph: IRIS)
{
  title: String
  description: String
  style: CoreAlertStyle!
}

"""Core DS Radio Row Component (UI Only)"""
type CoreRadioRowUI
  @join__type(graph: IRIS)
{
  """Optional description under the `label`"""
  description: String

  """Mandatory label"""
  label: String!

  """Current selected state. One and only one should always be selected"""
  isSelected: Boolean!
}

"""Core DS Row Component (UI Only)"""
type CoreRowUI
  @join__type(graph: IRIS)
{
  """Icon to be displayed in front of label"""
  leadingAsset: IconAsset

  """Optional description under the `label`"""
  description: String

  """Mandatory label"""
  label: String!

  """Optional text to display over the `label`"""
  overlineText: String

  """
  Optional icon to be displayed at the end (towards right side) of `label`
  """
  trailingAsset: IconAsset

  """
  Optional text to be displayed at the end (towards right side) of `label`
  """
  trailingText: String
}

type CoreTagUI
  @join__type(graph: IRIS)
{
  """Mandatory text (e.g. "SAVE $2.00")"""
  label: String!

  """Theme to use for the Core Tag"""
  coreColorTheme: CoreColorTheme!

  """Border is primary foreground colour"""
  hasBorder: Boolean!
}

type CouponBanner
  @join__type(graph: IRIS)
{
  couponBannerColorTheme: CouponBannerColorTheme!
  couponBannerDescription: String!
  couponBannerCouponCode: String!
  couponBannerMinimumSpend: String!
  couponBannerImage: String
  couponBannerCouponCodeAccessibilityLabel: String
  couponBannerDescriptionAccessibilityLabel: String
  couponBannerTermsAndConditions: CouponBannerTermsAndConditions!
}

enum CouponBannerColorTheme
  @join__type(graph: IRIS)
{
  DEFAULT @join__enumValue(graph: IRIS)
  DEFAULT_BG_WHITE @join__enumValue(graph: IRIS)
  CUSTOM @join__enumValue(graph: IRIS)
}

type CouponBannerTermsAndConditions
  @join__type(graph: IRIS)
{
  title: String!
  url: String!
  accessibilityLabel: String
}

input CreateFreeTextItemInput
  @join__type(graph: IRIS)
{
  text: String!
  checked: Boolean!

  """
  Frontend locally stored Id, used for identify newly created free text items
  """
  referenceId: ID
}

input CreateListInput
  @join__type(graph: IRIS)
{
  title: String!
  color: String!
  productItems: [CreateProductItemInput!]!
  freeTextItems: [CreateFreeTextItemInput!]!

  """Local reference id when create a new list"""
  referenceId: ID!
}

"""Response for create list response"""
type CreateListResponse
  @join__type(graph: IRIS)
{
  """id of the list in remote db"""
  id: ID!

  """title of the list"""
  title: String!

  """color of the list"""
  color: String!

  """timestamp when list has been updated"""
  timestamp: Float!

  """
  local reference Id which is used to identify which list it belongs to from server response
  """
  referenceId: ID!
  isWatching: Boolean
}

input CreateProductItemInput
  @join__type(graph: IRIS)
{
  productId: ID!
  quantity: Float!
  checked: Boolean!
}

"""
Set of variables to be passed to every call to Adobe Target Delivery API
"""
input CroVariables
  @join__type(graph: IRIS)
{
  """Adobe SDK id"""
  adobeEcid: String!

  """Store Id for pickup"""
  pickupStoreId: String

  """User's last known delivery address' Postcode"""
  deliveryAddressPostcode: String
}

type CurrentDeliveryOrderOverview implements OrderOverviewSection & CurrentOrderOverview
  @join__implements(graph: IRIS, interface: "OrderOverviewSection")
  @join__implements(graph: IRIS, interface: "CurrentOrderOverview")
  @join__type(graph: IRIS)
{
  """InsetBanners: (e.g. restricted items banner)"""
  insetBanners: [InsetBanner!]!

  """Analytic Labels for banner shown"""
  bannerAnalyticLabels: [String!]!

  """ChangeOrderButton : used to the change the order"""
  changeOrderButton: Button

  """cancelOrderButton : used to the cancel the order"""
  cancelOrderButton: Button

  """Stepper components to indicate progress of an order"""
  progressStepper: ProgressStepper

  """
  InstructionsMd to users in markdown syntax
  (e.g., You can make changes to your order until 5:45pm, Friday 13 August)
  """
  instructionsMd: String

  """
  helpMd to users in markdown syntax
  (e.g., Going to be late? Don't worry your order will be temperature controlled until you arrive.)
  """
  helpMd: String

  """Title: Estimated arrival"""
  orderTitle: String

  """Delivery ETA: Tomorrow, 31 Nov, 2:00pm - 5:00pm"""
  orderSubtitle: String

  """subtitle icon (optional): e.g. warning delay"""
  orderSubtitleIcon: OrderSubtitleIcon

  """Info modal tooltip"""
  tooltip: StepsTooltip

  """Live tracking map url to embed in FE"""
  liveTrackingMapUrl: String
}

interface CurrentOrderOverview
  @join__type(graph: IRIS)
{
  changeOrderButton: Button
  cancelOrderButton: Button
  progressStepper: ProgressStepper
  instructionsMd: String
  helpMd: String
  orderTitle: String
  orderSubtitle: String
  tooltip: StepsTooltip
}

type CurrentPickupLocationTrackingStatus
  @join__type(graph: IRIS)
{
  """Title"""
  title: String!

  """Description"""
  description: String!

  """Image"""
  image: LocationTrackingStatusImage!
}

type CurrentPickupOrderFulfilmentDetails implements OrderFulfilmentSection
  @join__implements(graph: IRIS, interface: "OrderFulfilmentSection")
  @join__type(graph: IRIS)
{
  _: Boolean
  storeDetails: OrderStoreDetails!
  collectionDetails: OrderCollectionDetails!
}

type CurrentPickupOrderOverview implements OrderOverviewSection & CurrentOrderOverview
  @join__implements(graph: IRIS, interface: "OrderOverviewSection")
  @join__implements(graph: IRIS, interface: "CurrentOrderOverview")
  @join__type(graph: IRIS)
{
  """ChangeOrderButton : used to the change the order"""
  changeOrderButton: Button

  """cancelOrderButton : used to the cancel the order"""
  cancelOrderButton: Button

  """Stepper components to indicate progress of an order"""
  progressStepper: ProgressStepper

  """
  Stepper component to indicate collected state of an order and it will have the same values always
  This field will be used to transition from order ready for collection to intermediate collected state
  """
  progressStepperForCollectedState: ProgressStepper

  """
  InstructionsMd to users in markdown syntax
  (e.g., You can make changes to your order until 5:45pm, Friday 13 August)
  """
  instructionsMd: String

  """
  helpMd to users in markdown syntax
  (e.g., Going to be late? Don't worry your order will be temperature controlled until you arrive.)
  """
  helpMd: String

  """Title (e.g., Collect today, Collect Monday, Collect tomorrow etc.)"""
  orderTitle: String

  """Subtitle (e.g., Window Time 3:00pm - 4:00pm)"""
  orderSubtitle: String

  """subtitle icon (optional): e.g. warning delay"""
  orderSubtitleIcon: OrderSubtitleIcon

  """checkIn15minsButton : CTA used for I'm 15 mins away button"""
  checkIn15minsButton: Button

  """checkInOnMyWayButton : CTA used for I'm on my way button"""
  checkInOnMyWayButton: Button

  """checkInNowButton : CTA used for I'm here button"""
  checkInNowButton: Button

  """
  collectionBanner : (e.g., Unfortunately you can no longer make changes to this order)
  """
  collectionBanner: InsetBanner @deprecated(reason: "It is not used by Mobile App FE")

  """
  collectionHelpMd : (e.g., Going to be late? Don't worry your order will be temperature controlled until you arrive.)
  """
  collectionHelpMd: String @deprecated(reason: "use helpMd instead")

  """bayNumberPreferences : (Bay Number preferences, CTAs etc)"""
  bayNumberPreferences: BayNumberPreferences

  """onMyWayPreferences : (On my way ETA preferences, CTAs etc)"""
  onMyWayPreferences: OnMyWayPreferences

  """Info modal tooltip"""
  tooltip: StepsTooltip

  """Location Tracking enabled for DTB and when store is open"""
  locationTrackingEnabled: Boolean!

  """Location Tracking Priming Page for pickup orders"""
  locationTrackingPrimingPage: LocationTrackingPrimingPage

  """Banner to show information to customers"""
  banner: BroadcastBanner

  """Banner to show the team member details for the handover"""
  handoverBanner: BroadcastBanner
}

union CustomMessageFeed
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PopupMessage")
  @join__unionMember(graph: IRIS, member: "EmptyScreenMessage")
  @join__unionMember(graph: IRIS, member: "FullScreenMessage")
 = PopupMessage | EmptyScreenMessage | FullScreenMessage

input DeepLinkInput
  @join__type(graph: IRIS)
{
  """
  For example a URL (e.g. https://www.woolworths.com.au/shop/browse/bakery)
  """
  id: String!

  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  Represents the store id. *e.g. "1550"*.
  Required if mode is INSTORE
  """
  storeId: String

  """
  List of deepLink sections that the client supports. This ensures
  that deepLink coming out of this response works for the client
  """
  supportedLinks: [String!]!
}

"""Terms and conditions for deleting account"""
type DeleteAccountMutationResponse
  @join__type(graph: IRIS)
{
  """returns the deletion is successful or not (e.g., true or false)"""
  success: Boolean!
}

"""Terms and conditions for deleting account"""
type DeleteAccountTnCResponse
  @join__type(graph: IRIS)
{
  """Title e.g. Some important things you need to know"""
  title: String!

  """Describe the process around account deletion"""
  termsAndConditions: String!

  """Terms and conditions accept text"""
  termsAndConditionsAgreeText: String!

  """Delete button"""
  deleteButton: Button!
}

"""Contains ids of lists which need to be deleted"""
input DeleteListInput
  @join__type(graph: IRIS)
{
  id: ID!
  timestamp: Float!
}

type DeliveryDriverDetails
  @join__type(graph: IRIS)
{
  driverName: String!
  deliveryPartner: String!
  iconUrl: String
  insetBanner: InsetBanner
  liveTrackingButton: Button
  deliveryTooltip: DeliveryMethodsTooltip
}

type DeliveryInstructions
  @join__type(graph: IRIS)
{
  leaveUnattended: Boolean!
  leaveUnattendedTitle: String!
  leaveUnattendedMessage: String!
  canToggleLeaveUnattended: Boolean!
  driverInstructionsTitle: String!
  driverInstructions: String!
  canEditInstructions: Boolean!
  hideLeaveUnattended: Boolean!
}

type DeliveryMethodBulletInfo
  @join__type(graph: IRIS)
{
  text: String!
}

type DeliveryMethodsTooltip
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  deliveryMethodsTabs: [TooltipDeliveryMethodInfo!]!
}

"""Mutation reponse with optional mutated DeliveryNow window payload"""
type DeliveryNowModeMutationResponse
  @join__type(graph: IRIS)
{
  isSuccess: Boolean!
}

enum DeliveryNowState
  @join__type(graph: IRIS)
{
  AVAILABLE @join__enumValue(graph: IRIS)
  DISABLED @join__enumValue(graph: IRIS)
  SELECTED @join__enumValue(graph: IRIS)
}

"""
DeliveryNow-specific statuses

Should not be really used as each is simply combining one or more `DeliveryWindowStatus`
"""
enum DeliveryNowStatus
  @join__type(graph: IRIS)
{
  Open @join__enumValue(graph: IRIS)
  Closed @join__enumValue(graph: IRIS)
  Exhausted @join__enumValue(graph: IRIS)
  Error @join__enumValue(graph: IRIS)
  Ineligible @join__enumValue(graph: IRIS)
}

"""
Constant value for the moment, but we want to use Site Management value at some point
"""
enum DeliveryNowTitle
  @join__type(graph: IRIS)
{
  Delivery @join__enumValue(graph: IRIS)
  Now @join__enumValue(graph: IRIS)
}

"""Allows to toggle DeliveryNow window ON and OFF"""
type DeliveryNowWindow
  @join__type(graph: IRIS)
{
  id: Int
  status: DeliveryWindowStatus!
  deliveryNowStatus: DeliveryNowStatus!
  isEligible: Boolean!
  isAvailable: Boolean!
  isSelected: Boolean!
  deliveryFee: Float
  eta: String
  etaInMinutes: Int
  title: DeliveryNowTitle!
  subtitle: String
}

type DeliveryOrder implements Order
  @join__implements(graph: IRIS, interface: "Order")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  status: OrderStatus
  id: ID!
  total: String!
  timeLabel: String!
  timeValue: String!
  date: String!
  location: String!
  windowTime: String
  windowDate: String
}

type DeliveryOrderFulfilmentDetails implements OrderFulfilmentSection
  @join__implements(graph: IRIS, interface: "OrderFulfilmentSection")
  @join__type(graph: IRIS)
{
  _: Boolean
  deliveryInstructions: DeliveryInstructions
  fulfilmentItems: [OrderDetailsItem!]!
  title: String!
}

type DeliveryUnlimitedIconItem
  @join__type(graph: IRIS)
{
  iconUrl: String!
  label: String!
}

type DeliveryUnlimitedPayment
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  description: String
  iconItem: DeliveryUnlimitedIconItem
  footer: DeliveryUnlimitedSubscribeFooter!
  terms: DeliveryUnlimitedSubscribeTerms!
  paymentMethodSection: PaymentMethodSection!
  analytics: [Analytics!]!
}

input DeliveryUnlimitedPaymentInput
  @join__type(graph: IRIS)
{
  planId: ID!
  selectedId: ID
}

type DeliveryUnlimitedSubscribe
  @join__type(graph: IRIS)
{
  summary: DeliveryUnlimitedSubscribeSummary!
  plans: DeliveryUnlimitedSubscribePlans!
  isUserWPayMigrated: Boolean!
}

type DeliveryUnlimitedSubscribeConfirmation
  @join__type(graph: IRIS)
{
  feed: [DeliveryUnlimitedSubscribeConfirmationFeedItem!]!
  analytics: DeliveryUnlimitedSubscribeConfirmationAnalytics!
}

type DeliveryUnlimitedSubscribeConfirmationAnalytics
  @join__type(graph: IRIS)
{
  subscriptionType: String!
}

union DeliveryUnlimitedSubscribeConfirmationFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "DeliveryUnlimitedSubscribeConfirmationLineItem")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
 = DeliveryUnlimitedSubscribeConfirmationLineItem | InsetBanner

type DeliveryUnlimitedSubscribeConfirmationLineItem
  @join__type(graph: IRIS)
{
  title: String
  label: String!
  iconUrl: String
}

type DeliveryUnlimitedSubscribeDisclaimer
  @join__type(graph: IRIS)
{
  title: String!
  content: String!
  links: [DeliveryUnlimitedSubscribeLink!]!
}

type DeliveryUnlimitedSubscribeFeature
  @join__type(graph: IRIS)
{
  title: String!
  iconUrl: String!
  description: String!
  link: DeliveryUnlimitedSubscribeFeatureLink
}

type DeliveryUnlimitedSubscribeFeatureLink
  @join__type(graph: IRIS)
{
  text: String!
  url: String!
}

type DeliveryUnlimitedSubscribeFooter
  @join__type(graph: IRIS)
{
  button: Button!
  disclaimer: String!
}

type DeliveryUnlimitedSubscribeLink
  @join__type(graph: IRIS)
{
  text: String!
  url: String!
}

type DeliveryUnlimitedSubscribePayment
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  priceDescription: String!
  priceLabel: String!
  price: Int!
  description: String
  iconItem: DeliveryUnlimitedIconItem
  footer: DeliveryUnlimitedSubscribeFooter!
  terms: DeliveryUnlimitedSubscribeTerms!
}

type DeliveryUnlimitedSubscribePlan
  @join__type(graph: IRIS)
{
  identifier: ID!
  planTitle: String!
  subtitle: String!
  price: Int!
  badge: Badge
}

type DeliveryUnlimitedSubscribePlans
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  planTypes: [DeliveryUnlimitedSubscribePlanType!]!
  footer: DeliveryUnlimitedSubscribeFooter!
}

type DeliveryUnlimitedSubscribePlanType
  @join__type(graph: IRIS)
{
  title: String!
  defaultPlanSelection: ID
  feed: [DeliveryUnlimitedSubscribePlanTypeFeedItem!]!
}

union DeliveryUnlimitedSubscribePlanTypeFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "DeliveryUnlimitedSubscribeFeature")
  @join__unionMember(graph: IRIS, member: "DeliveryUnlimitedSubscribePlan")
  @join__unionMember(graph: IRIS, member: "Spacer")
 = InsetBanner | DeliveryUnlimitedSubscribeFeature | DeliveryUnlimitedSubscribePlan | Spacer

input DeliveryUnlimitedSubscribeSubmissionInput
  @join__type(graph: IRIS)
{
  planId: ID!
  instruments: [DeliveryUnlimitedSubscribeSubmissionInstrumentInput!]!
}

input DeliveryUnlimitedSubscribeSubmissionInstrumentInput
  @join__type(graph: IRIS)
{
  amount: Int
  instrumentId: ID!
  instrumentStepUpToken: String
}

type DeliveryUnlimitedSubscribeSubmissionResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  message: String
}

type DeliveryUnlimitedSubscribeSummary
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String
  bannerAsset: DownloadableAsset
  badge: Badge
  features: [DeliveryUnlimitedSubscribeFeature!]!
  disclaimer: DeliveryUnlimitedSubscribeDisclaimer
  termsMarkdown: DeliveryUnlimitedSubscribeTermsMarkdown
  footer: DeliveryUnlimitedSubscribeFooter!
}

type DeliveryUnlimitedSubscribeTerms
  @join__type(graph: IRIS)
{
  title: String!
  terms: [DeliveryUnlimitedSubscribeTermsItem!]!
  errorMessage: String!
  button: Button!
  impressionAnalytics: Analytics
}

type DeliveryUnlimitedSubscribeTermsItem
  @join__type(graph: IRIS)
{
  title: String!
  links: [DeliveryUnlimitedSubscribeLink!]!
}

type DeliveryUnlimitedSubscribeTermsMarkdown
  @join__type(graph: IRIS)
{
  title: String!
  content: String!
}

"""Generic Delivery window statuses"""
enum DeliveryWindowStatus
  @join__type(graph: IRIS)
{
  Closed @join__enumValue(graph: IRIS)
  NotStarted @join__enumValue(graph: IRIS)
  Available @join__enumValue(graph: IRIS)
  ClosingSoon @join__enumValue(graph: IRIS)
  Full @join__enumValue(graph: IRIS)
  Exhausted @join__enumValue(graph: IRIS)
  Error @join__enumValue(graph: IRIS)
  Ineligible @join__enumValue(graph: IRIS)
}

input DeviceInfo
  @join__type(graph: IRIS)
{
  """
  Device model
  e.g. iphone 12
  """
  deviceModel: String

  """
  Device vendor
  e.g. Apple
  """
  deviceVendor: String

  """
  Device operating system
  e.g. IOS 14
  """
  operatingSystem: String

  """
  Screen resolution in PX
  e.g. 1792x828
  """
  screenResolution: String

  """Screen resolution in CM"""
  screenResolutionInCm: String

  """Usable screen resolution in PX"""
  usableScreenResolution: String

  """Usable screen resolution in CM"""
  usableScreenResolutionInCm: String

  """Phone Network retailer"""
  phoneNetworkRetailer: String

  """Mobile Signal Strength"""
  mobileSignalStrength: String

  """Available storage space"""
  storageSpaceAvailable: String

  """
  App version
  e.g. 21.14
  """
  appVersion: String

  """
  Location data (lat, long)
  e.g. 100.00, 200.00
  """
  locationData: String
}

type DietaryDisclaimer
  @join__type(graph: IRIS)
{
  insetBanner: InsetBanner!
  dietaryInfo: DietaryInfo
}

type DietaryInfo
  @join__type(graph: IRIS)
{
  title: String
  content: String
}

"""DirectToBootNow statuses"""
enum DirectToBootNowStatus
  @join__type(graph: IRIS)
{
  Open @join__enumValue(graph: IRIS)
  Closed @join__enumValue(graph: IRIS)
  Exhausted @join__enumValue(graph: IRIS)
  Error @join__enumValue(graph: IRIS)
  Ineligible @join__enumValue(graph: IRIS)
}

type DismissBottomSheetResultSuccess
  @join__type(graph: IRIS)
{
  _: Boolean
}

"""Instructs the UI to insert a horizontal or vertical divider"""
type DividerCard
  @join__type(graph: IRIS)
{
  _: Boolean
}

type DownloadableAsset
  @join__type(graph: IRIS)
{
  """Asset Id for AEM driven component"""
  assetId: String

  """Type of the asset, image"""
  assetType: DownloadableAssetType!

  """
  FQDN URL of the asset. Example https://test.mobile-api.woolworths.com.au/zeus/mnemosyne/v1/public/content/onboarding/test.png
  """
  assetUrl: String!

  """Width of the asset"""
  assetWidth: Int!

  """Height of the asset"""
  assetHeight: Int!

  """
  How the image should be scaled. The default should be ASPECT_FILL if fit is NULL.
  """
  fit: DownloadableAssetFit

  """for accessibility"""
  altText: String
}

enum DownloadableAssetFit
  @join__type(graph: IRIS)
{
  ASPECT_FILL @join__enumValue(graph: IRIS)
  CENTER @join__enumValue(graph: IRIS)
}

enum DownloadableAssetType
  @join__type(graph: IRIS)
{
  LOTTIE_ANIMATION @join__enumValue(graph: IRIS)
  IMAGE @join__enumValue(graph: IRIS)
  NOT_SET @join__enumValue(graph: IRIS)
}

type DriverRating
  @join__type(graph: IRIS)
{
  """Survey ID - unique per survey type"""
  surveyId: ID!
  starsRatingStep: DriverRatingStarsSurvey
  feedbackAndCommentsStep: DriverRatingFeedbackAndComments
  thankYouStep: DriverRatingThankYou
  orderNumber: String!
}

type DriverRatingFeedbackAndComments
  @join__type(graph: IRIS)
{
  title: String!
  subTitle: String!
  feedbackChipsQuestion: String!
  feedbackChips: [Chip!]!
  additionalCommentText: String!
  doneButton: CoreButton!
}

type DriverRatingStarsSurvey
  @join__type(graph: IRIS)
{
  title: String!
  subTitle: String!
  starsRatingQuestion: String!
  insetAlert: CoreInsetAlertUI!
  submitButton: CoreButton!
}

type DriverRatingThankYou
  @join__type(graph: IRIS)
{
  title: String!
  subTitle: String!
  imageUrl: String!
  badFeedbackMessage: String!
  badFeedbackQuestion: String!
  badFeedbackButton: CoreButton!
  neutralFeedbackMessage: String!
  goodFeedbackMessage: String!
}

type DualImageBanner
  @join__type(graph: IRIS)
{
  target: BannerTarget!
  altText: String!
  leftImageUrl: String!
  rightImageUrl: String!
}

type DynamicPage
  @join__type(graph: IRIS)
{
  headerSection: DynamicPageHeaderSection!
  feedItems: [DynamicPageFeedItem]!
  footerSection: DynamicPageFooterSection
  bottomSheets: [DynamicPageBottomSheetTypes]
  analytics: Analytics!
}

"""
Generic action type to be used for all components on this screen except for QuickLinks
"""
type DynamicPageAction
  @join__type(graph: IRIS)
{
  label: String!
  action: String!
  analytics: Analytics
}

type DynamicPageBottomSheet
  @join__type(graph: IRIS)
{
  id: String!
  bottomSheetFeedItems: [DynamicPageBottomSheetFeedItems]!
  analytics: Analytics
}

union DynamicPageBottomSheetFeedItems
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CampaignCopy")
  @join__unionMember(graph: IRIS, member: "CampaignTermsAndConditions")
  @join__unionMember(graph: IRIS, member: "ContentList")
  @join__unionMember(graph: IRIS, member: "CampaignCardList")
 = CampaignCopy | CampaignTermsAndConditions | ContentList | CampaignCardList

union DynamicPageBottomSheetTypes
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "DynamicPageBottomSheet")
 = DynamicPageBottomSheet

union DynamicPageFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CampaignCopy")
  @join__unionMember(graph: IRIS, member: "ContentList")
  @join__unionMember(graph: IRIS, member: "CampaignTermsAndConditions")
  @join__unionMember(graph: IRIS, member: "CampaignCardCarousel")
  @join__unionMember(graph: IRIS, member: "CampaignCardList")
  @join__unionMember(graph: IRIS, member: "QuickLinkList")
  @join__unionMember(graph: IRIS, member: "CategoryTileList")
 = CampaignCopy | ContentList | CampaignTermsAndConditions | CampaignCardCarousel | CampaignCardList | QuickLinkList | CategoryTileList

type DynamicPageFooterSection
  @join__type(graph: IRIS)
{
  action: DynamicPageAction!
}

"""
If there is no image URL provided, then we just use the title
directly in the top nav bar, with no fancy scroll behaviour (see option 1 below)
"""
type DynamicPageHeaderSection
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String
  imageAltText: String
  shareUrl: String
}

"""Input parameters of the Query.dynamicPage"""
input DynamicPageInput
  @join__type(graph: IRIS)
{
  """page ID - used to resolve the content from Adobe Target"""
  pageId: String!

  """
  supportedLinks - all clickable components are filters so that unsupported links arent returned
  """
  supportedLinks: [String!]!

  """supportedActions - for supported actions: ["openbottomsheet"]"""
  supportedActions: [String!]!
}

input EditListInput
  @join__type(graph: IRIS)
{
  title: String!
  color: String!
  timestamp: Float!
  lastSynced: Float!
}

type EditListResponse
  @join__type(graph: IRIS)
{
  id: ID!
  title: String!
  color: String!
  timestamp: Float!
  lastSynced: Float!
  isWatching: Boolean
}

type EditOrderBanner
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  buttonTitle: String!
  confirmation: EditOrderConfirmation!
}

type EditOrderButton
  @join__type(graph: IRIS)
{
  label: String!
  action: String
  style: ButtonStyle
  enabled: Boolean!
}

type EditOrderConfirmation
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
}

type EditOrderDetails
  @join__type(graph: IRIS)
{
  orderId: ID!
  banner: EditOrderBanner!
}

input EditOrderDriverInstructionsInput
  @join__type(graph: IRIS)
{
  orderId: ID!
  instructions: String!
}

enum EditOrderDriverInstructionsReason
  @join__type(graph: IRIS)
{
  WINDOW_CLOSED @join__enumValue(graph: IRIS)
}

type EditOrderDriverInstructionsResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  reason: EditOrderDriverInstructionsReason
  message: String
}

type EditOrderMessage
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
  buttonTitle: String!
}

enum EditOrderMode
  @join__type(graph: IRIS)
{
  EDITING @join__enumValue(graph: IRIS)
  NOT_EDITING @join__enumValue(graph: IRIS)
}

enum EditOrderReason
  @join__type(graph: IRIS)
{
  WINDOW_CLOSED @join__enumValue(graph: IRIS)
  NOT_FOUND @join__enumValue(graph: IRIS)
  IS_ALREADY_AMENDING @join__enumValue(graph: IRIS)
}

type EditOrderStatus
  @join__type(graph: IRIS)
{
  mode: EditOrderMode!
  details: EditOrderDetails
  message: EditOrderMessage
}

type EditOrderWarning
  @join__type(graph: IRIS)
{
  imageUrl: String!
  title: String!
  warningItems: [EditOrderWarningItem!]!
  acceptLabel: String!
  acceptButtonLabel: String!
  cancelButtonLabel: String!
  disclaimer: String!
}

type EditOrderWarningItem
  @join__type(graph: IRIS)
{
  text: String!
}

"""
represents editorial banner on generic page, pls refer to https://woolworthsdigital.atlassian.net/browse/LOL-5818
"""
type EditorialBanner
  @join__type(graph: IRIS)
{
  """Unique ID for the banner"""
  editorialBannerId: ID!

  """
  In hex (e.g. #123456), background colour to use
  Currently supported colours:
    White #FFFFFF
    Green #178841
    Dark Green #0D5127
    Zing #CAEB6D
    Charcoal #3A474E
    Light Green #E8F3EC
    Light Zing #F4FBE2
    Light Charcoal #F5F6F6
    Light Yellow #FFFBE5
    Light Red #FDE8E9
    Light Blue #EDF5FA
  """
  editorialBannerBackgroundColour: String!

  """
  represents the banner image, mapped from AEM bannerImageMobileCropUrl field
  """
  editorialBannerImage: ImageWithAlt

  """represents the banner title, mapped from AEM title"""
  editorialBannerTitle: String

  """represents the banner description, mapped from AEM subTitle"""
  editorialBannerSubtitle: String

  """action when banner is tapped, mapped from AEM ctaUrl"""
  editorialBannerAction: Action

  """represents footer style, e.g. BYLINE"""
  editorialBannerFooter: EditorialBannerFooter

  """represents banner image formate, default format: FULL_WIDTH"""
  editorialBannerImageFormat: BannerImageFormat!

  """Dynamic Analytics fields to be used for all component events"""
  editorialBannerAnalytics: Analytics

  """
  Analytics fields to be used for impression events:
  * tealiumEvent - banner_impression or acs_content_impression
  * eventAction - click
  """
  editorialBannerImpressionAnalytics: Analytics
}

type EditorialBannerFooter
  @join__type(graph: IRIS)
{
  style: FooterStyle!

  """represents the footer text, mapped from AEM bylineText field"""
  text: String

  """represents the footer logo, mapped from AEM icon field"""
  logo: ImageWithAlt
}

type EditorialCarousel
  @join__type(graph: IRIS)
{
  editorialCarouselItems: [EditorialCarouselItem!]!
}

union EditorialCarouselItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "EditorialBanner")
 = EditorialBanner

"""Success boosted offer response"""
type EdrOffer
  @join__type(graph: IRIS)
{
  offerId: String!
  offerType: String
  linkedEdrHashCrn: String!
  offerBoostState: RtlBoostState
  offerStatus: RtlOfferStatus
  offerButtonAction: Action
  offerButtonLabel: TextWithAlt
}

type EdrOfferBanner
  @join__type(graph: IRIS)
{
  """If offerapi v1: coupons[0].id, v2: offerId"""
  offerId: String!
  offerType: String
  linkedEdrHashCrn: String!
  bannerTitle: String
  bannerDescription: String
  bannerIconUrl: String
  bannerButtonAction: Action
  bannerButtonLabel: TextWithAlt

  """Banner tap action to launch bottomSheet / screen"""
  bannerAction: Action
  bannerAnalytics: Analytics
  bannerImpressionAnalytics: Analytics
}

"""@deprecated(reason: No longer used. Replaced by FullScreenMessage)"""
type EmptyScreenMessage
  @join__type(graph: IRIS)
{
  messageTitle: String
  messageDescription: String
  messageCtaLabel: String
  messageCtaUrl: String
  messageImageUrl: String
}

"""Error in update of quantity for a single cart product"""
type ErrorUpdateCartProductQuantity
  @join__type(graph: IRIS)
{
  reason: UpdateCartProductQuantityFailedReason!
  message: String!
}

type ExpiredCreditCard
  @join__type(graph: IRIS)
{
  icon: String!
  title: String!
  subtitle: String
  id: String!
}

"""
A label and clickable text to reveal more information about the fulfilment (e.g. pickup or delivery) options
"""
type ExtraInfoButton
  @join__type(graph: IRIS)
{
  """eg: Learn more"""
  messageTitle: String!

  """eg: about our delivery options"""
  buttonTitle: String!
}

enum FeatureType
  @join__type(graph: IRIS)
{
  SERVES @join__enumValue(graph: IRIS)
  PREP @join__enumValue(graph: IRIS)
  COOK @join__enumValue(graph: IRIS)
}

type Feed
  @join__type(graph: IRIS)
{
  cursor: Int
  totalItems: Int
  items: [FeedItem!]!
}

"""
The following types are to be deprecated from FeedItem once OTC v2 is enabled.

Moved to OrderOverview:
* OrderTime
* EditOrderButton
* InsetBanner
* OrderDetailsStatus
* Button
* OrderDetailSummary

No longer needed:
* PickupInstructions
* OrderDetails
"""
union FeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "HorizontalList")
  @join__unionMember(graph: IRIS, member: "OrderDetails")
  @join__unionMember(graph: IRIS, member: "OrderTime")
  @join__unionMember(graph: IRIS, member: "EditOrderButton")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "OrderDetailsDivider")
  @join__unionMember(graph: IRIS, member: "OrderDetailsStatus")
  @join__unionMember(graph: IRIS, member: "DeliveryInstructions")
  @join__unionMember(graph: IRIS, member: "PickupInstructions")
  @join__unionMember(graph: IRIS, member: "Button")
  @join__unionMember(graph: IRIS, member: "OrderRewardsSummary")
  @join__unionMember(graph: IRIS, member: "OrderPaymentDetails")
  @join__unionMember(graph: IRIS, member: "RecipeSummaryCard")
  @join__unionMember(graph: IRIS, member: "FreshMagTile")
  @join__unionMember(graph: IRIS, member: "DualImageBanner")
  @join__unionMember(graph: IRIS, member: "Spacer")
  @join__unionMember(graph: IRIS, member: "OrderFulfilmentDetails")
  @join__unionMember(graph: IRIS, member: "OrderDetailSummary")
  @join__unionMember(graph: IRIS, member: "OrderStoreDetails")
  @join__unionMember(graph: IRIS, member: "OrderCollectionDetails")
  @join__unionMember(graph: IRIS, member: "OrderOverview")
  @join__unionMember(graph: IRIS, member: "CurrentPickupOrderOverview")
  @join__unionMember(graph: IRIS, member: "OrderNumberDetails")
  @join__unionMember(graph: IRIS, member: "CurrentDeliveryOrderOverview")
  @join__unionMember(graph: IRIS, member: "PastOrderOverview")
  @join__unionMember(graph: IRIS, member: "CurrentPickupOrderFulfilmentDetails")
  @join__unionMember(graph: IRIS, member: "DeliveryDriverDetails")
  @join__unionMember(graph: IRIS, member: "CurrentPickupLocationTrackingStatus")
  @join__unionMember(graph: IRIS, member: "OrderProofOfDeliveryDetails")
  @join__unionMember(graph: IRIS, member: "PastPickupOrderFulfilmentDetails")
  @join__unionMember(graph: IRIS, member: "DeliveryOrderFulfilmentDetails")
  @join__unionMember(graph: IRIS, member: "DriverRating")
 = HorizontalList | OrderDetails | OrderTime | EditOrderButton | InsetBanner | OrderDetailsDivider | OrderDetailsStatus | DeliveryInstructions | PickupInstructions | Button | OrderRewardsSummary | OrderPaymentDetails | RecipeSummaryCard | FreshMagTile | DualImageBanner | Spacer | OrderFulfilmentDetails | OrderDetailSummary | OrderStoreDetails | OrderCollectionDetails | OrderOverview | CurrentPickupOrderOverview | OrderNumberDetails | CurrentDeliveryOrderOverview | PastOrderOverview | CurrentPickupOrderFulfilmentDetails | DeliveryDriverDetails | CurrentPickupLocationTrackingStatus | OrderProofOfDeliveryDetails | PastPickupOrderFulfilmentDetails | DeliveryOrderFulfilmentDetails | DriverRating

type Filter
  @join__type(graph: IRIS)
{
  headerKey: String!
  headerTitle: String!
  isApplied: Boolean!
}

"""A list of filter menu items."""
type FilterMenuItem
  @join__type(graph: IRIS)
{
  """
  Represents the name of the filter which should be used as a key while applying the filter .
  """
  key: String!

  """Represents the filter name. *e.g. "Dairy, Eggs & Fridge"."""
  title: String!

  """
  Represents the display name of the filter which is including the products count. *e.g. "Dairy, Eggs & Fridge (30)".
  """
  label: String!

  """Represent whether the filter has applied or not."""
  isApplied: Boolean!

  """Represent the parentKey of the filter item."""
  parentKey: String

  """Represent whether the filter item has child filters or not."""
  hasChildren: Boolean!
}

enum FlowType
  @join__type(graph: IRIS)
{
  CHECKOUT @join__enumValue(graph: IRIS)
  DELIVERY_UNLIMITED @join__enumValue(graph: IRIS)
}

"""introduced a union type so we can add our type if we want"""
union FoodTrackerAction
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "FoodTrackerConsent")
 = FoodTrackerConsent

type FoodTrackerConsent
  @join__type(graph: IRIS)
{
  headerAsset: DownloadableAsset!
  consentTitle: String!
  consentMarkdownDescription: String!
  termsMarkdownText: String!
  primaryCtaLabel: String!
  secondaryCtaLabel: String!
}

type FoodTrackerConsentStatus
  @join__type(graph: IRIS)
{
  status: Boolean!
  message: String
}

type FoodTrackerContentFeed
  @join__type(graph: IRIS)
{
  navigationTitle: String!
  headerAsset: DownloadableAsset!
  content: [FoodTrackerContentItem!]!
  footer: FoodTrackerFooterCard!
}

union FoodTrackerContentItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "TextWithLink")
  @join__unionMember(graph: IRIS, member: "IconListItem")
  @join__unionMember(graph: IRIS, member: "ParagraphTextItem")
  @join__unionMember(graph: IRIS, member: "ListSectionHeader")
  @join__unionMember(graph: IRIS, member: "DownloadableAsset")
 = TextWithLink | IconListItem | ParagraphTextItem | ListSectionHeader | DownloadableAsset

type FoodTrackerFooterCard
  @join__type(graph: IRIS)
{
  icon: DownloadableAsset!
  title: String!
  consentAction: FoodTrackerAction
  actionType: FooterActionType!
  primaryCtaLabel: String!
}

union FoodTrackerPage
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "FoodTrackerContentFeed")
  @join__unionMember(graph: IRIS, member: "FoodTrackerWebView")
 = FoodTrackerContentFeed | FoodTrackerWebView

type FoodTrackerWebView
  @join__type(graph: IRIS)
{
  headerAsset: DownloadableAsset! @deprecated(reason: "no longer required since 24.4")
  url: String!
  navigationTitle: String!
}

type Footer
  @join__type(graph: IRIS)
{
  buttons: [Button]!
}

"""
ADD_EDR: proceed with add EDR flow (guest/WOW users)
OPEN_CONSENT: show consent form (users with linked EDR card)
"""
enum FooterActionType
  @join__type(graph: IRIS)
{
  ADD_EDR @join__enumValue(graph: IRIS)
  OPEN_CONSENT @join__enumValue(graph: IRIS)
}

type FooterCTASection
  @join__type(graph: IRIS)
{
  cancelButton: Button!
  checkoutButton: Button!
}

"""
Represents footer style, BYLINE is left aligned, TANDC is right aligned
"""
enum FooterStyle
  @join__type(graph: IRIS)
{
  BYLINE @join__enumValue(graph: IRIS)
  TANDC @join__enumValue(graph: IRIS)
}

type FormattedBanner
  @join__type(graph: IRIS)
{
  hasIcon: Boolean!
  content: String!
  style: FormattedBannerStyle!
}

enum FormattedBannerStyle
  @join__type(graph: IRIS)
{
  WARNING @join__enumValue(graph: IRIS)
  INFO @join__enumValue(graph: IRIS)
  ERROR @join__enumValue(graph: IRIS)
}

type FormattedContent
  @join__type(graph: IRIS)
{
  title: String!
  content: String!
  framedContent: String
  isCollapsable: Boolean!
}

type FormattedFrame
  @join__type(graph: IRIS)
{
  content: String!
}

type FreeTextListItem
  @join__type(graph: IRIS)
{
  id: ID!
  text: String!
  timestamp: Float!
  checked: Boolean!

  """
  Frontend locally stored Id, used for identify newly created free text items
  """
  referenceId: ID
}

type FreshMagHome
  @join__type(graph: IRIS)
{
  items: [FreshMagHomeItem]!
}

union FreshMagHomeItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "FreshMagSummary")
  @join__unionMember(graph: IRIS, member: "HorizontalList")
 = FreshMagSummary | HorizontalList

type FreshMagSummary
  @join__type(graph: IRIS)
{
  coverImageUrl: String!
  description: String!
  magazineId: String!
  buttonTitle: String
}

type FreshMagTile
  @join__type(graph: IRIS)
{
  altText: String!
  coverImageUrl: String!
  textImageUrl: String!
}

type FulfilmentExtraInfo
  @join__type(graph: IRIS)
{
  title: String!
  content: [FulfilmentExtraInfoContent!]!
}

union FulfilmentExtraInfoContent
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "BroadcastBanner")
  @join__unionMember(graph: IRIS, member: "FulfilmentFeesInfoSection")
  @join__unionMember(graph: IRIS, member: "CheckoutTermsConditions")
  @join__unionMember(graph: IRIS, member: "FulfilmentInfoRowAccordion")
 = BroadcastBanner | FulfilmentFeesInfoSection | CheckoutTermsConditions | FulfilmentInfoRowAccordion

type FulfilmentFeeItem
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  prices: [FulfilmentFeePriceInfo!]!
}

type FulfilmentFeePriceInfo
  @join__type(graph: IRIS)
{
  amount: String!
  description: String
}

type FulfilmentFeesInfoSection
  @join__type(graph: IRIS)
{
  feesInfoSectionTitle: String
  items: [FulfilmentFeeItem!]!
}

type FulfilmentInfoRowAccordion
  @join__type(graph: IRIS)
{
  rowUI: CoreRowUI!
  isExpanded: Boolean!
  hasTopSeparator: Boolean!
  expandedContent: FulfilmentInfoRowAccordionExpandedContent
  openActionAnalytics: Analytics
  closeActionAnalytics: Analytics
}

union FulfilmentInfoRowAccordionExpandedContent
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ParagraphTextItem")
 = ParagraphTextItem

type FulfilmentMethod
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  iconUrl: String!
}

"""Banner indicating changes in the order fulfilment status"""
type FulfilmentStatusBanner
  @join__type(graph: IRIS)
{
  text: String!
  buttonLabel: String!
}

type FulfilmentTimeSlot
  @join__type(graph: IRIS)
{
  fulfilmentTimeSlotTitle: TextWithAlt!
  subtitle: String
  iconUrl: String!
}

union FulfilmentWindowPromotionalBanner
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "InsetBanner")
 = InsetBanner

type FulfilmentWindowSelectionOptionsInfo
  @join__type(graph: IRIS)
{
  title: String!
  selectionOptions: [FulfilmentWindowSlotSelectionOption!]!
}

type FulfilmentWindowsFooter
  @join__type(graph: IRIS)
{
  buttonTitle: String!
}

enum FulfilmentWindowsFooterIcon
  @join__type(graph: IRIS)
{
  GREEN_DELIVERY @join__enumValue(graph: IRIS)
  PARTNER_DELIVERY @join__enumValue(graph: IRIS)
  NONE @join__enumValue(graph: IRIS)
}

type FulfilmentWindowSlotSelectionInfo
  @join__type(graph: IRIS)
{
  descriptionMd: String
  iconType: FulfilmentWindowsFooterIcon!
}

type FulfilmentWindowSlotSelectionOption
  @join__type(graph: IRIS)
{
  description: String!
  selectionOptionId: FulfilmentWindowSlotSelectionOptionId!
  imageUrl: String!
  title: String!
  tags: [Badge!]!
  disabledBadge: Badge!
  disabledTitle: String!
  disabledDescription: String!
}

enum FulfilmentWindowSlotSelectionOptionId
  @join__type(graph: IRIS)
{
  DIRECT_TO_BOOT @join__enumValue(graph: IRIS)
  SELF_SERVICE @join__enumValue(graph: IRIS)
  ELOCKER @join__enumValue(graph: IRIS)
}

type FulfilmentWindowSlotSelectionOptionsState
  @join__type(graph: IRIS)
{
  enabledOptions: [FulfilmentWindowSlotSelectionOptionId!]!
  selectedOption: FulfilmentWindowSlotSelectionOptionId
  isLastWindow: Boolean!
}

interface FulfilmentWindowState
  @join__type(graph: IRIS)
{
  """e.g. Selected:"""
  fulfilmentWindowStateTitle: String!

  """
  e.g.
    text: Friday, 4 Mar • 2pm - 5pm
    altText: Friday, 4 March between 2pm and 5pm
  """
  fulfilmentWindowStateSubtitle: TextWithAlt

  """(Button): Edit or Select"""
  fulfilmentWindowStateButton: Button!
}

type FullScreenMessage
  @join__type(graph: IRIS)
{
  messageTitle: String
  messageDescription: String
  messageImageUrl: String @deprecated(reason: "No longer used. Replaced by messageAsset")
  messageAsset: DownloadableAsset
  messageButtons: [Button!]!
}

type FullWidthCampaignCard implements CampaignCardBase
  @join__implements(graph: IRIS, interface: "CampaignCardBase")
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String!
  imageAltText: String
  action: String!
  subtitle: String
}

"""An actionable full width item with 3:2 Image, title, and description"""
type FullWidthContentCard implements ContentCardBase
  @join__implements(graph: IRIS, interface: "ContentCardBase")
  @join__type(graph: IRIS)
{
  """Content card Id for AEM driven components"""
  contentCardId: String

  """
  The URL of the 3:2 image displayed in the card. Must be a valid URL and is non-nullable.
  """
  contentCardImageUrl: String!

  """If provided, this title will be displayed below the image."""
  contentCardTitle: String

  """If provided, this description will be displayed below the title."""
  contentCardDescription: String

  """
  If provided, the whole card will perform the attached action when tapped
  """
  contentCardAction: Action

  """If provided, the content card has a video in it"""
  contentCardIsVideoAvailable: Boolean

  """
  If provided, it indicates the content card size: largeSquare -> large, square & landscape -> small
  """
  contentCardSize: ContentCardSize
}

"""A type representing an image card with a full-width display."""
type FullWidthImageCard
  @join__type(graph: IRIS)
{
  """Image card Id for AEM driven components"""
  imageCardId: String

  """
  The URL of the 1:1 image displayed in the card. Must be a valid URL and is non-nullable.
  """
  imageCardImageUrl: String!

  """The accessibility label for imageCardImageUrl."""
  imageCardImageAltText: String!

  """If provided, this title will be displayed below the image."""
  imageCardTitle: String
}

"""Represents the generic page content"""
interface GenericPage
  @join__type(graph: IRIS)
{
  """
  Different metadata that may be displayed on top/above
  the scrollable area.
  """
  header: GenericPageHeader

  """
  List of different ui components. To be displayed in
  the main scrollable area of the Page
  """
  items: [GenericPageFeedItem]!

  """
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

"""
Union of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. openBottomSheet?id=sheet1
"""
union GenericPageBottomSheetItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "StaticBottomSheet")
 = StaticBottomSheet

"""
Union of different ui components that will
display in app. Order of components is fully controlled in
backend by BFF with help of upstream services.

Carousel is a generic component, but only HeroBanner is currently supported which is home page specific.
Added here so it can easily be used in Content Playbook and extended in the future.
"""
union GenericPageFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "AddRewardsCard")
  @join__unionMember(graph: IRIS, member: "BasicCoreRowList")
  @join__unionMember(graph: IRIS, member: "BasicInsetAlert")
  @join__unionMember(graph: IRIS, member: "BoosterHorizontalList")
  @join__unionMember(graph: IRIS, member: "BroadcastBanner")
  @join__unionMember(graph: IRIS, member: "BasicCoreBroadcastBanner")
  @join__unionMember(graph: IRIS, member: "Button")
  @join__unionMember(graph: IRIS, member: "ButtonSection")
  @join__unionMember(graph: IRIS, member: "Carousel")
  @join__unionMember(graph: IRIS, member: "CatalogueCard")
  @join__unionMember(graph: IRIS, member: "DownloadableAsset")
  @join__unionMember(graph: IRIS, member: "EditorialBanner")
  @join__unionMember(graph: IRIS, member: "EditorialCarousel")
  @join__unionMember(graph: IRIS, member: "FullWidthContentCard")
  @join__unionMember(graph: IRIS, member: "FullWidthImageCard")
  @join__unionMember(graph: IRIS, member: "GridList")
  @join__unionMember(graph: IRIS, member: "HorizontalList")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "Link")
  @join__unionMember(graph: IRIS, member: "MenuVersion")
  @join__unionMember(graph: IRIS, member: "MyShoppingLists")
  @join__unionMember(graph: IRIS, member: "PageCover")
  @join__unionMember(graph: IRIS, member: "ParagraphTextItem")
  @join__unionMember(graph: IRIS, member: "ProductDetailsCoreRow")
  @join__unionMember(graph: IRIS, member: "ProductDetailsImages")
  @join__unionMember(graph: IRIS, member: "ProductDetailsProductPanel")
  @join__unionMember(graph: IRIS, member: "ProductDetailsRowAccordion")
  @join__unionMember(graph: IRIS, member: "ProductDetailsRowLink")
  @join__unionMember(graph: IRIS, member: "ProductDetailsRatingsAndReviewsPreview")
  @join__unionMember(graph: IRIS, member: "ProductOriginAndHealthInfo")
  @join__unionMember(graph: IRIS, member: "ProductSection")
  @join__unionMember(graph: IRIS, member: "RecipeByLine")
  @join__unionMember(graph: IRIS, member: "RecipeMethod")
  @join__unionMember(graph: IRIS, member: "RegistrationCard")
  @join__unionMember(graph: IRIS, member: "RewardsBalanceCard")
  @join__unionMember(graph: IRIS, member: "SearchNavCard")
  @join__unionMember(graph: IRIS, member: "TabSection")
  @join__unionMember(graph: IRIS, member: "TitleSection")
  @join__unionMember(graph: IRIS, member: "UniversalInventoryContainer")
  @join__unionMember(graph: IRIS, member: "VerticalList")
  @join__unionMember(graph: IRIS, member: "Video")
  @join__unionMember(graph: IRIS, member: "VideoAdUnit")
  @join__unionMember(graph: IRIS, member: "ProductDetailsCouponBanner")
  @join__unionMember(graph: IRIS, member: "ChatEntryCard")
 = ActionableCard | AddRewardsCard | BasicCoreRowList | BasicInsetAlert | BoosterHorizontalList | BroadcastBanner | BasicCoreBroadcastBanner | Button | ButtonSection | Carousel | CatalogueCard | DownloadableAsset | EditorialBanner | EditorialCarousel | FullWidthContentCard | FullWidthImageCard | GridList | HorizontalList | InsetBanner | Link | MenuVersion | MyShoppingLists | PageCover | ParagraphTextItem | ProductDetailsCoreRow | ProductDetailsImages | ProductDetailsProductPanel | ProductDetailsRowAccordion | ProductDetailsRowLink | ProductDetailsRatingsAndReviewsPreview | ProductOriginAndHealthInfo | ProductSection | RecipeByLine | RecipeMethod | RegistrationCard | RewardsBalanceCard | SearchNavCard | TabSection | TitleSection | UniversalInventoryContainer | VerticalList | Video | VideoAdUnit | ProductDetailsCouponBanner | ChatEntryCard

"""
Represents the generic page's top/above
  the scrollable area.
"""
interface GenericPageHeader
  @join__type(graph: IRIS)
{
  """represents page title"""
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

enum GenericPageHeroImageType
  @join__type(graph: IRIS)
{
  """
  The image will fill the entire container while maintaining its aspect ratio, which may result in some parts of the image being cropped if the container dimensions don't match the image.
  """
  ASPECT_FILL @join__enumValue(graph: IRIS)

  """
  Will display the entire image, stretching full width or height without cropping, maintaining its aspect ratio.
  """
  ASPECT_FIT @join__enumValue(graph: IRIS)
}

"""A type representing the store location and distance."""
type GeoInfo
  @join__type(graph: IRIS)
{
  distance: Float
  latitude: String!
  longitude: String!
}

input GeoLocation
  @join__type(graph: IRIS)
{
  """
  latitude - horizontal lines that measure distance north or south of the equator
  """
  latitude: Float!

  """
  longitude - vertical lines that measure east or west of the meridian in Greenwich, England
  """
  longitude: Float!
}

input GetAlternativeProductsInput
  @join__type(graph: IRIS)
{
  """
  A unique id that need to be passed in order to get the alternative products for a product.
  """
  productId: String!

  """
  Represents the unique store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
  """
  storeId: String

  """
  Determines whether an additional section is included in the response with products from the same category
  Defaults to false if not passed in the query
  """
  shouldIncludeProductsFromCategory: Boolean

  """
  "VALUE_SWAPS", "SMART_ALTERNATIVES" or "UNIVERSAL"
  Determines which upstream API gets used and each one has different presentation logic
  Defaults to "SMART_ALTERNATIVES" if not present
  """
  alternativeProductsMode: AlternativeProductsMode
}

type GetAlternativeProductsResponse
  @join__type(graph: IRIS)
{
  """Sections of the alternative products."""
  sections: [AlternativeProductsSections!]!

  """Represents the disclaimer text"""
  disclaimer: AlternativeProductsDisclaimer
}

input GetPickupStoresInput
  @join__type(graph: IRIS)
{
  latitude: Float
  longitude: Float
  postcode: String
  storeAddressId: Int
  storeId: Int
  limit: Int
}

union GiftCardItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AddGiftCard")
  @join__unionMember(graph: IRIS, member: "LinkedGiftCard")
  @join__unionMember(graph: IRIS, member: "UnlinkedGiftCard")
 = AddGiftCard | LinkedGiftCard | UnlinkedGiftCard

type GiftCardSection
  @join__type(graph: IRIS)
{
  title: String!
  giftCards: [GiftCardItem!]!
}

"""Ad banner that comes from Google Ad Manager (GAM)"""
type GoogleAdBannerCard
  @join__type(graph: IRIS)
{
  """Ad Unit used to define which level of app should this ad be displayed."""
  adUnit: String!

  """The GAM's Native Template ID of the ad."""
  nativeCustomTemplateId: String!

  """The size of the banner."""
  height: AdBannerNativeSize!

  """A flag to indicate if the banner size is per IAB Specification"""
  iabSpec: Boolean!

  """The size of the banner per IAB Spec."""
  iabSize: String

  """
  A scalar object to be used with google sdk as Hashmap/Dictionary
  for targeting purposes. Props of this object will not be
  accessed in app.
  """
  targeting: GoogleAdCustomTargeting

  """
  Correlator value which enables GAM to know that multiple ads
  are requested from same screen
  """
  correlator: String

  """
  Common BFF custom flag to allow independent chain resolvers.
  Having item with _excluded:true, means it should not be used in FE
  """
  _excluded: Boolean

  """
  DEPRECATED: An object to be used with tealium to pass analytics data
  
  ShopApp version indicates when to do complete removal
  * 21.10 (Android only)
    * analytics
      * adobePe - moved to a new independent type JIRA TAN-75
      * adobeTnta - moved to a new independent type JIRA TAN-75
  """
  analytics: AdTealiumAnalytics @deprecated(reason: "Use `ProductList.analytics` of type `AdobeTargetAnalytics` to get adobe analytics associated to this AdBanner")
}

"""
A scalar object to be used with google sdk as Hashmap/Dictionary for targeting
"""
scalar GoogleAdCustomTargeting
  @join__type(graph: IRIS)

"""
Google Ad forecasting that will connect to Google Ad Manager (GAM) to send analytics
"""
type GoogleAdForecastingAnalytics
  @join__type(graph: IRIS)
{
  """Ad Unit used to define which level of app should this ad be displayed."""
  adUnit: String! @deprecated(reason: "GoogleAdForecastingAnalytics have been completely removed.")

  """The GAM's Native Template ID of the ad."""
  nativeCustomTemplateId: String! @deprecated(reason: "GoogleAdForecastingAnalytics have been completely removed.")

  """
  A scalar object to be used with google sdk as Hashmap/Dictionary
  for targeting purposes. Props of this object will not be
  accessed in app.
  """
  targeting: GoogleAdCustomTargeting @deprecated(reason: "GoogleAdForecastingAnalytics have been completely removed.")

  """
  Common BFF custom flag to allow independent chain resolvers.
  Having item with _excluded:true, means it should not be used in FE
  """
  _excluded: Boolean @deprecated(reason: "GoogleAdForecastingAnalytics have been completely removed.")
}

type GooglePay
  @join__type(graph: IRIS)
{
  title: String!
  isSelected: Boolean!
  amountTitle: String!
  amountValue: String!
  amountToPay: Int!
  id: String!
  supportedNetworks: [String!]!
}

type GreenWindowBanner
  @join__type(graph: IRIS)
{
  iconUrl: String!
  title: String!
  message: String!
}

"""
GridList is a collection of items that can be displayed in a grid format on FE.
It supports pagination and displays two items in a row by default.
"""
type GridList
  @join__type(graph: IRIS)
{
  """The type of the grid list."""
  gridListItems: [GridListItem!]!

  """The total number of items in the entire paginated grid collection."""
  gridListItemCount: Int

  """Analytics for the grid list."""
  gridListAnalytics: Analytics

  """Impression analytics for the grid list."""
  gridListImpressionAnalytics: Analytics
}

union GridListItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RecipeSummaryCard")
 = RecipeSummaryCard

"""Represents the guides page content"""
type GuidesPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  header: GuidesPageHeader

  """
  List of different ui components. To be displayed in
  the main scrollable area of the Page
  """
  items: [GenericPageFeedItem!]!

  """
  implement from generic type
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type GuidesPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """represents page title"""
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  BFF to extract Image component's image URL if primary flag of the component is true,
  if false, return a fallback image url
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

type HasHaveYouForgotten
  @join__type(graph: IRIS)
{
  status: Boolean!
}

type HealthierHorizontalList
  @join__type(graph: IRIS)
{
  healthierOptions: [HealthierOption!]!
  linkedInfo: HealthierLinkedInfo
  subtitle: String
  title: String!
}

type HealthierLink
  @join__type(graph: IRIS)
{
  text: String!
  url: String!
}

type HealthierLinkedInfo
  @join__type(graph: IRIS)
{
  buttonLabel: String!
  content: String!
  links: [HealthierLink!]!
  title: String!
  markdownContent: String
}

type HealthierOption
  @join__type(graph: IRIS)
{
  productCard: ProductCard!
  healthStarRating: ImageContent
}

"""
                         /-----------------------------------------------------------------------------------------\
                        |/------------------------------------------------------------------------------------------\|-------
                        ||                                                                                          ||       \
                        ||                                                                                          ||        \
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                           /----      -----      -----      -----     --\                 ||         |
                        ||                           |                                             |                ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                           |                                             |                ||         |  Image Panel
                        ||                           |                    Image                    |                ||         |
                        ||                           |                                             |                ||         |
                        ||                           |                                             |                ||         |
                        ||                           |                                             |                ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                 -------||            ____                                                                          ||         |
               /        ||         ≤-      -≤                                                                       ||         |
              /         ||       j≤˝        ˚≤p                                                                     ||         |
              |         ||       ≤            ≤      |                                             |                ||         |
              |         ||      |˝            ˚|     |                                             |                ||         |
    Graphic   |         ||      ≤              ≤     |                                             |                ||         |
              |         ||     j|              |p    |                                             |                ||         /
    Block     |         ||     |                |                                                                   ||       /
              |         ||-----≤                ≤-------------------------------------------------------------------||-------
              |         ||     |p              j|                                                                   ||
              |         ||      |              |                                                                    ||
              |         ||      ≤              ≤                                                                    ||
              |         ||      ˚|            |˝                                                                    ||
               \        ||       ≤p          j≤                                                                     ||
                \       ||        -≤        ≤-                                                                      ||
                 >------||        ˚≤-p  j-≤˝                                                                        ||
                /       ||           ----                                                                           ||
               /        ||                                                                                          ||
              |         ||                                                                                          ||
              |         ||       Headline                                                                           ||
              |         ||                                                                                          ||
              |         ||                                                                                          ||
    Text      |         ||                                                                                          ||
              |         ||       Body copy                                                                          ||
    Block     |         ||                                                                                          ||
              |         ||                                                                                          ||
              |         ||                                                                                          ||
               \        ||       Terms and Conditions                                                               ||
                \       ||                                                                                          ||
                 \------||                                                                                          ||
                        |\------------------------------------------------------------------------------------------/|
                         \------------------------------------------------------------------------------------------/
.
"""
type HeroBanner
  @join__type(graph: IRIS)
{
  """Unique ID for the banner"""
  heroBannerId: ID!

  """In hex (e.g. #123456), background colour to use"""
  heroBannerBackgroundColour: String!

  """In hex (e.g. #123456), optional text colour to use"""
  heroBannerTextColour: String

  """1 or 3 images to show in the Image Panel"""
  heroBannerImages: [ImageWithAlt!]!

  """Up to 2 images to show in the Graphic Block"""
  heroBannerGraphics: [ImageWithAlt!]

  """Everyday brands logo (e.g "Everyday Extra" or "Everyday Insurance")"""
  heroBannerBrandsLogo: ImageWithAlt

  """The title (aka Headline)"""
  heroBannerTitle: String!

  """Size of title (LARGE or SMALL)"""
  heroBannerTitleSize: HeroBannerTitleSize!

  """Optional body text"""
  heroBannerBody: HeroBannerBody

  """"Action" for tap events"""
  heroBannerAction: Action!

  """Optional T&Cs text, with optional link"""
  heroBannerTermsAndConditions: HeroBannerTermsAndConditions

  """
  Dynamic Analytics fields to be used for all component events:
  * eventCategory - hero_carousel
  * eventLabel - heroBannerTitle
  * eventDescription - icmpid (Internal campaign id)
  * eventValue - Numeric position of slide in carousel
  """
  heroBannerAnalytics: Analytics!

  """
  Analytics fields to be used for impression events:
  * tealiumEvent - banner_impression or acs_content_impression
  * eventAction - click
  """
  heroBannerImpressionAnalytics: Analytics!
}

union HeroBannerBody
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "HeroBannerBodyText")
  @join__unionMember(graph: IRIS, member: "HeroBannerPromoBody")
 = HeroBannerBodyText | HeroBannerPromoBody

type HeroBannerBodyText
  @join__type(graph: IRIS)
{
  """e.g. Simply spend ..."""
  text: String!
}

type HeroBannerPromoBody
  @join__type(graph: IRIS)
{
  """e.g. Use code"""
  text: String!

  """e.g. XYZ124"""
  code: String!
}

type HeroBannerTermsAndConditions
  @join__type(graph: IRIS)
{
  """e.g. Terms and Conditions apply"""
  text: String!

  """Optional url to open as webview"""
  action: Action
}

enum HeroBannerTitleSize
  @join__type(graph: IRIS)
{
  SMALL @join__enumValue(graph: IRIS)
  LARGE @join__enumValue(graph: IRIS)
}

"""DeliveryNow Promotion Banner / Button on homepage"""
type HomeDeliveryNowBanner
  @join__type(graph: IRIS)
{
  _: Boolean
}

union HomeDeliveryNowBannerUnion
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "HomeDeliveryNowBottomBanner")
  @join__unionMember(graph: IRIS, member: "HomeDeliveryNowBanner")
 = HomeDeliveryNowBottomBanner | HomeDeliveryNowBanner

"""
Type to show "V2 Delivery Now Banner"
"""
type HomeDeliveryNowBottomBanner implements BottomSheetContent
  @join__implements(graph: IRIS, interface: "BottomSheetContent")
  @join__type(graph: IRIS)
{
  """e.g. Delivery Now"""
  bottomSheetTitle: String!

  """e.g. Get it in 1-2 hours >"""
  bottomSheetBody: String!

  """Always false"""
  showOnceOnly: Boolean

  """The car icon"""
  bannerAsset: DownloadableAsset

  """Deep Link - com.woolworths.shop://shoppingModes"""
  primaryCta: ContentCta

  """Always null"""
  secondaryCta: ContentCta
}

union HomeFeed
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "AddRewardsCard")
  @join__unionMember(graph: IRIS, member: "BroadcastBanner")
  @join__unionMember(graph: IRIS, member: "BoosterHorizontalList")
  @join__unionMember(graph: IRIS, member: "Carousel")
  @join__unionMember(graph: IRIS, member: "CatalogueCard")
  @join__unionMember(graph: IRIS, member: "DividerCard")
  @join__unionMember(graph: IRIS, member: "GoogleAdBannerCard")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "MarketplaceCard")
  @join__unionMember(graph: IRIS, member: "MyShoppingLists")
  @join__unionMember(graph: IRIS, member: "OrderHorizontalList")
  @join__unionMember(graph: IRIS, member: "ProductHorizontalList")
  @join__unionMember(graph: IRIS, member: "QuickLinkList")
  @join__unionMember(graph: IRIS, member: "QuickLinkHorizontalList")
  @join__unionMember(graph: IRIS, member: "RecipeHorizontalList")
  @join__unionMember(graph: IRIS, member: "RegistrationCard")
  @join__unionMember(graph: IRIS, member: "RewardsBalanceCard")
  @join__unionMember(graph: IRIS, member: "RewardsSummaryCard")
 = ActionableCard | AddRewardsCard | BroadcastBanner | BoosterHorizontalList | Carousel | CatalogueCard | DividerCard | GoogleAdBannerCard | InsetBanner | MarketplaceCard | MyShoppingLists | OrderHorizontalList | ProductHorizontalList | QuickLinkList | QuickLinkHorizontalList | RecipeHorizontalList | RegistrationCard | RewardsBalanceCard | RewardsSummaryCard

"""Type to show current Fulfilment Window selected state"""
type HomeFulfilmentWindowBanner implements FulfilmentWindowState
  @join__implements(graph: IRIS, interface: "FulfilmentWindowState")
  @join__type(graph: IRIS)
{
  fulfilmentWindowStateTitle: String!
  fulfilmentWindowStateSubtitle: TextWithAlt
  fulfilmentWindowStateButton: Button!
}

"""Type to show current Fulfilment Window unselected state"""
type HomeFulfilmentWindowContainer
  @join__type(graph: IRIS)
{
  """"Select <mode> Window" button"""
  button: Button!

  """If defined, should display the "Delivery Now" banner"""
  deliveryNowBanner: HomeDeliveryNowBanner

  """
  Display the "Delivery Now" button to the right or below the "Select <mode> Window" button
  """
  orientation: HomeFulfilmentWindowContainerOrientation!
}

"""
Orientation for which HomeFulfilmentWindowContainer's objects should be stacked
"""
enum HomeFulfilmentWindowContainerOrientation
  @join__type(graph: IRIS)
{
  HORIZONTAL @join__enumValue(graph: IRIS)
  VERTICAL @join__enumValue(graph: IRIS)
}

type HomeFulfilmentWindowTile
  @join__type(graph: IRIS)
{
  """Style of the tile (PRIMARY | NONE)"""
  style: HomeFulfilmentWindowTileStyle!

  """Left-aligned icon"""
  iconUrl: String!

  """Deep link"""
  url: String!

  """Bold style title (with accessibility)"""
  title: TextWithAlt!

  """Normal style subtitle (with accessibility)"""
  subtitle: TextWithAlt

  """Required analytics object for FE"""
  analytics: HomeFulfilmentWindowTileAnalytics!
}

"""Type to provide custom analytics for HomeFulfilmentWindowTile"""
type HomeFulfilmentWindowTileAnalytics
  @join__type(graph: IRIS)
{
  """Used to populated event.Label (e.g. "Select Delivery Window")"""
  label: String!
}

enum HomeFulfilmentWindowTileStyle
  @join__type(graph: IRIS)
{
  PRIMARY @join__enumValue(graph: IRIS)
  NONE @join__enumValue(graph: IRIS)
}

union HomeHeaderItems
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "HomeFulfilmentWindowBanner")
  @join__unionMember(graph: IRIS, member: "HomeFulfilmentWindowContainer")
  @join__unionMember(graph: IRIS, member: "HomeModeSelectorContainer")
 = HomeFulfilmentWindowBanner | HomeFulfilmentWindowContainer | HomeModeSelectorContainer

"""Components be used for homepage"""
type HomeList
  @join__type(graph: IRIS)
{
  """List of display components (sticky top)"""
  headerItems: [HomeHeaderItems]!

  """
  WARNING: implementation is not final and under trial by Falcon
  DeliveryNow property of the shopper
  """
  deliveryNow: HomeListDeliveryNow

  """List of display components."""
  items: [HomeFeed]!

  """
  Represents a list of different analytics that may be related to HomeList.
  """
  analytics: [HomeListAnalytics]!

  """The number of unread chatbot messages."""
  unreadChatbotMsg: UnreadChatbotMsg
}

"""Represents a list of different analytics that are related to HomeList."""
union HomeListAnalytics
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AdobeTargetAnalytics")
  @join__unionMember(graph: IRIS, member: "GoogleAdForecastingAnalytics")
  @join__unionMember(graph: IRIS, member: "OrderAnalytics")
 = AdobeTargetAnalytics | GoogleAdForecastingAnalytics | OrderAnalytics

"""DeliveryNow info in homepage"""
type HomeListDeliveryNow
  @join__type(graph: IRIS)
{
  status: String!
  expressDeliveryStoreId: Int
}

"""Type to show mode selector tiles in header"""
type HomeModeSelectorContainer
  @join__type(graph: IRIS)
{
  """Tile to show fulfilment state"""
  fulfilmentWindowTile: HomeFulfilmentWindowTile

  """Vertical divider (to be used when tile style is NONE)"""
  divider: DividerCard

  """Tile to show Pick up or Delivery details (Online mode)"""
  onlineShoppingModeVariantTile: HomeOnlineShoppingModeVariantTile

  """Delivery Now Promotional Banner"""
  deliveryNowBanner: HomeDeliveryNowBannerUnion

  """Store name and opening hours for Instore mode"""
  inStoreDetailsCard: InStoreDetailsCard
}

type HomeOnlineShoppingModeVariantTile
  @join__type(graph: IRIS)
{
  """Deep link"""
  url: String!

  """Bold style title (with accessibility)"""
  title: TextWithAlt

  """Normal style subtitle (with accessibility)"""
  subtitle: TextWithAlt

  """Required analytics object for FE"""
  analytics: HomeOnlineShoppingModeVariantTileAnalytics!
}

"""Type to provide custom analytics for HomeOnlineShoppingModeVariantTile"""
type HomeOnlineShoppingModeVariantTileAnalytics
  @join__type(graph: IRIS)
{
  """Used to populated event.Label (e.g. "Set a delivery address")"""
  label: String!
}

type HomePage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Different metadata that may be displayed on top/above
  the scrollable area.
  """
  header: HomePageHeader

  """
  List of different ui components. To be displayed in
  the main scrollable area of the Page
  """
  items: [GenericPageFeedItem]!

  """
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type HomePageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """represents page title"""
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

input HomePageInput
  @join__type(graph: IRIS)
{
  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  Represents the store id. *e.g. "1550"*.
  Required if mode is INSTORE
  """
  storeId: String

  """
  List of app action that the client supports. This ensures
  that app actions coming out of this response works for the client
  ie. ["openbottomsheet"]
  """
  supportedActions: [String!]!

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]!
}

type HorizontalList implements HorizontalListBase & BaseNode
  @join__implements(graph: IRIS, interface: "HorizontalListBase")
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  id: String
  title: String!
  subtitle: String
  insetBanner: InsetBanner

  """Clickable text link (e.g. "See all")"""
  horizontalListTrailingLink: Link
  nodeId: String
  items: [HorizontalListItem!]!

  """
  Dynamic Analytics fields to be used for all component events:
  * eventCategory - universal_product_list
  * eventLabel - title
  """
  horizontalListAnalytics: Analytics

  """
  Analytics fields to be used for impression events:
  * tealiumEvent - show_universal_product_list
  * eventAction - show
  """
  horizontalListImpressionAnalytics: Analytics

  """Badges to be made available for any of the horizontal list components"""
  badges: [HorizontalListBadge!]

  """@deprecated (reason: 'Superseded by horizontalListTrailingLink')"""
  actionTitle: String

  """@deprecated (reason: 'Superseded by horizontalListTrailingLink')"""
  deepLink: String

  """@deprecated (reason: 'Superseded by horizontalListTrailingLink')"""
  actionPath: String

  """@deprecated (reason: 'Superseded by horizontalListTrailingLink')"""
  actionMetadata: [ActionMetaData!]!
}

union HorizontalListBadge
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "MyGroceriesProductListBadge")
 = MyGroceriesProductListBadge

"""
On the home page: Displays if there are contextual products;
Shows a list of ProductCards in a horizontal view;
This is the same Card as in ProductLists;
On the recipes page: Displays a RecipesSummaryCard
"""
interface HorizontalListBase implements BaseNode
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  actionTitle: String
  deepLink: String
  items: [HorizontalListItem!]!
  nodeId: String
}

union HorizontalListItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ContentCard")
  @join__unionMember(graph: IRIS, member: "MerchCardFullImage")
  @join__unionMember(graph: IRIS, member: "MoreCard")
  @join__unionMember(graph: IRIS, member: "NavRoundel")
  @join__unionMember(graph: IRIS, member: "OfferCard")
  @join__unionMember(graph: IRIS, member: "OrderCard")
  @join__unionMember(graph: IRIS, member: "OrderDetailsProductCard")
  @join__unionMember(graph: IRIS, member: "Pill")
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "ProductCategoryTile")
  @join__unionMember(graph: IRIS, member: "ProductPromoCard")
  @join__unionMember(graph: IRIS, member: "PromotionCard")
  @join__unionMember(graph: IRIS, member: "RecipeGroupTile")
  @join__unionMember(graph: IRIS, member: "RecipeMoreCard")
  @join__unionMember(graph: IRIS, member: "RecipeSummaryCard")
  @join__unionMember(graph: IRIS, member: "QuickLinkCard")
 = ContentCard | MerchCardFullImage | MoreCard | NavRoundel | OfferCard | OrderCard | OrderDetailsProductCard | Pill | ProductCard | ProductCategoryTile | ProductPromoCard | PromotionCard | RecipeGroupTile | RecipeMoreCard | RecipeSummaryCard | QuickLinkCard

"""Icon hosted externally"""
type HostedIcon
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """Image URL"""
  url: String!
}

union IconAsset
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
  @join__unionMember(graph: CPS, member: "HostedIcon")
  @join__unionMember(graph: IRIS, member: "HostedIcon")
  @join__unionMember(graph: CPS, member: "CoreIcon")
  @join__unionMember(graph: IRIS, member: "CoreIcon")
 = HostedIcon | CoreIcon

type IconListItem
  @join__type(graph: IRIS)
{
  iconUrl: String!
  title: String!
  description: String!
}

type IconTextBanner
  @join__type(graph: IRIS)
{
  """
  [URL](https://woolworthsdigital.atlassian.net/wiki/spaces/Market/pages/25800148254/Order+Confirmation#Delivery-Unlimited) details.
  """
  imageUrl: String!
  title: String!
}

type IdVerificationBottomSheet
  @join__type(graph: IRIS)
{
  title: String!
  body: String!

  """The image urls for liquor items"""
  imageUrls: [String!]!
  primaryButton: Button
  secondaryButton: Button
}

type IdVerificationCompleteFail
  @join__type(graph: IRIS)
{
  idVerificationBottomSheet: IdVerificationBottomSheet!
}

union IdVerificationCompleteResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "IdVerificationCompleteSuccess")
  @join__unionMember(graph: IRIS, member: "IdVerificationCompleteFail")
 = IdVerificationCompleteSuccess | IdVerificationCompleteFail

type IdVerificationCompleteSuccess
  @join__type(graph: IRIS)
{
  message: String!
}

type IdVerificationInitResponse
  @join__type(graph: IRIS)
{
  verificationFormUrl: String!
  callbackUrlPattern: String!
}

type ImageContent
  @join__type(graph: IRIS)
{
  url: String
  text: String
  altText: String!
}

type ImageTextBanner
  @join__type(graph: IRIS)
{
  """Url to image"""
  imageUrl: String!

  """Message to be displayed next to image"""
  message: String!
}

type ImageWithAlt
  @join__type(graph: IRIS)
{
  """Image to be displayed on screen"""
  imageUrl: String!

  """Text to be read out by screen reader"""
  altText: String!
}

"""Content of info page - eg: How it works"""
type InfoSection
  @join__type(graph: IRIS)
{
  title: String!
  items: [InfoSectionItem!]!
  footer: InfoSectionFooter
}

"""Additional info in footer"""
type InfoSectionFooter
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  linkUrl: String!
}

"""List of items on the info page"""
type InfoSectionItem
  @join__type(graph: IRIS)
{
  title: String!
  description: String!
  imageUrl: String!
}

"""Represents availability bottom sheet information"""
type InfoSheet
  @join__type(graph: IRIS)
{
  """Title to be displayed on the pop screen"""
  title: String!

  """Message to be displayed on the pop screen"""
  message: String!

  """Button to display Got it / ok"""
  button: Button!
}

"""Represents ingredient status which is used for analysis"""
type IngredientAnalytics
  @join__type(graph: IRIS)
{
  label: String!
}

"""Represents a row that shows ingredient information"""
type IngredientCard
  @join__type(graph: IRIS)
{
  ingredientDetails: String!
  swapButton: Button
  alternativeProducts: [ProductCard!]!
  analytics: IngredientAnalytics!
}

type IngredientsSection
  @join__type(graph: IRIS)
{
  servesInfo: RecipeServes
  ingredients: [String!]!
}

type InlineMessage
  @join__type(graph: IRIS)
{
  """
  Represents the type of the inset banner. e.g. "INFO"
  """
  displayType: InsetBannerDisplayType!

  """Provides the message to be displayed."""
  message: String!

  """InlineMessage analytics"""
  analytics: Analytics
}

"""
text input to allow maxLength and offset
consumer to control input limit
"""
type InputTextLimit
  @join__type(graph: IRIS)
{
  maxLength: Int!
  warningOffset: Int!
}

"""
It is the generic type designed for providing the information or the warning messages at varies screens in the app.
"""
type InsetBanner
  @join__type(graph: IRIS)
{
  """
  Represents the type of the inset banner. e.g. "INFO"
  """
  displayType: InsetBannerDisplayType!

  """Provides the message to be displayed in the banner."""
  message: String!

  """Provides the icon to be displayed in the banner."""
  iconUrl: String

  """Drives the title of the banner."""
  title: String

  """Drives the action with in the banner."""
  action: InsetBannerAction

  """
  Common BFF custom flag to allow independent chain resolvers.
  Having item with _excluded:true, means it should not be used in FE
  """
  _excluded: Boolean

  """Banner analytics"""
  analytics: Analytics
}

type InsetBannerAction
  @join__type(graph: IRIS)
{
  """Drives the placement/position of the action."""
  placement: InsetBannerActionPlacement!

  """
  Drives the type of the action. e.g. "LINK"
  """
  type: InsetBannerActionType!

  """
  Drives the text to be displayed in the action. e.g. "Allow"
  """
  label: String!

  """Provides the url to be redirected to, by click on the action link."""
  url: String
}

enum InsetBannerActionPlacement
  @join__type(graph: IRIS)
{
  BOTTOM @join__enumValue(graph: IRIS)
  RIGHT @join__enumValue(graph: IRIS)
}

enum InsetBannerActionType
  @join__type(graph: IRIS)
{
  LINK @join__enumValue(graph: IRIS)

  """FE handled action"""
  APPLOCAL @join__enumValue(graph: IRIS)
}

enum InsetBannerDisplayType
  @join__type(graph: IRIS)
{
  INFO @join__enumValue(graph: IRIS)
  WARNING @join__enumValue(graph: IRIS)

  """ERROR value is added as an extension works after 07-Oct-2021"""
  ERROR @join__enumValue(graph: IRIS)
  REWARDS @join__enumValue(graph: IRIS)
  GREEN @join__enumValue(graph: IRIS)
}

type InStoreAvailabilityInfo
  @join__type(graph: IRIS)
{
  """Button for Instore product availability"""
  button: Button!

  """Indicate current product availability status in store"""
  status: String

  """More info to be displayed on the bottom sheet"""
  infoSheet: InfoSheet
}

type InStoreDetailsCard
  @join__type(graph: IRIS)
{
  storeName: TextWithLink
  storeTime: TextWithLink

  """Flag to identify instore product location whitelisted stores"""
  isLocationMapped: Boolean
}

"""Represents the product location details from PLIS service."""
type InStoreLocationDetails
  @join__type(graph: IRIS)
{
  """x,y,z coordinates of the product location"""
  x: Float!
  y: Float!
  z: Float!
  aisleSide: AisleSide!
  location: String
  aisleNumber: Int!
  bayNumber: Int!
  bayNumberAlternate: Int
  floorNumber: Int!
}

"""
Only available when mode is INSTORE. Labels to be displayed on the Product Card
"""
type InStoreLocationDisplayInfo
  @join__type(graph: IRIS)
{
  """
  Represents where in the store the product can be found. *e.g. "Aisle 5"*.
  """
  locationText: String

  """
  Represents the category of the location. Used by FE to determine styling.
  """
  locationType: InStoreLocationType
}

"""Represents location info of Product in store."""
type InStoreLocationInfo
  @join__type(graph: IRIS)
{
  """
  SAAS product location will be displayed when details not available from PLIS
  """
  displayInfo: InStoreLocationDisplayInfo
  details: InStoreLocationDetails
}

"""
Represents the category of the instore location details. Used by FE to determine styling.
"""
enum InStoreLocationType
  @join__type(graph: IRIS)
{
  AVAILABLE @join__enumValue(graph: IRIS)
  UNAVAILABLE @join__enumValue(graph: IRIS)
}

enum InvoiceErrorReason
  @join__type(graph: IRIS)
{
  UNSPECIFIED @join__enumValue(graph: IRIS)
  UNAVAILABLE @join__enumValue(graph: IRIS)
}

type ItemsToBeSynced
  @join__type(graph: IRIS)
{
  updatedProductItems: [ProductListItem!]!
  updatedFreeTextItems: [FreeTextListItem!]!
  deletedItems: [ListItemDeleted]
}

scalar join__FieldSet

enum join__Graph {
  CPS @join__graph(name: "cps", url: "http://localhost:4000/graphql")
  IRIS @join__graph(name: "iris", url: "http://localhost:3001/graphql")
}

type LastChatbotMsg
  @join__type(graph: IRIS)
{
  """Represents the title for the tile `Message us`"""
  title: String!

  """Represents the previewMessage(last message sent / default message)"""
  body: String!

  """The number of unread chatbot messages"""
  unreadChatbotMsgCount: Int!

  """
  Represents the previewMessage source (ex: default/operator/bot/customer)
  """
  source: String!
}

type LegacyError
  @join__type(graph: IRIS)
{
  errorCode: Int!
  message: String!
  key: String!
}

"""Represents one of many link section in a page."""
type Link
  @join__type(graph: IRIS)
{
  """Link component id"""
  linkId: String

  """Generic way of defining the action of a component."""
  linkAction: Action!

  """Tappable text to display"""
  linkTextWithAlt: TextWithAlt!
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

"""
LinkCardBase is template for actionable cards
Used in InStore home page QuickLinkCard, RecipeStickerCard, RecipeGroupCard
"""
interface LinkCardBase
  @join__type(graph: IRIS)
{
  linkCardTitle: String!
  linkCardSubtitle: String
  linkCardImage: String
  linkCardLink: String!
  linkCardSize: CardSize!
}

type LinkCreditCardResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  paymentMethodId: String
}

type LinkedCreditCard
  @join__type(graph: IRIS)
{
  icon: String!
  title: String!
  subtitle: String
  isSelected: Boolean!
  amountTitle: String!
  amountValue: String!
  amountToPay: Int!
  id: String!
  cvvUrl: String!
}

type LinkedGiftCard
  @join__type(graph: IRIS)
{
  id: String!
  title: String!
  isSelected: Boolean!
  amountTitle: String!

  """Balance value"""
  amountValue: String!

  """Amount to redeem in cents"""
  amountRedeem: Int!
  errorBanner: InsetBanner
}

input LinkedGiftCardInput
  @join__type(graph: IRIS)
{
  id: String!
  isSelected: Boolean!

  """Amount redeemed in cents"""
  amountRedeemed: Int!
}

type LinkedPayPal
  @join__type(graph: IRIS)
{
  title: String!
  icon: String!
  isSelected: Boolean!
  amountTitle: String!
  amountValue: String!
  amountToPay: Int!
  id: String!
}

type LinkPayPalResponse
  @join__type(graph: IRIS)
{
  id: String!

  """approval Url"""
  url: String!
  redirectUrl: String!
}

type List
  @join__type(graph: IRIS)
{
  id: ID!
  title: String!
  color: String!
  timestamp: Float!
  count: Int!
  lastSynced: Float!
  productItems: [ProductListItem!]!
  freeTextItems: [FreeTextListItem!]!
  isWatching: Boolean
}

"""Contains list details"""
input ListDetailsInput
  @join__type(graph: IRIS)
{
  storeId: String
  productItems: [ProductItemInput!]!
  listId: ID
}

type ListDetailsPotentialSavings implements ListDetailsTotalSectionSubItemBase
  @join__implements(graph: IRIS, interface: "ListDetailsTotalSectionSubItemBase")
  @join__type(graph: IRIS)
{
  """
  text label of the sub section
  e.g. "Potential savings"
  """
  label: String!

  """
  value of the sub section
  e.g. "$2.00"
  """
  value: String!
}

type ListDetailsProductAction
  @join__type(graph: IRIS)
{
  """stock code"""
  productId: String!

  """
  field used for render action
  e.g. 'valueSwaps'
  """
  action: String!

  """
  label to display
  e.g. 'Compare lower unit price'
  """
  label: String!
}

type ListDetailsResponse
  @join__type(graph: IRIS)
{
  """field used for rendering list totals"""
  total: ListDetailsTotal

  """additional actions that appear in the menu for individual products"""
  productActions: [ListDetailsProductAction!]
}

type ListDetailsRewardsSummary implements ListDetailsTotalSectionSubItemBase
  @join__implements(graph: IRIS, interface: "ListDetailsTotalSectionSubItemBase")
  @join__type(graph: IRIS)
{
  """
  text label of the sub section
  e.g. "You may collect"
  """
  label: String!

  """
  value of the sub section
  e.g. "0 points"
  """
  value: String!

  """Optional image url"""
  imageUrl: String
}

type ListDetailsTotal
  @join__type(graph: IRIS)
{
  """list total summary section"""
  summary: ListDetailsTotalSummary

  """list total disclaimer"""
  disclaimer: ListDetailsTotalDisclaimer

  """list total rewards section"""
  overview: ListDetailsTotalOverview
}

type ListDetailsTotalDisclaimer
  @join__type(graph: IRIS)
{
  """disclaimer text"""
  text: String!
}

type ListDetailsTotalOverview
  @join__type(graph: IRIS)
{
  """
  label to display
  e.g. 'Est. Total'
  """
  label: String!

  """
  total amount
  e.g. $31.00
  """
  value: String!

  """accessibility text for total amount"""
  altText: String!
}

type ListDetailsTotalSectionHeader implements ListDetailsTotalSectionSubItemBase
  @join__implements(graph: IRIS, interface: "ListDetailsTotalSectionSubItemBase")
  @join__type(graph: IRIS)
{
  """
  text label of the section
  e.g. "List total"
  """
  label: String!

  """
  value of the section
  e.g. "$31.00"
  """
  value: String!
}

interface ListDetailsTotalSectionItemBase
  @join__type(graph: IRIS)
{
  sections: [ListDetailsTotalSectionSubItem!]!
}

union ListDetailsTotalSectionSubItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ListDetailsTotalSectionHeader")
  @join__unionMember(graph: IRIS, member: "ListDetailsPotentialSavings")
  @join__unionMember(graph: IRIS, member: "ListDetailsRewardsSummary")
 = ListDetailsTotalSectionHeader | ListDetailsPotentialSavings | ListDetailsRewardsSummary

interface ListDetailsTotalSectionSubItemBase
  @join__type(graph: IRIS)
{
  label: String!
  value: String!
}

type ListDetailsTotalSummary implements ListDetailsTotalSectionItemBase
  @join__implements(graph: IRIS, interface: "ListDetailsTotalSectionItemBase")
  @join__type(graph: IRIS)
{
  sections: [ListDetailsTotalSectionSubItem!]!
}

type ListItemDeleted
  @join__type(graph: IRIS)
{
  id: ID!
  timestamp: Float!
}

"""Response for list update"""
type ListResponse
  @join__type(graph: IRIS)
{
  """id of the list in remote db"""
  id: ID!

  """title of the list"""
  title: String!

  """color of the list"""
  color: String!

  """timestamp when list has been updated"""
  timestamp: Float!

  """watch specials"""
  isWatching: Boolean
}

"""
Represents the list section header between product cards, it can also be used for divider like label which only has plain text
the type value is used by FE to style the text
"""
type ListSectionHeader
  @join__type(graph: IRIS)
{
  listSectionHeaderType: ListSectionHeaderTypes!
  listSectionHeaderText: String!
}

"""Primary header is bold text, secondary is normal text"""
enum ListSectionHeaderTypes
  @join__type(graph: IRIS)
{
  PRIMARY @join__enumValue(graph: IRIS)
  SECONDARY @join__enumValue(graph: IRIS)
}

"""Collection of lists changes on server-side"""
type ListsToBeSynced
  @join__type(graph: IRIS)
{
  """Lists which was created"""
  listsCreated: [ListResponse!]!
}

"""Contains local lists infomation"""
input LocalList
  @join__type(graph: IRIS)
{
  id: ID!
  timestamp: Float!
}

enum LocationImage
  @join__type(graph: IRIS)
{
  YOUR_LOCATION @join__enumValue(graph: IRIS)
  LOCATION_OFF @join__enumValue(graph: IRIS)
  APP_SETTINGS @join__enumValue(graph: IRIS)
  DEFAULT @join__enumValue(graph: IRIS)
}

type LocationTrackingPrimingPage
  @join__type(graph: IRIS)
{
  """Priming page when location permissions were not set"""
  locationPermissionsWereNotSet: LocationTrackingPrimingPageContent!

  """Priming page when user said not to allow location tracking earlier"""
  doNotAllowWasSetEarlier: LocationTrackingPrimingPageContent!
}

type LocationTrackingPrimingPageContent
  @join__type(graph: IRIS)
{
  """Header of the location tracking priming page"""
  header: String!

  """Reason and steps to enable location tracking permissions"""
  rationales: [LocationTrackingPrimingPageRationale!]!

  """Buttons to track, skip or update location tracking permissions"""
  locationPermissionButtons: [Button!]!

  """Footer of the location tracking priming page"""
  footer: String!
}

type LocationTrackingPrimingPageRationale
  @join__type(graph: IRIS)
{
  """To apply background to the content or not"""
  applyBackground: Boolean!

  """Image name"""
  image: LocationImage!

  """Rationale behind the location tracking permissions"""
  textMd: String!
}

enum LocationTrackingStatusImage
  @join__type(graph: IRIS)
{
  """Image that is used in the UI when location tracking is ON"""
  SHARING_LOCATION_ON @join__enumValue(graph: IRIS)

  """Image that is used in the UI when location tracking is OFF"""
  SHARING_LOCATION_OFF @join__enumValue(graph: IRIS)
}

"""Response for list migration"""
type MapGuestListToOwner
  @join__type(graph: IRIS)
{
  success: Boolean!
}

enum MarketFulfilmentAddressStatus
  @join__type(graph: IRIS)
{
  ADDRESS_SET @join__enumValue(graph: IRIS)
  ADDRESS_REQUIRED @join__enumValue(graph: IRIS)
  ADDRESS_NOT_REQUIRED @join__enumValue(graph: IRIS)
}

"""Marketplace Query Response type"""
type Marketplace
  @join__type(graph: IRIS)
{
  """Marketplace educational button title"""
  buttonTitle: String

  """Marketplace educational banner content"""
  header: InfoSection

  """Contains list of possible page tabs"""
  tabs: [MarketplacePageTab!]!

  """
  Contains list of possible page sections, mapping to tabs, Categories | Brands | Sellers | Personalised
  """
  sections: [MarketplaceSections!]!
}

"""Drives the marketplace tile on the FE. Always showing."""
type MarketplaceCard
  @join__type(graph: IRIS)
{
  """label is nullable, ie, can have a value like NEW or can be set to null"""
  marketplaceCardLabel: String
  marketplaceCardHeader: String!
  marketplaceCardTitle: String!
  marketplaceCardBannerImage: String!
  marketplaceCardBannerAltText: String!
  marketplaceCardSubtitle: String!
  marketplaceCardImage: String!
  marketplaceCardAltText: String!
  marketplaceCardBackgroundColor: String!
}

type MarketplaceCartTracker
  @join__type(graph: IRIS)
{
  """0.75 percentage as decimal"""
  freeShippingPercentage: Float!

  """You are $23 away from FREE shipping"""
  title: String!

  """Orders under $100 have a $10 shipping fee"""
  description: String!
}

type MarketplaceCategoriesInfo
  @join__type(graph: IRIS)
{
  channel: ProductListChannelType!
  facet: ProductListFacetType!
}

type MarketplaceEducationBottomSheet implements BottomSheetContent
  @join__implements(graph: IRIS, interface: "BottomSheetContent")
  @join__type(graph: IRIS)
{
  bottomSheetTitle: String!
  bottomSheetBody: String!
  showOnceOnly: Boolean
  bannerAsset: DownloadableAsset
  primaryCta: ContentCta
  secondaryCta: ContentCta
}

"""For-you horizontal list"""
type MarketplaceHorizontalList implements HorizontalListBase & BaseNode
  @join__implements(graph: IRIS, interface: "HorizontalListBase")
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  actionTitle: String
  deepLink: String
  items: [HorizontalListItem!]!
  nodeId: String
}

interface MarketplaceItem
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String!
}

enum MarketplaceLandingPageName
  @join__type(graph: IRIS)
{
  """default, designate first default view of marketplace landing page"""
  default @join__enumValue(graph: IRIS)

  """personalised, for you page"""
  personalised @join__enumValue(graph: IRIS)

  """categories, categories page"""
  categories @join__enumValue(graph: IRIS)

  """brands, brands page"""
  brands @join__enumValue(graph: IRIS)

  """sellers, sellers page"""
  sellers @join__enumValue(graph: IRIS)
}

"""Marketplace landing page tab type"""
type MarketplacePageTab
  @join__type(graph: IRIS)
{
  title: String!
  pageName: MarketplaceLandingPageName!
}

"""List of Personalised content"""
type MarketplacePersonalised
  @join__type(graph: IRIS)
{
  pageName: MarketplaceLandingPageName!
  displayName: String!
  items: [MarketplacePersonalisedSegment!]!
}

union MarketplacePersonalisedSegment
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PromotionBanner")
  @join__unionMember(graph: IRIS, member: "MarketplaceHorizontalList")
 = PromotionBanner | MarketplaceHorizontalList

type MarketplaceProductInfo
  @join__type(graph: IRIS)
{
  sellerName: String!
  brandName: String!
}

interface MarketplaceSectionItem
  @join__type(graph: IRIS)
{
  pageName: MarketplaceLandingPageName!
  displayName: String!
  channel: ProductListChannelType!
  facet: ProductListFacetType!
}

"""
Query response will be an array and will contain object corresponding to Categories/Brands/Sellers
"""
union MarketplaceSections
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "Categories")
  @join__unionMember(graph: IRIS, member: "Brands")
  @join__unionMember(graph: IRIS, member: "Sellers")
  @join__unionMember(graph: IRIS, member: "MarketplacePersonalised")
 = Categories | Brands | Sellers | MarketplacePersonalised

input MarketplaceShippingInfo
  @join__type(graph: IRIS)
{
  """Postcode new nullable param, should not send it when no value"""
  postcode: String

  """
  suburb new nullable param, witch will overwrite the suburb from postcode query
  """
  suburb: String
}

type MarketProductRow implements ProductRow
  @join__implements(graph: IRIS, interface: "ProductRow")
  @join__type(graph: IRIS)
{
  """eg: Toaster"""
  title: String!
  quantity: Float!
  productId: String!

  """eg: $6.98"""
  unitPrice: String!

  """eg: Total"""
  totalTitle: String!

  """eg: $13.96"""
  totalPrice: String!
  imageUrl: String!
  brandName: String!
  removeInfo: CheckoutInfoDialog!

  """Additional fields on cart product(initially used for analytics)"""
  cartProductInfo: CartProductInfo

  """Freight Group Id"""
  freightGroupId: String!
}

type MarketSellerCard
  @join__type(graph: IRIS)
{
  """Seller name"""
  sellerName: String!

  """Seller Dispatch Notes"""
  dispatchNote: String!

  """Array of product feeds"""
  products: [CartProductFeed!]!

  """Seller shipping fees"""
  shippingFee: Float
}

type MarketSellerGroup
  @join__type(graph: IRIS)
{
  sellerName: String!
  dispatchNote: String!
  products: [MarketProductRow!]!
}

"""
Member price details that will be used by Apps after Project Slade phase 2
"""
type MemberPriceInfo
  @join__type(graph: IRIS)
{
  """Member price label (e.g., Member Price)"""
  header: String!

  """
  single-sell products
  BMSM:  Buy More Save More promotional products
  For single-sell products, it will be price of a single product
  For BMSM products to show multi buy Price label, it will be price of group of products
  """
  title: String!

  """
  Unit price of the product.
  Optional - to handle scenarios where unit price is not available.
  """
  subtitle: String
}

"""EDR member product price promotion info"""
type MemberPricePromotionInfo
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  isApplied: Boolean!
}

enum MemberPricingType
  @join__type(graph: IRIS)
{
  BuyMoreSaveMore @join__enumValue(graph: IRIS)
}

type MenuPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Different metadata that may be displayed on top/above
  the scrollable area.
  """
  header: MenuPageHeader

  """
  List of different ui components. To be displayed in
  the main scrollable area of the Page
  """
  items: [GenericPageFeedItem]!

  """
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type MenuPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """represents page title"""
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

input MenuPageInput
  @join__type(graph: IRIS)
{
  """
  Optional submenu page id
  (null = root level menu page)
  """
  id: String

  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  Represents the store id. *e.g. "1550"*.
  Required if mode is INSTORE
  """
  storeId: String

  """
  List of app action that the client supports. This ensures
  that app actions coming out of this response works for the client
  ie. ["openbottomsheet"]
  """
  supportedActions: [String!]!

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]!
}

type MenuVersion
  @join__type(graph: IRIS)
{
  _: Boolean
}

"""
A sellable advertisement showing an image
with texts of the merchandise
"""
type MerchCard
  @join__type(graph: IRIS)
{
  """The large image of the merchandise to use on Grid View Tile Layout"""
  merchCardGridImageWithAlt: ImageWithAlt!

  """The smaller image of the merchandise to use on List view"""
  merchCardListImageWithAlt: ImageWithAlt!

  """The text displayed in bold right below the image"""
  merchCardTitle: String!

  """The text displayed in regular font below the title"""
  merchCardDescription: String

  """The clickable button that may take to different screen"""
  merchCardButton: Button

  """The action when the whole card is tapped"""
  merchCardAction: Action

  """Common analytics payload for merchCard"""
  merchCardAnalytics: Analytics

  """
  Additional Analytics Payload
  for Impression event
  """
  merchCardImpressionAnalytics: Analytics
}

"""
A sellable advertisement showing an image
with texts of the merchandise for the horizontal list layout
Currently used just for NZ
"""
type MerchCardFullImage
  @join__type(graph: IRIS)
{
  """
  The large image of the merchandise covering the full tile to use on the horizontal list Layout
  """
  merchCardFullImageBackgroundImageWithAlt: ImageWithAlt!

  """The text displayed in bold right below the image"""
  merchCardFullImageTitle: String

  """The text displayed in regular font below the title"""
  merchCardFullImageDescription: String

  """The clickable button that may take to different screen"""
  merchCardFullImageButton: Button

  """The action when the whole card is tapped"""
  merchCardFullImageAction: Action
}

type MethodDescription
  @join__type(graph: IRIS)
{
  title: String!
  content: String!
}

type MethodItem
  @join__type(graph: IRIS)
{
  title: String!
  content: String!
  image: String
}

"""Browsing mode of the app selected by user."""
enum Mode
  @join__type(graph: IRIS)
{
  ONLINE @join__enumValue(graph: IRIS)
  PICKUP @join__enumValue(graph: IRIS)
  INSTORE @join__enumValue(graph: IRIS)
}

"""Types used syncing shopping mode details for mode selector v1"""
union ModeSelectorV1AddressDetails
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ModeSelectorV1AddressDetailsDelivery")
  @join__unionMember(graph: IRIS, member: "ModeSelectorV1AddressDetailsPickup")
 = ModeSelectorV1AddressDetailsDelivery | ModeSelectorV1AddressDetailsPickup

type ModeSelectorV1AddressDetailsDelivery
  @join__type(graph: IRIS)
{
  modeId: String!
  addressId: Int!
  addressText: String!
  isPrimary: Boolean!
  postcode: String!
  street1: String!
  street2: String!
  suburbId: Int!
  suburbName: String!
}

type ModeSelectorV1AddressDetailsPickup
  @join__type(graph: IRIS)
{
  modeId: String!
  storeId: String!
  addressId: Int!
  addressText: String!
  displayName: String!
  label: String!
}

type More
  @join__type(graph: IRIS)
{
  """Feed of more screen sections"""
  feed: [MoreFeedItem!]!
}

"""
NOTE: This is deprecated
OneLogin accounts will always have activated Rewards account

More screen Rewards Card Activation tile
"""
type MoreActivateRewardsCard
  @join__type(graph: IRIS)
{
  """Activation copy"""
  title: String!

  """Rewards card number"""
  cardNumber: String!

  """Rewards state"""
  rewardsState: String!
}

"""Represents more card on horizontal list, usually appears at the end."""
type MoreCard
  @join__type(graph: IRIS)
{
  moreCardStyle: MoreCardStyle!
  moreCardAction: Action!
}

"""
Represents the more card style, ROUNDED_CIRCLE is for NavRoundel type and ROUNDED_CORNER is for ContentCard type
"""
enum MoreCardStyle
  @join__type(graph: IRIS)
{
  ROUNDED_CIRCLE @join__enumValue(graph: IRIS)
  ROUNDED_CORNER @join__enumValue(graph: IRIS)
}

type MoreChat
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  url: String
  unreadChatbotMsg: UnreadChatbotMsg
}

"""More screen CiscoWiFi option"""
type MoreCiscoWiFi
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
}

type MoreDeleteAccount
  @join__type(graph: IRIS)
{
  title: String!
}

"""More Screen Delivery Unlimited Tile"""
type MoreDeliveryUnlimited
  @join__type(graph: IRIS)
{
  """Delivery Unlimited title,"""
  title: String!

  """The text/copy to be displayed as a compliment to the title"""
  subtitle: String

  """The text/copy for the brand label"""
  badge: String

  """
  Current state of Delivery Unlimited
  (e.g. `SUBSCRIBED` or `NOT_SUBSCRIBED`)
  """
  status: MoreDeliveryUnlimitedStatus!
  subscribeUrl: String!
}

"""Possible states for Delivery Unlimited"""
enum MoreDeliveryUnlimitedStatus
  @join__type(graph: IRIS)
{
  SUBSCRIBED @join__enumValue(graph: IRIS)
  NOT_SUBSCRIBED @join__enumValue(graph: IRIS)
}

"""More Screen E Receipts Tile"""
type MoreEReceipts
  @join__type(graph: IRIS)
{
  """E Receipts title,"""
  title: String!
}

type MoreExplainingValue
  @join__type(graph: IRIS)
{
  title: String!
  url: String
}

"""
List of more items

Usage:
```graphql
  feed {
    ... on MoreDeliveryUnlimited {
      title
      subtitle
    }
    ... on MoreRewardsCard {
      cardNumber
      canBeUnlinked
      rewardsState
    }
    ... on MoreActivateRewardsCard {
      cardNumber
      title
      rewardsState
    }
    ... on MoreNotifications {
      title
    }
    ... on MoreChat {
      title
      url
    }
  }
"""
union MoreFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "MoreRewardsCard")
  @join__unionMember(graph: IRIS, member: "MoreActivateRewardsCard")
  @join__unionMember(graph: IRIS, member: "MoreName")
  @join__unionMember(graph: IRIS, member: "MoreScanAndGo")
  @join__unionMember(graph: IRIS, member: "MoreFindAStore")
  @join__unionMember(graph: IRIS, member: "MoreRewards")
  @join__unionMember(graph: IRIS, member: "MoreOrders")
  @join__unionMember(graph: IRIS, member: "MoreNotifications")
  @join__unionMember(graph: IRIS, member: "MoreDeliveryUnlimited")
  @join__unionMember(graph: IRIS, member: "MoreLink")
  @join__unionMember(graph: IRIS, member: "MoreChat")
  @join__unionMember(graph: IRIS, member: "MoreLogin")
  @join__unionMember(graph: IRIS, member: "MoreLogout")
  @join__unionMember(graph: IRIS, member: "MoreCiscoWiFi")
  @join__unionMember(graph: IRIS, member: "MoreDeleteAccount")
  @join__unionMember(graph: IRIS, member: "MoreLinkRewardsBanner")
  @join__unionMember(graph: IRIS, member: "BroadcastBanner")
  @join__unionMember(graph: IRIS, member: "MoreEReceipts")
  @join__unionMember(graph: IRIS, member: "MoreReceiptPreferences")
  @join__unionMember(graph: IRIS, member: "MoreOnlineShopping")
  @join__unionMember(graph: IRIS, member: "MoreExplainingValue")
  @join__unionMember(graph: IRIS, member: "MoreFoodTracker")
  @join__unionMember(graph: IRIS, member: "BasicInsetAlert")
 = MoreRewardsCard | MoreActivateRewardsCard | MoreName | MoreScanAndGo | MoreFindAStore | MoreRewards | MoreOrders | MoreNotifications | MoreDeliveryUnlimited | MoreLink | MoreChat | MoreLogin | MoreLogout | MoreCiscoWiFi | MoreDeleteAccount | MoreLinkRewardsBanner | BroadcastBanner | MoreEReceipts | MoreReceiptPreferences | MoreOnlineShopping | MoreExplainingValue | MoreFoodTracker | BasicInsetAlert

type MoreFindAStore
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
}

type MoreFoodTracker
  @join__type(graph: IRIS)
{
  title: String!
  url: String
}

type MoreLink
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  url: String
}

type MoreLinkRewardsBanner
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  url: String
  analyticsLabel: String
}

type MoreLogin
  @join__type(graph: IRIS)
{
  text: String!
}

type MoreLogout
  @join__type(graph: IRIS)
{
  title: String!
}

type MoreName
  @join__type(graph: IRIS)
{
  text: String!
}

type MoreNotifications
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
}

type MoreOnlineShopping
  @join__type(graph: IRIS)
{
  title: String!
  url: String
}

type MoreOrders
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
}

type MoreReceiptPreferences
  @join__type(graph: IRIS)
{
  title: String!
  url: String
}

type MoreRewards
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
}

"""More screen Rewards Card details tile"""
type MoreRewardsCard
  @join__type(graph: IRIS)
{
  """Rewards card number"""
  cardNumber: String!

  """Can be unlinked from shopper account"""
  canBeUnlinked: Boolean!

  """Rewards state"""
  rewardsState: String!
}

type MoreScanAndGo
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
}

"""Multi buy price that will be used by Apps after Project Slade phase 2"""
type MultiBuyPriceInfo
  @join__type(graph: IRIS)
{
  """Multi buy price for BMSM products"""
  price: String!

  """
  Unit Price for BMSM products.
  Optional - to handle scenarios where unit price is not available.
  """
  unitPrice: String
}

"""Non EDR member buy more save more product promotion info"""
type MultiBuyPromotionInfo
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  isApplied: Boolean!
}

type Mutation
  @join__type(graph: IRIS)
{
  saveAddress(address: AddressInput!): Address
  deleteAddress(id: Int!): Boolean
  boostEdrOffer(offerId: String!, linkedEdrHashCrn: String!): BoostEdrOfferResponse!

  """Allows to toggle DeliveryNow window ON and OFF"""
  deliveryNowMode(isSelected: Boolean!, windowId: Int!, pickupStoreId: Int!, mode: Mode!): DeliveryNowModeMutationResponse!
  deliveryUnlimitedSubscribeSubmission(submissionInput: DeliveryUnlimitedSubscribeSubmissionInput!): DeliveryUnlimitedSubscribeSubmissionResponse!
  updateFoodTrackerConsent(consentStatus: Boolean!): FoodTrackerConsentStatus
  clearFulfilmentWindowState: ClearFulfilmentWindowStateResultSuccess
  setFulfilmentWindow(
    """id of the selected slot"""
    windowId: Int!

    """window date"""
    windowDate: String!

    """
    windowOption for fulfilment type. Currently only supported by the NZ app
    """
    windowOption: FulfilmentWindowSlotSelectionOptionId
  ): SetFulfilmentWindowResultSuccess
  createList(listInput: CreateListInput!): List!
  editList(listId: ID!, editListInput: EditListInput!): EditListResponse!
  deleteList(listId: ID!): ID!
  syncLists(syncListsInput: SyncListsInput): SyncListsResponse!
  syncListItems(syncListItemsInput: SyncListItemsInput!): SyncListItemsResponse!
  mapGuestListToOwner(guestId: ID!): MapGuestListToOwner!

  """Allows to select one of the shopping mode variants"""
  setShoppingMode(
    """Which shopping mode to select, determined by an ID"""
    id: ID!

    """The Store ID for In-store mode"""
    storeId: ID

    """The Store Address ID for Pick up mode"""
    storeAddressId: ID

    """Position of the customer to display distance"""
    geoLocation: GeoLocation
  ): SetShoppingModeResponse!
  orderCheckIn(orderId: ID!, checkInType: CheckInType!, bayNumberChoice: String): PickupCheckInResponse!
  orderCheckInOnMyWay(orderCheckInOnMyWayInput: OrderCheckInOnMyWayInput!): PickupCheckInResponse!
  updatePickupOrderLocation(pickupOrderLocationUpdateInput: PickupOrderLocationUpdateInput!): PickupOrderLocationUpdateResponse
  updatePreference(id: String!, value: Boolean!, supportedToggles: [String!]): Preferences
  boostTagProductOffers(offerIds: [ID]!): BoostTagProductOffersResponse
  updateProductReviewProductQuantities(updateProductReviewProductQuantitiesInput: UpdateProductReviewProductQuantitiesInput!): ProductReviewResult!
  updateSubstitutionPreferences(preferences: UserSubstitutionPreferencesInput!): UpdateSubstitutionPreferencesResponse!

  """
  Mutation to submit a product review. It takes a submitProductReviewInput object as input
  and returns a SubmitProductReviewResponse object.
  """
  submitProductReview(submitProductReviewInput: SubmitProductReviewInput!): SubmitProductReviewResponse!
  dismissBottomSheet(
    """
    Unique identifier for the bottom banner to dismiss (in this case __typename)
    """
    id: ID!
  ): DismissBottomSheetResultSuccess

  """
  Allows to select one of the shopping mode variants
  
  Usage:
  ```graphql
  mutation($shoppingModeId: ShoppingModeId!) {
  
    selectShoppingMode(id: $shoppingModeId) {
      isSuccess
      shoppingModes: {
        ... on ShoppingMode {
          __typename
        }
      }
    }
  }
  ```
  """
  selectShoppingMode(
    """Which shopping mode to select, determined by an ID"""
    id: ShoppingModeId!

    """
    address id is sentfor pickup mode only
    address id that corresponds to pickup instore address id or driveup store address id
    Trader can identify driveup or instore based on address id alone
    Store id will switch the mode to default instore mode and hence address id is needed
    """
    pickupAddressId: String
  ): ShoppingModeMutationResponse!

  """
  Submit checkout survey
  
  Usage:
  ```graphql
  submitCheckoutSurvey(
    surveyId: "checkout-v1",
    responseId: "abcd-1234",
    questionId: "checkout-v1-q1-nps",
    orderNumber: "1234",
    response: "10",
    comment: "looks great!",
    device: {
      deviceModel: "iPhone 12",
      deviceVendor: "Apple",
      operatingSystem: "IOS 14",
      screenResolution: "1920x150",
      screenResolutionInCm: "190x15",
      usableScreenResolution: "1920x150",
      usableScreenResolutionInCm: "190x15"
      phoneNetworkRetailer: "vodafone",
      mobileSignalStrength: "4g",
      storageSpaceAvailable: "1GB",
      appVersion: "21.13",
      locationData: "100.00,200.00"
    }
  )
  
  ```
  """
  submitCheckoutSurvey(surveyId: ID!, responseId: ID!, questionId: ID!, orderNumber: String!, response: String, comment: String, device: DeviceInfo): Boolean!
  clearCart: CartResponse!

  """Update the quantity of products that are in cart"""
  updateCartProductQuantities(updateCartProductQuantitiesInput: UpdateCartProductQuantitiesInput!): CartProductQuantitiesUpdatedResponse!
  initiateIdVerification: IdVerificationInitResponse!
  completeIdVerification(completeIdVerificationInput: CompleteIdVerificationInput!): IdVerificationCompleteResponse!
  applyCheckoutCredit(
    """An array of credit codes"""
    creditCodes: [String!]!
  ): ApplyCheckoutCreditResponse!
  removeCheckoutCredit(
    """An array of credit codes"""
    creditCodes: [String!]!
  ): RemoveCheckoutCreditResponse!

  """Save credit card to user account"""
  linkCreditCard(checkoutSessionId: String!): LinkCreditCardResponse!
  addGiftCard(addGiftCardInput: AddGiftCardInput!): AddGiftCardResponse!
  unlinkCreditCard(creditCardId: String!): UnlinkCreditCardResponse!
  unlinkGiftCard(giftCardId: String!): UnlinkGiftCardResponse!
  unlinkPayPal(payPalId: String!): UnlinkPayPalResponse!

  """Note: this mutation is non-functional"""
  pay(paymentInput: PaymentInput!): WpayPaymentResponse!

  """Apply promo code"""
  applyCheckoutPromoCode(
    """value = promotion code"""
    promoCode: String!
    replace: Boolean = false
  ): ApplyCheckoutPromoCodeResponse!

  """Remove promo codes"""
  removeCheckoutPromoCode(promoCodes: [String!]!): RemoveCheckoutPromoCodeResponse!

  """Remove products  in review screen"""
  removeUnavailableProducts(
    """id of the selected mode"""
    productIds: [Int!]!
  ): CheckoutReviewProductContent @deprecated(reason: "Feature replaced with product restrictions")

  """Update product quantity in review screen"""
  updateReviewProducts(
    """list of products to update"""
    products: [ReviewProductUpdateInput!]!
  ): CheckoutReviewProductContent @deprecated(reason: "Feature replaced with product restrictions")

  """Redeem rewards dollars"""
  payWithRewardsDollar(amount: Int): CheckoutContent

  """
  Get Terms and conditions for deleting account in shop app
  Apple Store requirements to provide an option to
  delete within apps required starting January 31
  https://developer.apple.com/news/?id=mdkbobfo
  """
  deleteAccount: DeleteAccountMutationResponse!
  cancelOrder(orderId: ID!): CancelOrderResponse!
  editOrderDriverInstructions(editOrderDriverInstructionsInput: EditOrderDriverInstructionsInput!): EditOrderDriverInstructionsResponse!
  toggleOrderLeaveUnattended(toggleOrderLeaveUnattendedInput: ToggleOrderLeaveUnattendedInput!): ToggleOrderLeaveUnattendedResponse!

  """
  Submit driver Rating survey
  
  Usage:
  ```graphql
  submitDriverRatingSurvey(
    surveyId: "driver-rating-v1",
    orderNumber: "123",
    starRating: "1",
    comment: "The packaging was damaged upon arrival",
    selectedChips: ["instructions_not_followed", "late_delivery"],
  )
  
  ```
  """
  submitDriverRatingSurvey(surveyId: ID!, orderNumber: String!, starRating: String!, comment: String, selectedChips: [String]): SubmitDriverRatingResponse!
  toggleRecipeSave(input: ToggleRecipeSaveInput): RecipeSaveInfo

  """Update the collection mode"""
  updateCollectionMode(
    """id of the selected mode"""
    modeId: CollectionModeId!

    """address Id"""
    addressId: Int!
  ): CheckoutContent

  """Update the delivery preference: selfIsolation toggle"""
  updatePreferenceSelfIsolation(
    """value of the toggle"""
    value: Boolean!
  ): CheckoutContent

  """Update the delivery preference: leaveUnattended toggle"""
  updatePreferenceLeaveUnattended(
    """value of the toggle"""
    value: Boolean!
  ): CheckoutContent

  """Update the delivery preference: delivery instruction toggle"""
  updatePreferenceInstruction(
    """text of the input"""
    value: String!
  ): CheckoutContent

  """Update nominated recipient name"""
  updateNominatedRecipient(
    """text of the input"""
    value: String!
  ): CheckoutContent

  """Update the fulfilment window selection"""
  updateFulfilmentWindow(
    """id of the selected slot"""
    windowId: Int!

    """window date"""
    windowDate: String!
  ): CheckoutContent

  """Update packaging preferences"""
  updatePackagingPreferences(
    """id of the selected packaging option"""
    packagingId: Int!
  ): CheckoutContent

  """Update Campaign OptIn"""
  updateCampaignOptIn(
    """campaign Id"""
    id: Int!

    """toggle value whether optIn"""
    value: Boolean!
  ): CheckoutContent

  """Update product instruction"""
  updateProductInstruction(
    """stock code"""
    productId: String!

    """Quantity"""
    quantity: Float!

    """Instruction text"""
    text: String!
  ): CheckoutContent

  """Remove product"""
  removeProduct(
    """stock code"""
    productId: String!
  ): CheckoutContent
  updateSubstitutions(
    """stock code"""
    products: [CheckoutSubstitutionInput!]!
  ): CheckoutContent

  """
  Add promotion code
  Returns checkout summary page
  """
  addPromotionCode(
    """value = promotion code"""
    value: String!
  ): CheckoutContent @deprecated(reason: "Deprecated. Use new applyCheckoutPromoCode mutation.")

  """
  Remove promotion code
  removes all promotion codes applied
  Returns checkout summary page
  """
  removePromotionCode: CheckoutContent

  """
  Add promotion code
  Returns products review page
  """
  addPromoCode(
    """value code of promotion"""
    value: String!
  ): CheckoutContent @deprecated(reason: "Deprecated since version 23.11. Use new addPromotionCode mutation.")

  """
  Remove promotion code
  Returns products review page
  """
  removePromoCode: CheckoutContent @deprecated(reason: "Deprecated since version 23.11. Use new addPromotionCode mutation. ")
  setEditOrderStatus(setEditOrderStatusInput: SetEditOrderStatusInput!): SetEditOrderStatusResponse!
}

type MyAccountBusinessDetails
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  rowItems: [CoreRowUI!]!
}

type MyAccountContactDetails
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  rowItems: [CoreRowUI!]!
}

union MyAccountFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "MyAccountPersonalDetails")
  @join__unionMember(graph: IRIS, member: "MyAccountBusinessDetails")
  @join__unionMember(graph: IRIS, member: "MyAccountContactDetails")
  @join__unionMember(graph: IRIS, member: "MyAccountPreferences")
  @join__unionMember(graph: IRIS, member: "MyAccountFooter")
 = MyAccountPersonalDetails | MyAccountBusinessDetails | MyAccountContactDetails | MyAccountPreferences | MyAccountFooter

type MyAccountFooter
  @join__type(graph: IRIS)
{
  button: Button!
}

type MyAccountPersonalDetails
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  rowItems: [CoreRowUI!]!
}

type MyAccountPreferences
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  rowItems: [CoreRowUI!]!
}

type MyGroceriesProductListBadge
  @join__type(graph: IRIS)
{
  myGroceriesProductListBadgeType: MyGroceriesProductListBadgeType!
  myGroceriesProductListBadgeLabel: String!
}

enum MyGroceriesProductListBadgeType
  @join__type(graph: IRIS)
{
  SUPPLIED @join__enumValue(graph: IRIS)
  OUTOFSTOCK @join__enumValue(graph: IRIS)
  SUBSTITUTED @join__enumValue(graph: IRIS)
  TOTAL @join__enumValue(graph: IRIS)
}

"""Type to show Instore Homepage My Lists"""
type MyShoppingLists
  @join__type(graph: IRIS)
{
  myListTitle: String!
  myListSubtitle: String
  myListActionTitle: String
  myListDeepLink: String
}

"""An actionable item in HorizontalList with Circular Image and title"""
type NavRoundel
  @join__type(graph: IRIS)
{
  """Nav roundel component id"""
  navRoundelId: String

  """
  The URL of the 1:1 image displayed in the card. Must be a valid URL and is non-nullable.
  """
  navRoundelImageUrl: String!

  """If provided, this title will be displayed below the image."""
  navRoundelTitle: String

  """
  If provided, the whole roundel will perform the attached action when tapped
  """
  navRoundelAction: Action
}

type NCCta
  @join__type(graph: IRIS)
{
  label: String!
  url: String!
}

type NCMessage
  @join__type(graph: IRIS)
{
  """Id of the notification message"""
  id: ID!

  """campaignCode derived from swrve campaign"""
  campaignCode: String!
  campaignVariant: String
  title: String
  body: String
  cta: NCCta

  """ttl expiry(ISO 8601 timestamp with timezone) of the notification in db"""
  ttl: String!

  """ISO 8601 timestamp with timezone"""
  createdOn: String!
}

"""
Union type representing different types of node content
Currently only supports HorizontalList
"""
union NodeContent
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "HorizontalList")
 = HorizontalList

"""Input type for fetching node content"""
input NodeInput
  @join__type(graph: IRIS)
{
  """
  Required nodeId: currently we support format: productsByIds|123,456,789
  """
  nodeId: String!

  """Required shopping mode type (e.g., delivery, pickup)"""
  mode: ShoppingModeType!

  """Optional store identifier"""
  storeId: String

  """
  List of supported actions for this node
  Must be non-null array of non-null strings
  """
  supportedActions: [String!]!

  """
  List of supported links for this node
  Must be non-null array of non-null strings
  """
  supportedLinks: [String!]!
}

type OfferCard
  @join__type(graph: IRIS)
{
  """
  Base Analytics fields which will be used by HorizontalList.
  * extraContent (key & value) - Used to send offer details to Tealium
  """
  offerCardAnalytics: Analytics

  """Offer tile main image URL, expected 4:3 ratio"""
  offerCardImageUrl: String!

  """Offer tile title"""
  offerCardTitle: String!

  """Offer tile description"""
  offerCardDescription: String

  """Offer tile action"""
  offerCardAction: Action

  """
  Offer tile deeplink
  can support app local later if required; i.e. com.woolworths.shop://local/openBottomSheet?id=bottomSheet1
  """
  offerCardDeepLink: String @deprecated(reason: "Use offerCardAction")

  """Offer tile badge image URL with text"""
  offerCardBadgeImage: ImageWithAlt

  """Offer tile text colour"""
  offerCardTextColor: OfferCardTextColor!

  """
  Offer tile text background colour
  hex RGB color, e.g. #000000
  """
  offerCardTextBackgroundColor: String!

  """Offer tile price information"""
  offerCardPriceInfo: OfferCardPriceInfo

  """Offer tile price variant"""
  offerCardVariant: OfferCardVariants
}

type OfferCardPriceInfo
  @join__type(graph: IRIS)
{
  """The dollar part of the price"""
  offerCardPriceInfoPriceDollars: String

  """The cent part of the price"""
  offerCardPriceInfoPriceCents: String

  """
  The first line of prefix text for the price information
  e.g. ANY 2
  """
  offerCardPriceInfoPrefix1: String

  """
  The second line of prefix text for the price information
  e.g. FOR
  """
  offerCardPriceInfoPrefix2: String

  """
  The suffix for the price information
  e.g. ea
  """
  offerCardPriceInfoSuffix: String
}

enum OfferCardTextColor
  @join__type(graph: IRIS)
{
  LIGHT @join__enumValue(graph: IRIS)
  DARK @join__enumValue(graph: IRIS)
}

"""offercard variants defined in AEM"""
enum OfferCardVariants
  @join__type(graph: IRIS)
{
  SPECIALS @join__enumValue(graph: IRIS)
  GENERIC @join__enumValue(graph: IRIS)
  EVERYDAYMARKET @join__enumValue(graph: IRIS)
  LOWPRICE @join__enumValue(graph: IRIS)
  CUSTOMCOLOR @join__enumValue(graph: IRIS)
  IMAGEONLY @join__enumValue(graph: IRIS)
}

type OnMyWayPreferences
  @join__type(graph: IRIS)
{
  """Title for the ETA slider modal"""
  title: String!

  """Subtitle/description for the ETA slider modal"""
  subtitle: String!

  """Selectable ETA values"""
  eta: [String!]!

  """Unit of time for the ETA values, such as 'min'"""
  etaType: String!

  """0-based index of the default/initial eta value to be used"""
  etaDefaultIndex: Int!

  """Confirm ETA selection"""
  confirmButton: Button!
}

interface Order
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  status: OrderStatus
  id: ID!
  total: String!
  date: String!
  timeLabel: String!
  timeValue: String!
}

type OrderAnalytics
  @join__type(graph: IRIS)
{
  woolworthsOrderCount: Int!
  marketplaceOrderCount: Int!
}

"""Renders in OrderCard"""
type OrderCard
  @join__type(graph: IRIS)
{
  """e.g. 'Ready for collection'"""
  title: String!

  """e.g. 'PICKUP - IN STORE #123454'"""
  subtitle: String!

  """The status of the order"""
  status: OrderStatus!

  """e.g. 12345"""
  orderCardId: Int!

  """e.g. '$400.00'"""
  total: String!

  """e.g. 'Collect between'"""
  timeLabel: String!

  """e.g. '4:00 am - 8:00 am')"""
  timeValue: String!

  """e.g. 'Today, 24 March'"""
  date: String!

  """Banner indicating a change in the order fulfilment"""
  fulfilmentStatusBanner: FulfilmentStatusBanner

  """Action for when card is clicked"""
  orderCardAction: Action!
}

"""Displays if user has items in order list"""
type OrderCardList
  @join__type(graph: IRIS)
{
  """'My Orders'"""
  title: String!

  """'View and track your orders'"""
  subtitle: String

  """OrderCard List"""
  items: [OrderCard]!

  """If items displays 'See all'"""
  actionTitle: String

  """/orders"""
  actionPath: String
}

input OrderCheckInOnMyWayInput
  @join__type(graph: IRIS)
{
  """Id of the order associated with the on my way checkin"""
  orderId: ID!

  """ETA selected by shopper"""
  onMyWayEta: String

  """Position of the customer"""
  geoLocation: GeoLocation
}

type OrderCollectionDetails
  @join__type(graph: IRIS)
{
  fulfillmentLabel: String!
  fulfillmentType: String!
  actionTitle: String
  parkingDetails: OrderCollectionParkingDetails
}

type OrderCollectionParkingDetails
  @join__type(graph: IRIS)
{
  parkingMapUrl: String
  parkingDirections: [String!]!
}

type OrderConfirmationBannerImage
  @join__type(graph: IRIS)
{
  imageUrl: String!
  altText: String!
}

type OrderConfirmationCMOBroadcastBanner
  @join__type(graph: IRIS)
{
  banner: BroadcastBanner
}

type OrderConfirmationContent
  @join__type(graph: IRIS)
{
  content: [OrderConfirmationContentSegment!]!
  buttonTitle: String
  orderInfo: OrderInfo!
}

union OrderConfirmationContentSegment
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "OrderConfirmationBannerImage")
  @join__unionMember(graph: IRIS, member: "IconTextBanner")
  @join__unionMember(graph: IRIS, member: "OrderConfirmationHeader")
  @join__unionMember(graph: IRIS, member: "CheckoutOrderAddresses")
  @join__unionMember(graph: IRIS, member: "CheckoutOrderSummary")
  @join__unionMember(graph: IRIS, member: "OrderConfirmationFooterText")
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "GoogleAdBannerCard")
  @join__unionMember(graph: IRIS, member: "UniversalInventoryContainer")
  @join__unionMember(graph: IRIS, member: "OrderConfirmationCMOBroadcastBanner")
 = OrderConfirmationBannerImage | IconTextBanner | OrderConfirmationHeader | CheckoutOrderAddresses | CheckoutOrderSummary | OrderConfirmationFooterText | ActionableCard | GoogleAdBannerCard | UniversalInventoryContainer | OrderConfirmationCMOBroadcastBanner

type OrderConfirmationFooterText
  @join__type(graph: IRIS)
{
  text: String!
}

type OrderConfirmationHeader
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  order: [CheckoutOrderTotalDetailsRow!]!
}

type OrderDetails
  @join__type(graph: IRIS)
{
  title: String! @deprecated(reason: "OrderDetails no longer used by FE from 22.15 once OTC v1 is toggled on")
  items: [OrderDetailsItem!]! @deprecated(reason: "OrderDetails no longer used by FE from 22.15 once OTC v1 is toggled on")
}

"""Instructs the UI to insert a horizontal divider"""
type OrderDetailsDivider
  @join__type(graph: IRIS)
{
  _: Boolean
}

type OrderDetailsItem
  @join__type(graph: IRIS)
{
  icon: String!
  title: String!
  subtitle: String!
  type: OrderDetailsItemType
}

enum OrderDetailsItemType
  @join__type(graph: IRIS)
{
  ORDER_NUMBER @join__enumValue(graph: IRIS)
  ADDRESS @join__enumValue(graph: IRIS)
  TIME_OF_DELIVERY @join__enumValue(graph: IRIS)
}

type OrderDetailsProductCard
  @join__type(graph: IRIS)
{
  stockcode: Int!
  name: String!
  imagePath: String!
  quantity: Float!
  salesPrice: String!
  pricePerUnit: String
}

type OrderDetailsStatus
  @join__type(graph: IRIS)
{
  status: OrderStatusType!
  label: String!
}

type OrderDetailSummary
  @join__type(graph: IRIS)
{
  orderNumber: String!
  orderedDate: String!
}

type OrderFulfilmentDetails implements OrderFulfilmentSection
  @join__implements(graph: IRIS, interface: "OrderFulfilmentSection")
  @join__type(graph: IRIS)
{
  _: Boolean
  title: String! @deprecated(reason: "use new fields instead")
  items: [OrderDetailsItem!]!
  fulfilmentItems: [OrderDetailsItem!]!
  deliveryInstructions: DeliveryInstructions
}

interface OrderFulfilmentSection
  @join__type(graph: IRIS)
{
  _: Boolean
}

enum OrderFulfilmentType
  @join__type(graph: IRIS)
{
  """Order Query Service did not return a valid fulfilment type"""
  Unknown @join__enumValue(graph: IRIS)

  """In-store pickup"""
  Pickup @join__enumValue(graph: IRIS)

  """Direct to boot"""
  DriveUp @join__enumValue(graph: IRIS)

  """Fleet delivery"""
  Courier @join__enumValue(graph: IRIS)

  """Delivery now"""
  Express @join__enumValue(graph: IRIS)

  """Partner/point to point delivery"""
  Crowd @join__enumValue(graph: IRIS)

  """Direct To Boot Now"""
  DTBNow @join__enumValue(graph: IRIS)
}

type OrderHelp
  @join__type(graph: IRIS)
{
  items: [OrderHelpItem!]!
  helpItems: [OrderHelpItem!]
  helpTitle: String
  imageUrl: String
  contactTimes: OrderHelpContactTimes
  title: String @deprecated(reason: "Use OrderHelp.items.title instead")
  chatTitle: String! @deprecated(reason: "Use OrderHelp.items.subtitle instead")
  chatUrl: String! @deprecated(reason: "Use OrderHelp.items.url instead")
  faqTitle: String! @deprecated(reason: "Use OrderHelp.items.subtitle instead")
  faqUrl: String! @deprecated(reason: "Use OrderHelp.items.url instead")
}

type OrderHelpContactTimes
  @join__type(graph: IRIS)
{
  title: String!
  subTitle: String!
  contactItems: [ContactItem!]!
}

type OrderHelpItem
  @join__type(graph: IRIS)
{
  iconUrl: String!
  title: String!
  subtitle: String!
  url: String
  itemType: OrderHelpItemType!
}

enum OrderHelpItemType
  @join__type(graph: IRIS)
{
  FAQ @join__enumValue(graph: IRIS)
  CHAT @join__enumValue(graph: IRIS)
  CALL_US @join__enumValue(graph: IRIS)
}

"""Display list of historical orders"""
type OrderHorizontalList implements HorizontalListBase & BaseNode
  @join__implements(graph: IRIS, interface: "HorizontalListBase")
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  actionTitle: String
  deepLink: String
  items: [HorizontalListItem!]!
  nodeId: String
}

type OrderInfo
  @join__type(graph: IRIS)
{
  productsInfo: [CheckoutProductInfo!]!
  isDeliveryNow: Boolean!
  isDirectToBootNow: Boolean!
  isDeliveryUnlimited: Boolean!
  shopperID: String!
  orderNumber: String!
  orderTotal: String!
  deliveryFee: String!
  deliveryCity: String!
  deliveryMethod: String!
  isCrowdSourced: Boolean!
  packagingFeeLabel: String!
  hasRewards: Boolean!
  orderDiscount: String!
  subtotal: String!
  rewardsCreditsUsed: String!
  fulfilmentMethod: String!
  isEditedOrder: Boolean!
  orderReference: String!
  appliedCoupons: [String!]!
  rewardsDollarsAmount: String!
  storeCreditAmount: String!
  promoCodeCreditAmount: String!
  discountSavingsTotal: String!
  storeCreditCode: String!
  promoCodeValue: String!
}

union OrderInvoice
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "OrderInvoiceDetail")
  @join__unionMember(graph: IRIS, member: "OrderInvoiceError")
 = OrderInvoiceDetail | OrderInvoiceError

type OrderInvoiceDetail
  @join__type(graph: IRIS)
{
  url: String!
}

type OrderInvoiceError
  @join__type(graph: IRIS)
{
  message: String!
  reason: InvoiceErrorReason!
}

type OrderNumberDetails
  @join__type(graph: IRIS)
{
  title: String!
  orderNumber: String!
}

type OrderOverview implements OrderOverviewSection
  @join__implements(graph: IRIS, interface: "OrderOverviewSection")
  @join__type(graph: IRIS)
{
  insetBanner: InsetBanner @deprecated(reason: "use PastOrderOverview.insetBanner instead")
  orderDetailsStatus: OrderDetailsStatus! @deprecated(reason: "use PastOrderOverview.orderDetailsStatus instead")
  orderTime: OrderTime @deprecated(reason: "use PastOrderOverview.orderTime instead")
  orderDetailSummary: OrderDetailSummary @deprecated(reason: "use PastOrderOverview.orderDetailSummary instead")
  editOrderButton: Button @deprecated(reason: "use PastOrderOverview.changeOrderButton instead")
  cancelButton: Button @deprecated(reason: "use PastOrderOverview.cancelOrderButton instead")
  changeOrderButton: Button @deprecated(reason: "use PastOrderOverview.changeOrderButton instead")
  cancelOrderButton: Button @deprecated(reason: "use PastOrderOverview.cancelOrderButton instead")
  viewInvoiceButton: Button @deprecated(reason: "use PastOrderOverview.viewInvoiceButton instead")
}

interface OrderOverviewSection
  @join__type(graph: IRIS)
{
  changeOrderButton: Button
  cancelOrderButton: Button
}

type OrderPaymentDetails
  @join__type(graph: IRIS)
{
  total: [OrderPaymentDetailsItem!]!
  subTotal: [OrderPaymentDetailsItem]!
  marketSubtotal: [OrderPaymentDetailsItem]!
  savings: [OrderPaymentDetailsItem]!
  paymentMethods: [OrderPaymentDetailsItem!]!
  discounts: [OrderPaymentDetailsItem]!
  savingsAndRewards: [OrderPaymentDetailsItem]!
  refunds: [OrderPaymentDetailsItem]!
  refundTotal: [OrderPaymentDetailsItem]!
  disclaimer: String
}

type OrderPaymentDetailsItem
  @join__type(graph: IRIS)
{
  title: String!
  amount: String!

  """icon displayed at the left"""
  icon: String

  """icon displayed next to the amount"""
  amountIcon: String

  """Style of the amount text"""
  amountStyle: OrderPaymentDetailsItemAmountStyle
}

enum OrderPaymentDetailsItemAmountStyle
  @join__type(graph: IRIS)
{
  PLAIN @join__enumValue(graph: IRIS)
  ALWAYS @join__enumValue(graph: IRIS)
  REWARDS @join__enumValue(graph: IRIS)
}

type OrderProductList
  @join__type(graph: IRIS)
{
  filter: OrderProductListFulfilmentFilter
  countLabel: String!
  feed: [OrderProductListFeedItem]!
  totalLabel: String!
  totalValue: String!
  paymentDetails: OrderPaymentDetails!
  help: OrderHelp
}

union OrderProductListFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "OrderProductListFulfilmentStatus")
  @join__unionMember(graph: IRIS, member: "OrderProductListProductCategory")
  @join__unionMember(graph: IRIS, member: "OrderProductListProduct")
  @join__unionMember(graph: IRIS, member: "BroadcastBanner")
 = OrderProductListFulfilmentStatus | OrderProductListProductCategory | OrderProductListProduct | BroadcastBanner

type OrderProductListFulfilmentFilter
  @join__type(graph: IRIS)
{
  items: [OrderProductListFulfilmentFilterItem!]!
}

type OrderProductListFulfilmentFilterItem
  @join__type(graph: IRIS)
{
  key: String!
  title: String!
  isApplied: Boolean!
  count: Int!
}

type OrderProductListFulfilmentStatus
  @join__type(graph: IRIS)
{
  title: String!
  message: String
}

type OrderProductListProduct
  @join__type(graph: IRIS)
{
  productId: String!
  name: String!
  productImage: String
  quantityTitle: String!
  quantityValue: String!
  priceLabel: String!
  priceStyle: OrderProductListProductPriceStyle!
  substitutions: [OrderProductListSubstitutedProduct!]!
}

type OrderProductListProductCategory
  @join__type(graph: IRIS)
{
  title: String!
}

enum OrderProductListProductPriceStyle
  @join__type(graph: IRIS)
{
  PLAIN @join__enumValue(graph: IRIS)
  ALWAYS @join__enumValue(graph: IRIS)
}

type OrderProductListSubstitutedProduct
  @join__type(graph: IRIS)
{
  productLabel: String!
  productId: String!
  productImage: String
  productName: String!
  title: String! @deprecated(reason: "This field will no longer be used in the refreshed UI")
  priceLabel: String!
  priceMatchedLabel: String!
  priceMatched: Boolean!
  quantityTitle: String!
  quantityValue: String!
  showRating: Boolean!
}

type OrderProofOfDeliveryDetails
  @join__type(graph: IRIS)
{
  insetBanner: InsetBanner
  title: String!
  imageUrl: String
  footnote: String
}

type OrderRewardsSummary
  @join__type(graph: IRIS)
{
  points: String!
  cardNumber: String!
  firstName: String!
  lastName: String!
  email: String!
}

type Orders
  @join__type(graph: IRIS)
{
  totalItemCount: Int!
  nextPage: Int
  feed: [OrdersFeedItem!]
  message: OrdersMessage
}

union OrdersFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PickUpOrder")
  @join__unionMember(graph: IRIS, member: "DeliveryOrder")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "CompactOrder")
 = PickUpOrder | DeliveryOrder | InsetBanner | CompactOrder

type OrdersMessage
  @join__type(graph: IRIS)
{
  title: String!
  message: String!
}

"""The status of the order"""
enum OrderStatus
  @join__type(graph: IRIS)
{
  PENDING @join__enumValue(graph: IRIS)
  READY @join__enumValue(graph: IRIS)
  COMPLETE @join__enumValue(graph: IRIS)
  CANCELLED @join__enumValue(graph: IRIS)
}

enum OrderStatusType
  @join__type(graph: IRIS)
{
  PENDING @join__enumValue(graph: IRIS)
  READY @join__enumValue(graph: IRIS)
  COMPLETE @join__enumValue(graph: IRIS)
  CANCELLED @join__enumValue(graph: IRIS)
}

type OrderStoreDetails
  @join__type(graph: IRIS)
{
  storeName: String!
  storeAddress: String!
  actionPath: String
}

enum OrderSubtitleIcon
  @join__type(graph: IRIS)
{
  NONE @join__enumValue(graph: IRIS)
  WARNING @join__enumValue(graph: IRIS)
}

type OrderSummary
  @join__type(graph: IRIS)
{
  orderId: Int!
  feed: Feed!
  cancelWarning: CancelWarning!
  editOrderWarning: EditOrderWarning!
  help: OrderHelp
  status: OrderStatusType!
  fulfilmentMethod: OrderFulfilmentType!

  """Progress of the order that aligns with the process stepper"""
  progress: String!

  """Delivery Step"""
  progressDetail: String!
  showDelightAnimation: Boolean!
}

type OrderTime
  @join__type(graph: IRIS)
{
  title: String!
  time: String!
  day: String!
}

enum OrderType
  @join__type(graph: IRIS)
{
  CURRENT @join__enumValue(graph: IRIS)
  PAST @join__enumValue(graph: IRIS)
}

"""Animation over components"""
type OverlayAnimation
  @join__type(graph: IRIS)
{
  """
  source can be url to lottie json file or resource Id with in mobile app.
  """
  source: String!

  """number of times the animation should be played, 0 means infinite."""
  playCount: Int!
}

"""
Page cover component is used to surface branding and lifestyle images on key landing pages
refer to https://woolworthsdigital.atlassian.net/wiki/spaces/WoolworthsX/pages/26258408435/Page+Cover+component
"""
type PageCover
  @join__type(graph: IRIS)
{
  """Represents the format of the page cover component"""
  pageCoverContentFormat: PageCoverContentFormat!

  """Represents alignment of title, caption and logos"""
  pageCoverContentAlignment: PageCoverContentAlignment!

  """Represents the page cover background color, title and body copy color."""
  pageCoverContentTheme: CoreColorTheme!

  """Represents the primary image"""
  pageCoverPrimaryImage: ImageWithAlt

  """Represents image position"""
  pageCoverPrimaryImagePosition: PageCoverImagePosition

  """Represents logo images"""
  pageCoverLogos: [ImageWithAlt!]

  """Represents the title and subtitle"""
  pageCoverTitle: String

  """Represents the title text size"""
  pageCoverTitleSize: PageCoverTitleTextSize

  """Represents the subtitle"""
  pageCoverSubTitle: String
}

enum PageCoverContentAlignment
  @join__type(graph: IRIS)
{
  LEFT @join__enumValue(graph: IRIS)
  CENTER @join__enumValue(graph: IRIS)
}

enum PageCoverContentFormat
  @join__type(graph: IRIS)
{
  CONTENT_BLOCK_AND_IMAGE @join__enumValue(graph: IRIS)
  LOCKUP_AND_IMAGE @join__enumValue(graph: IRIS)
  CONTENT_BLOCK_ONLY @join__enumValue(graph: IRIS)
  LOCKUP_ONLY @join__enumValue(graph: IRIS)
}

enum PageCoverImagePosition
  @join__type(graph: IRIS)
{
  TOP @join__enumValue(graph: IRIS)
  BOTTOM @join__enumValue(graph: IRIS)
}

enum PageCoverTitleTextSize
  @join__type(graph: IRIS)
{
  LARGE @join__enumValue(graph: IRIS)
  SMALL @join__enumValue(graph: IRIS)
}

type ParagraphTextItem
  @join__type(graph: IRIS)
{
  paragraphTextItemId: String
  content: String!
  type: ParagraphTextItemType!
}

enum ParagraphTextItemType
  @join__type(graph: IRIS)
{
  BODY @join__enumValue(graph: IRIS)
  CAPTION @join__enumValue(graph: IRIS)
}

type PastOrderOverview implements OrderOverviewSection
  @join__implements(graph: IRIS, interface: "OrderOverviewSection")
  @join__type(graph: IRIS)
{
  insetBanner: InsetBanner
  orderDetailsStatus: OrderDetailsStatus!
  orderTime: OrderTime
  orderDetailSummary: OrderDetailSummary
  changeOrderButton: Button
  cancelOrderButton: Button
  viewInvoiceButton: Button
  instructionsMd: String
  helpMd: String
}

type PastPickupOrderFulfilmentDetails implements OrderFulfilmentSection
  @join__implements(graph: IRIS, interface: "OrderFulfilmentSection")
  @join__type(graph: IRIS)
{
  _: Boolean
  fulfilmentItems: [OrderDetailsItem!]!
  title: String!
}

"""Represents a shop event"""
type PastshopEvent
  @join__type(graph: IRIS)
{
  """
  Unique id of a Past Shop event, if no Id, means "Everything I've ever bought" cell
  """
  id: Int

  """Unique id of purchase history representing past shops events"""
  basketID: String

  """Pastshop title"""
  title: String!
}

"""A paginated list of pastshops events"""
type PastshopList
  @join__type(graph: IRIS)
{
  """Represents total sum of pastshop events"""
  totalItemCount: Int!

  """Points to next page in response. Null if not page available."""
  nextPage: Int

  """Represent a list of pastshop event."""
  items: [PastshopEvent!]!
}

input Payment
  @join__type(graph: IRIS)
{
  """Amount to pay in cents"""
  amount: Int!
  type: PaymentType!
  id: String
  number: String
  pin: String
  tokenData: String
}

input PaymentInput
  @join__type(graph: IRIS)
{
  payments: [Payment!]!
  deviceFingerprintId: String
  idempotencyKey: String!
}

type PaymentInstrumentResponseSuccess
  @join__type(graph: IRIS)
{
  giftCardSection: GiftCardSection!
  paymentMethodSection: PaymentMethodSection!
  paymentInstrumentTotalDetails: PaymentInstrumentTotalDetails!
  snackBarMessage: String
  footerMessageMd: String
  analytics: [Analytics!]!
}

type PaymentInstrumentResponseValidationFailure
  @join__type(graph: IRIS)
{
  errorMessage: String!
  errorTitle: String!
  impressionAnalytics: Analytics
}

input PaymentInstrumentsInput
  @join__type(graph: IRIS)
{
  """Checkout session IDs, only for newly added temporary cards"""
  checkoutSessions: [ID!]!

  """
  used for:
    - temporary CC (checkoutSessionId)
    - saved CC (paymentMethodId)
    - linked paypal account(paymentMethodId)
    - Apple Pay (APPLE_PAY)
    - Google Pay (GOOGLE_PAY)
  """
  selectedId: ID
  unlinkedGiftcards: [UnlinkedGiftCardInput!]!
  linkedGiftcards: [LinkedGiftCardInput!]!
}

union PaymentInstrumentsResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PaymentInstrumentResponseSuccess")
  @join__unionMember(graph: IRIS, member: "PaymentInstrumentResponseValidationFailure")
 = PaymentInstrumentResponseSuccess | PaymentInstrumentResponseValidationFailure

type PaymentInstrumentTotalDetails
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  buttonTitle: String! @deprecated(reason: "Use button instead")
  buttonEnabled: Boolean! @deprecated(reason: "Use button instead")
  button: PlaceOrderButton!
}

union PaymentMethodItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AddCreditCard")
  @join__unionMember(graph: IRIS, member: "LinkedCreditCard")
  @join__unionMember(graph: IRIS, member: "UnlinkedCreditCard")
  @join__unionMember(graph: IRIS, member: "ExpiredCreditCard")
  @join__unionMember(graph: IRIS, member: "AddPayPal")
  @join__unionMember(graph: IRIS, member: "LinkedPayPal")
  @join__unionMember(graph: IRIS, member: "GooglePay")
  @join__unionMember(graph: IRIS, member: "ApplePay")
 = AddCreditCard | LinkedCreditCard | UnlinkedCreditCard | ExpiredCreditCard | AddPayPal | LinkedPayPal | GooglePay | ApplePay

type PaymentMethodSection
  @join__type(graph: IRIS)
{
  title: String!
  paymentMethods: [PaymentMethodItem!]!
}

type PaymentSummarySection
  @join__type(graph: IRIS)
{
  title: String!
  previousTotalTitle: String!
  previousTotalValue: String!
  changedOrderTotalTitle: String!
  changedOrderTotalValue: String!
  balancePaymentTitle: String!
  balancePaymentSubtitle: String!
  balancePaymentValue: String!
}

enum PaymentType
  @join__type(graph: IRIS)
{
  GIFT_CARD @join__enumValue(graph: IRIS)
  CREDIT_CARD @join__enumValue(graph: IRIS)
  PAYPAL @join__enumValue(graph: IRIS)
  APPLE_PAY @join__enumValue(graph: IRIS)
  GOOGLE_PAY @join__enumValue(graph: IRIS)
}

type PickupCheckInResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  message: String
  reason: String
}

type PickupInstructions
  @join__type(graph: IRIS)
{
  markdownInfo: String
  checkIn15mins: ButtonState
  checkInNow: ButtonState
  shouldHideCheckInButtons: Boolean
  withPickupService: Boolean!
  banner: InsetBanner @deprecated(reason: "No longer used by FE from 22.15 once OTC v1 is toggled on")
  bannerV2: InsetBanner
  bayNumberPreferences: BayNumberPreferences
}

enum PickupLocationComponent
  @join__type(graph: IRIS)
{
  """
  FE asks for UI component that is tied to state when location tracking ON
  """
  LOCATION_TRACKING_STARTED @join__enumValue(graph: IRIS)

  """
  FE asks for UI component that is tied to state when location tracking OFF
  """
  LOCATION_TRACKING_STOPPED @join__enumValue(graph: IRIS)
}

type PickUpOrder implements Order
  @join__implements(graph: IRIS, interface: "Order")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String!
  status: OrderStatus
  id: ID!
  total: String!
  timeLabel: String!
  timeValue: String!
  date: String!
  actionTitle: String!
  actionPath: String!
  withPickupService: Boolean!
  checkIn15mins: PickUpOrderButtonState @deprecated(reason: "Check-in buttons no longer used starting from OTC v1")
  checkInNow: PickUpOrderButtonState @deprecated(reason: "Check-in buttons no longer used starting from OTC v1 ")
  banner: InsetBanner
}

enum PickUpOrderButtonState
  @join__type(graph: IRIS)
{
  ENABLED @join__enumValue(graph: IRIS)
  DISABLED @join__enumValue(graph: IRIS)
}

input PickupOrderLocationUpdateInput
  @join__type(graph: IRIS)
{
  """Id of the order associated with the on my way checkin"""
  orderId: ID!

  """
  latitude - horizontal lines that measure distance north or south of the equator
  """
  latitude: Float!

  """
  longitude - vertical lines that measure east or west of the meridian in Greenwich, England
  """
  longitude: Float!
}

type PickupOrderLocationUpdateResponse
  @join__type(graph: IRIS)
{
  """Id of the order associated with the on my way checkin"""
  orderId: ID!

  """
  Flag to indicate location tracking can be stopped as the order is either collected/cancelled or store is closed 
  """
  stopLocationTracking: Boolean!

  """Travel time of customer in seconds provided by pickup service"""
  travelTimeInSec: Int!

  """
  Buffer time of 900 seconds to added to travel time for location tracking duration
  """
  bufferTimeInSec: Int!
}

type PickupStore
  @join__type(graph: IRIS)
{
  storeNumber: Int
  description: String
  addressText: String
  area: String
  distance: Float
  pickUpType: [PickUpType]
  supportedCollectionTypes: [String]
}

type PickUpType
  @join__type(graph: IRIS)
{
  addressId: Int
  shoppingModeId: String
  type: String
  label: String
  text: String
}

type Pill
  @join__type(graph: IRIS)
{
  pillText: String!
  pillAction: Action!
}

union PlaceOrderButton
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PlaceOrderButtonDefault")
  @join__unionMember(graph: IRIS, member: "PlaceOrderButtonApplePay")
  @join__unionMember(graph: IRIS, member: "PlaceOrderButtonGooglePay")
 = PlaceOrderButtonDefault | PlaceOrderButtonApplePay | PlaceOrderButtonGooglePay

type PlaceOrderButtonApplePay
  @join__type(graph: IRIS)
{
  supportedNetworks: [String!]!
  analytics: Analytics!
}

type PlaceOrderButtonDefault
  @join__type(graph: IRIS)
{
  label: String!
  isEnabled: Boolean!
  analytics: Analytics!
}

type PlaceOrderButtonGooglePay
  @join__type(graph: IRIS)
{
  supportedNetworks: [String!]!
  analytics: Analytics!
}

type PopupMessage
  @join__type(graph: IRIS)
{
  messageTitle: String
  messageDescription: String
  messageCtaLabel: String
}

type PreferenceAnalytics
  @join__type(graph: IRIS)
{
  label: String!
}

union PreferenceItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PreferenceToggleGroup")
  @join__unionMember(graph: IRIS, member: "PreferenceText")
 = PreferenceToggleGroup | PreferenceText

type Preferences
  @join__type(graph: IRIS)
{
  title: String
  details: [PreferenceItem!]!
}

type PreferenceText
  @join__type(graph: IRIS)
{
  body: String!
  altText: String
}

type PreferenceToggle
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  value: Boolean!
  id: ID!
  analytics: PreferenceAnalytics!
  iconUrl: String
  altText: String
  preview: PreviewContent
  footer: String
}

type PreferenceToggleGroup
  @join__type(graph: IRIS)
{
  groupTitle: String
  description: String
  toggles: [PreferenceToggle!]!
}

type PreviewContent
  @join__type(graph: IRIS)
{
  badge: String
  entries: [PreviewImageItem!]!
  footer: String
}

type PreviewImageItem
  @join__type(graph: IRIS)
{
  imageUrl: String!
  altText: String
}

"""Pricing information with exact value"""
type Price
  @join__type(graph: IRIS)
{
  """Printable price text"""
  text: String!

  """Raw numeric exact price"""
  value: Int!

  """Price suffix (e.g `*`)"""
  suffix: String
}

"""Pricing information with [min, max] range"""
type PriceRange
  @join__type(graph: IRIS)
{
  """Printable price text"""
  text: String!

  """Raw numeric min price"""
  min: Int!

  """Raw numeric max price"""
  max: Int!

  """Price suffix (e.g `*`)"""
  suffix: String
}

"""ProductCard contains high level information on a particular product"""
type ProductCard
  @join__type(graph: IRIS)
{
  """A unique id that can be used to lookup product details."""
  productId: String!

  """The name of the product."""
  name: String!

  """A url pointing to image stored in Adobe target."""
  productImage: String

  """
  Availability is calculated by determining if product is inStock **and** inRange.
  """
  isAvailable: Boolean!

  """Product availability with message and display information"""
  inStoreAvailabilityInfo: InStoreAvailabilityInfo

  """
  Used to verify whether a product has restrictions for specific types of users.
  E.G.: Tobacco and Alcohol products cannot be added to the cart if the user is a GUEST
  or UNDER 18 years of age.
  """
  purchaseRestriction: PurchaseRestriction

  """
  New products are tagged with isNew and this drives the "new" prefix added to the product tile. TBC duration of tag is 28 days.
  """
  isNew: Boolean!

  """Price including GST * 100 to avoid floating point issues."""
  price: Int

  """
  Refers to the description of single unit e.g. "each", "per kilo", "per 100ml". Relates to CUP (Carton Unit Price) in apigee.
  """
  unitPriceDescription: String

  """
  Drives the roundel badge on the product image. URL points to sitemanagement for online mode and azure blog for instore mode.
  """
  badgeImage: String

  """
  Will be DEPRECATED: Points to `promotionInfo` in response(after it is updated for all APIs). e.g. "Save $1 amount" text to appear in promotion badge.
  """
  promotionValue: String @deprecated(reason: "Use `promotionInfo` after it is updated for all APIs.")

  """
  Will be DEPRECATED: Points to `promotionInfo` in response(after it is updated for all APIs). Drives the styling of promotion badge.
  """
  promotionType: String @deprecated(reason: "Use `promotionInfo` after it is updated for all APIs.")

  """
  Drives the styling and text to appear in promotion badge.
  This field needs to be updated for all products related APIs, Currently it is updated only for product details API.
  """
  promotionInfo: ProductPromotionInfo

  """
  When something is on special e.g. 1/2 price, this is the original price.
  """
  wasPrice: String

  """
  Warning to customer on the product list e.g. "Bakery items"  has pm restriction "must be purchased before midday". Also applies to Tobacco + liquor + Chilled Items etc.
  """
  purchaseWarning: String

  """
  List contains the product quantity meta data which is used to add product to list
  """
  list: ProductShoppingList!

  """
  Only available if mode is ONLINE or PICKUP. Represents the items currently added to users shopping cart.
  """
  trolley: ProductTrolley

  """
  Represents the quantity or weight option and increments when adding the items to cart.
  Currently only used for NZ
  """
  trolleys: [ProductTrolley!]

  """Only available if mode is INSTORE."""
  inStoreDetails: ProductInStoreDetails @deprecated(reason: "Use `inStoreLocation.displayInfo` instead")

  """Product location info only available if mode is INSTORE."""
  inStoreLocation: InStoreLocationInfo

  """Price for multi buy labelling"""
  multiBuyPrice: String @deprecated(reason: "Use `multiBuyPriceInfo` as this field will be used for app versions prior to Project Slade Phase 1 and this field will hold information related to multi buy price label and Member Price for single-sell prodcts, BMSM products.")

  """
  Price for multi buy labelling that will be used after Project Slade Phase 2
  """
  multiBuyPriceInfo: MultiBuyPriceInfo

  """Member pricing"""
  memberPricingType: MemberPricingType @deprecated(reason: "Use `memberPriceInfo`. This field was introduced as part of Project Slade Phase 1 to add styling to Member Price for BMSM products")

  """
  Member Pricing for BMSM, Products without promotions that will be used after Project Slade Phase 2
  """
  memberPriceInfo: MemberPriceInfo

  """Unit price for multi buy labelling"""
  multiBuyUnitPrice: String @deprecated(reason: "Use `multiBuyPriceInfo` as this field will be used for app versions prior to Project Slade Phase 1 and this field will hold information related to multi buy price label and Member Price for single-sell prodcts, BMSM products.")

  """Drives the "new" pr "sponsored" prefix added to the product tile."""
  inlineLabels: [ProductInlineLabel]

  """Ad id for sponsored products. Used for client side tracking"""
  adId: String

  """Contains additional info if for a marketplace product"""
  marketplace: ProductListMarketplace

  """Contains rewards Offer info"""
  rewardsOfferInfo: RewardsOfferInfo

  """Contains info for rendering extra label"""
  tagLabel: TagLabel

  """Contains disclaimer text"""
  disclaimer: String

  """Multi-variant products"""
  productVarieties: ProductVarieties

  """Product Categories"""
  categories: [ProductCategoryItem!]

  """Product source"""
  source: String

  """Indicates if the product is a tobacco product"""
  isTobacco: Boolean!

  """Is the product excluded from substitution"""
  isExcludedFromSubstitution: Boolean

  """Additional fields on cart product(initially used for analytics)"""
  cartProductInfo: CartProductInfo

  """
  Base Analytics fields which will (initially) be used by HorizontalList.
  * extraContent (key & value) - Used to send product details to Tealium
  """
  productCardAnalytics: Analytics

  """If provided, the product card will perform the action when tapped"""
  productCardAction: Action

  """
  If provided, the product card will use this to display unit of measurement (e.g. kg/ea)
  Currently only used for NZ
  """
  unitOfMeasureLabel: String

  """Pricing foot note for the product cards"""
  pricingFootnoteMd: String
}

type ProductCategories
  @join__type(graph: IRIS)
{
  headerTitle: String!
  totalNumberOfCategories: Int!
  level: Int!
  categories: [CategoryMenuItem!]
  marketplace: MarketplaceCategoriesInfo!
}

type ProductCategoryItem
  @join__type(graph: IRIS)
{
  name: String
  categoryLevel: Int
}

type ProductCategoryTile
  @join__type(graph: IRIS)
{
  """When user tap a tile"""
  productCategoryTileAction: Action!

  """Category Image (Absolute URL)"""
  productCategoryTileImageUrl: String!

  """Category label"""
  productCategoryTileLabel: String!

  """Category Tile Size (default: DEFAULT)"""
  productCategoryTileSize: ProductCategoryTileSize
}

enum ProductCategoryTileSize
  @join__type(graph: IRIS)
{
  DEFAULT @join__enumValue(graph: IRIS)
  LARGE @join__enumValue(graph: IRIS)
}

type ProductDetails
  @join__type(graph: IRIS)
{
  feed: [ProductDetailsFeedItem!]!
  imageList: [ProductImage]!
}

type ProductDetailsCoreRow
  @join__type(graph: IRIS)
{
  """To include a divider or separator at the top of the section"""
  hasTopSeparator: Boolean!

  """
  List of different UI components to be displayed for Market Place section
  """
  rowDetails: ProductDetailsCoreRowDetails!
}

union ProductDetailsCoreRowDetails
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "BasicCoreRow")
  @join__unionMember(graph: IRIS, member: "CoreRowUI")
 = BasicCoreRow | CoreRowUI

type ProductDetailsCouponBanner
  @join__type(graph: IRIS)
{
  productDetailsCouponBanner: CouponBanner
}

union ProductDetailsFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "CouponBanner")
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "ProductNutritionInfo")
  @join__unionMember(graph: IRIS, member: "ProductOriginAndHealthInfo")
  @join__unionMember(graph: IRIS, member: "ProductRatingsAndReviewsSummary")
  @join__unionMember(graph: IRIS, member: "ImageContent")
  @join__unionMember(graph: IRIS, member: "FormattedContent")
  @join__unionMember(graph: IRIS, member: "FormattedBanner")
  @join__unionMember(graph: IRIS, member: "ProductDisclaimer")
  @join__unionMember(graph: IRIS, member: "HealthierHorizontalList")
  @join__unionMember(graph: IRIS, member: "ProductHorizontalList")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "PromotionBanner")
  @join__unionMember(graph: IRIS, member: "ProductDetailsMarketplace")
  @join__unionMember(graph: IRIS, member: "DividerCard")
  @join__unionMember(graph: IRIS, member: "Footer")
 = ActionableCard | CouponBanner | ProductCard | ProductNutritionInfo | ProductOriginAndHealthInfo | ProductRatingsAndReviewsSummary | ImageContent | FormattedContent | FormattedBanner | ProductDisclaimer | HealthierHorizontalList | ProductHorizontalList | InsetBanner | PromotionBanner | ProductDetailsMarketplace | DividerCard | Footer

type ProductDetailsImages
  @join__type(graph: IRIS)
{
  """A list of images representing the product"""
  productImages: [ProductImage!]!

  """A list of roundel images associated with the product"""
  roundelImages: [RoundelImage!]!
}

"""Additional info for marketplace product details"""
type ProductDetailsMarketplace
  @join__type(graph: IRIS)
{
  imageUrl: String!
  title: String!
  dispatchNote: String!
  sellerName: String!
  brandName: String!
  channel: ProductListChannelType!
  facet: ProductListFacetType!
  info: InfoSection
  bottomSheet: MarketplaceEducationBottomSheet
}

type ProductDetailsPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Different metadata that may be displayed on top/above
  the scrollable area.
  """
  header: ProductDetailsPageHeader

  """
  List of different ui components. To be displayed in
  the main scrollable area of the Page
  """
  items: [GenericPageFeedItem]!

  """
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics
  footer: ProductDetailsPageFooter

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type ProductDetailsPageFooter
  @join__type(graph: IRIS)
{
  footerMessage: TextWithAlt
  productDetailsActions: [Button!]!
}

type ProductDetailsPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """represents page title"""
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

input ProductDetailsPageInput
  @join__type(graph: IRIS)
{
  productId: String
  barcode: String
  barcodeType: BarcodeType

  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  Represents the store id. *e.g. "1550"*.
  Required if mode is INSTORE
  """
  storeId: String

  """
  List of app action that the client supports. This ensures
  that app actions coming out of this response works for the client
  ie. ["openbottomsheet"]
  """
  supportedActions: [String!]!

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]!

  """MarketplaceShippingInfo param, which will only required by edm product"""
  marketplaceShippingInfo: MarketplaceShippingInfo
}

type ProductDetailsProductPanel
  @join__type(graph: IRIS)
{
  """Summary of ratings and reviews for the product"""
  ratingsAndReviewsSummary: ProductRatingsAndReviewsSummary

  """Detailed information about the product"""
  product: ProductCard!
}

type ProductDetailsRatingsAndReviewsPreview
  @join__type(graph: IRIS)
{
  """Preview of ratings and reviews for the product"""
  ratingsAndReviewsPreview: RatingsAndReviewsPreviewResponse
}

type ProductDetailsRowAccordion
  @join__type(graph: IRIS)
{
  """Analytics for accordion component open action"""
  openActionAnalytics: Analytics

  """Analytics for accordion component close action"""
  closeActionAnalytics: Analytics

  """Core DS Row Component"""
  rowUI: CoreRowUI!

  """Indicates whether the accordion row is expanded"""
  isExpanded: Boolean!

  """To include a divider or separator at the top of the component"""
  hasTopSeparator: Boolean!

  """Content displayed when the accordion row is expanded"""
  expandedContent: ProductDetailsRowAccordionExpandedContent!
}

union ProductDetailsRowAccordionExpandedContent
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ParagraphTextItem")
  @join__unionMember(graph: IRIS, member: "ProductDetailsRowAccordionProductList")
 = ParagraphTextItem | ProductDetailsRowAccordionProductList

type ProductDetailsRowAccordionProductList
  @join__type(graph: IRIS)
{
  productDetailsRowAccordionProductListTextItem: ParagraphTextItem!
  productDetailsRowAccordionProductListCta: ContentCta!
  productDetailsRowAccordionProductList: HorizontalList
}

type ProductDetailsRowLink
  @join__type(graph: IRIS)
{
  """Core DS Row Component"""
  rowUI: CoreRowUI!

  """To include a divider or separator at the top of the component"""
  hasTopSeparator: Boolean!

  """
  Content linked to the row, can be either a paragraph text item or nutrition info
  """
  linkContent: ProductDetailsRowUILinkContent!

  """Analytics for accordion component open action"""
  openActionAnalytics: Analytics
}

union ProductDetailsRowUILinkContent
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "InfoSection")
  @join__unionMember(graph: IRIS, member: "ParagraphTextItem")
  @join__unionMember(graph: IRIS, member: "ProductNutritionInfo")
 = InfoSection | ParagraphTextItem | ProductNutritionInfo

type ProductDisclaimer
  @join__type(graph: IRIS)
{
  content: String!
}

"""A list of product filters."""
type ProductFilter
  @join__type(graph: IRIS)
{
  """
  Represents the name of the filter which should be used as a key while applying the filters.
  """
  headerKey: String!

  """Represents the display name of the filter."""
  headerTitle: String!

  """Represent the list of filters available. Default is []."""
  filterItems: [FilterMenuItem!]!

  """Represents the information or the warning message about the filter."""
  banner: InsetBanner
}

"""A list of product filters."""
input ProductFilterOption
  @join__type(graph: IRIS)
{
  """Represents the header type/key of the filter."""
  type: String!

  """
  Represent the list of filter values/keys to be filtered with in specific filter type.
  """
  values: [String!]!
}

"""Filter switch"""
type ProductFilterSwitch
  @join__type(graph: IRIS)
{
  """
  Represents the key of the switch option which should be used while selecting the switch option .
  """
  key: String!

  """
  Represents the value of the switch option *e.g. "Include Marketplace items".
  """
  title: String!

  """Represents the ordering or more description of the switch option."""
  subtitle: String

  """Represents the icon in front of switch ."""
  imageUrl: String

  """Represent whether the switch option is on or off."""
  value: Boolean!

  """Represent a optional button such as "Learn more"."""
  buttonCta: ContentCta
}

type ProductHeroCard
  @join__type(graph: IRIS)
{
  productHeroCardProduct: ProductCard!
}

"""Display list of contextual products"""
type ProductHorizontalList implements HorizontalListBase & BaseNode
  @join__implements(graph: IRIS, interface: "HorizontalListBase")
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  actionTitle: String
  deepLink: String
  items: [HorizontalListItem!]!
  nodeId: String
}

type ProductImage
  @join__type(graph: IRIS)
{
  smallUrl: String
  mediumUrl: String
  largeUrl: String
  altText: String

  """analytics for image gallery thumbnail click"""
  imageGalleryThumbnailClickAnalytics: Analytics

  """analytics for product details thumbnail click"""
  productDetailsThumbnailClickAnalytics: Analytics

  """analytics for image gallery click"""
  imageGalleryClickAnalytics: Analytics

  """analytics for image gallery scroll left/right"""
  imageGalleryScrollAnalytics: Analytics

  """analytics for image gallery close"""
  imageGalleryCloseAnalytics: Analytics
}

"""Represents the Sponsored or New badge of the product."""
type ProductInlineLabel
  @join__type(graph: IRIS)
{
  """Represents the type of the label is Sponsored/New."""
  type: String!

  """Represents the text of the label for Sponsored/New products."""
  label: String!

  """Represents the priority of the label."""
  priority: Int
}

"""
Only available when mode is INSTORE. Gives additional instore information on product - deprecated
"""
type ProductInStoreDetails
  @join__type(graph: IRIS)
{
  """
  Represents where in the store the product can be found. *e.g. "Aisle 5"*.
  """
  locationText: String

  """Represents the category of the location."""
  locationType: InStoreLocationType
}

"""Contains product item info in a list"""
input ProductItemInput
  @join__type(graph: IRIS)
{
  productId: String!
  quantity: Float!
  checked: Boolean!
  isAvailable: Boolean!
}

"""A paginated list of products."""
type ProductList
  @join__type(graph: IRIS)
{
  """Represents total sum of products available in database."""
  totalNumberOfProducts: Int

  """Points to next page in response. Null if not page available."""
  nextPage: Int

  """
  DEPRECATED: Points to next page in response. Null if not page available.
  """
  cursor: String @deprecated(reason: "Use `nextPage`.")

  """DEPRECATED: Represent a list of product cards."""
  products: [ProductCard!]! @deprecated(reason: "Use `productsFeed`.")

  """Represents a list of different components to be displayed in screen."""
  productsFeed: [ProductListFeed!]!

  """
  Represents a list of different analytics that may be related to ProductList.
  """
  analytics: [ProductListAnalytics!]

  """Represent a list of product filters."""
  filters: [ProductFilter!]!

  """Represent the list of sort options available. Default is []."""
  sortOptions: [ProductSortOption!]!

  """Optional Inset Banner under sort options on Filter screen"""
  sortOptionsBanner: InsetBanner

  """Represent the filter toggle of whether include marketplace products."""
  marketplaceFilterSwitch: ProductFilterSwitch

  """
  Message to display if the user is not logged in / mismatch of cards / any other custom errors
  """
  customMessages: [CustomMessageFeed!]!
  marketplaceInfo: InfoSection
  marketplaceBottomSheet: MarketplaceEducationBottomSheet
  chips: [Chip!]

  """
  List of facet chips to display. `null` if no facet chips are available.
  """
  facetChips: [Chip!]

  """
  Use as Page Title (Only for dynamic Product Lists where title is not known upfront)
  """
  pageTitle: String

  """Content to show when no products found on initial request"""
  zeroResultContent: ProductListZeroResult
}

"""
DEPRECATED: Being used in productsBySearchAds query.
All ads related objects that may be required in a screen
"""
type ProductListAds
  @join__type(graph: IRIS)
{
  """List of banners on top section of the screen"""
  topBanners: [ProductListItemAdBanner] @deprecated(reason: "Use `productsBySearch.productsFeed` to get the ads associated to a search")
}

"""
Represents a list of different analytics that are related to ProductList.
"""
union ProductListAnalytics
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AdobeTargetAnalytics")
  @join__unionMember(graph: IRIS, member: "GoogleAdForecastingAnalytics")
 = AdobeTargetAnalytics | GoogleAdForecastingAnalytics

enum ProductListChannelType
  @join__type(graph: IRIS)
{
  Marketplace @join__enumValue(graph: IRIS)
  WOW @join__enumValue(graph: IRIS)
}

"""Facet for products search"""
enum ProductListFacetType
  @join__type(graph: IRIS)
{
  Category @join__enumValue(graph: IRIS)
  Brand @join__enumValue(graph: IRIS)
  Seller @join__enumValue(graph: IRIS) @deprecated(reason: "Use Vendor 22.21 onwards")
  Vendor @join__enumValue(graph: IRIS)
}

union ProductListFeed
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "AdobeAdBannerCard")
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "DietaryDisclaimer")
  @join__unionMember(graph: IRIS, member: "GoogleAdBannerCard")
  @join__unionMember(graph: IRIS, member: "WebViewCard")
  @join__unionMember(graph: IRIS, member: "ProductCard")
  @join__unionMember(graph: IRIS, member: "InsetBanner")
  @join__unionMember(graph: IRIS, member: "IngredientCard")
  @join__unionMember(graph: IRIS, member: "ListSectionHeader")
  @join__unionMember(graph: IRIS, member: "ImageTextBanner")
  @join__unionMember(graph: IRIS, member: "UniversalInventoryContainer")
  @join__unionMember(graph: IRIS, member: "VideoAdUnit")
  @join__unionMember(graph: IRIS, member: "MerchCard")
  @join__unionMember(graph: IRIS, member: "HorizontalList")
 = AdobeAdBannerCard | ActionableCard | DietaryDisclaimer | GoogleAdBannerCard | WebViewCard | ProductCard | InsetBanner | IngredientCard | ListSectionHeader | ImageTextBanner | UniversalInventoryContainer | VideoAdUnit | MerchCard | HorizontalList

input ProductListInput
  @join__type(graph: IRIS)
{
  """
  Generic id to query Product List, for example:
    - search
    - searchAlternative
    - category
    - buyAgain
    - haveYouForgotten
  """
  type: String!

  """
  Optional argument used for the searchType, for example:
    - Milk (for search)
    - 1-EFEG84A (for category)
  """
  argument: String

  """
  Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
  """
  storeId: String

  """
  Selected facet chip
  Used for Faceted Search, generally a 3rd level category to narrow list of products
  """
  facetChip: ID

  """State and changes to chips"""
  chips: ChipsProductListInputArgs

  """Apply the list of filter options to the products in the response"""
  filterOptions: [ProductFilterOption]

  """
  Used to filter the products from the list and return only the groceries or include market products
  Default values depends on searchType
  """
  includeMarketProducts: Boolean

  """
  When true, BFF will apply any filters, chips etc pass in arguments field (instead of the input fields)
  """
  initialLoad: Boolean

  """
  Used to determine where paginated response should begin. Defaults to 1.
  """
  pageNumber: Int

  """Used to determine size of paginated response. Defaults to 200."""
  pageSize: Int

  """
  Apply a sorting option to the search result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
  If a sorting option in not supplied, Iris defaults the sort option to a option relevant to searchType.
  """
  sortOption: String

  """Override 'source' value for product card returned"""
  source: String

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]

  """
  Full list of persisted chip ids to be evaluated when initialLoad is true
  This is used to determine if the chip should be selected or not
  """
  persistedChipIds: [String!]
}

type ProductListItem
  @join__type(graph: IRIS)
{
  id: ID!
  productId: String!
  quantity: Float!
  timestamp: Float!
  checked: Boolean!
}

"""Ad banner that comes may come from different sources (e.g. GAM, AEM)"""
union ProductListItemAdBanner
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "GoogleAdBannerCard")
 = GoogleAdBannerCard

"""Additional info for marketplace products"""
type ProductListMarketplace
  @join__type(graph: IRIS)
{
  imageUrl: String!
  title: String!
  sellerName: String!
  brandName: String!
  isFreeShipping: Boolean
  freightAmount: Float
  isUndeliverable: Boolean
  postcode: String
}

type ProductListZeroResult
  @join__type(graph: IRIS)
{
  """e.g. No result found for `<Search Term>`"""
  title: String

  """e.g. Check the spelling or ..."""
  message: String

  """One or more CTA"""
  items: [ProductListZeroResultItem!]!
}

union ProductListZeroResultItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ZeroResultProductCategories")
  @join__unionMember(graph: IRIS, member: "HorizontalList")
 = ZeroResultProductCategories | HorizontalList

type ProductNutritionInfo
  @join__type(graph: IRIS)
{
  title: String!
  servingsPerPack: String!
  servingSize: String!
  servingsHeader: [String!]!
  servingsRow: [String!]!
  bottomCaption: String!
  tableHeaderRow: [String!]!
  tableRows: [[String!]!]!
}

type ProductOriginAndHealthInfo
  @join__type(graph: IRIS)
{
  countryOfOrigin: ImageContent
  healthStarRating: ImageContent
}

"""DEPRECATED (removed by app 22.4)"""
type ProductPromoCard
  @join__type(graph: IRIS)
{
  """'78922'"""
  productId: String @deprecated(reason: "Not used by FE (removed from 22.4 onwards)")

  """
  'https://test.mobile-api.woolworths.com.au/zeus/mnemosyne/v1/public/basicsbox.png',
  """
  image: String @deprecated(reason: "Not used by FE (removed from 22.4 onwards)")

  """'Basics Box'"""
  altText: String @deprecated(reason: "Not used by FE (removed from 22.4 onwards)")

  """Height of card"""
  height: CardHeight! @deprecated(reason: "Not used by FE (removed from 22.4 onwards)")
}

"""
Represents the Product Promotion Details including the Type and Value of the product
"""
type ProductPromotionInfo
  @join__type(graph: IRIS)
{
  """Drives the styling or Type of the promotion badge."""
  type: ProductPromotionTypes!

  """
  Drives the text to appear in the promotion badge. e.g. "Save $1 amount".
  """
  label: String!
}

"""Represents the list of product promotion types"""
enum ProductPromotionTypes
  @join__type(graph: IRIS)
{
  SPECIAL @join__enumValue(graph: IRIS)
  LOW_PRICE @join__enumValue(graph: IRIS)
  PRICE_DROPPED @join__enumValue(graph: IRIS)
  CONTAINER_CREDITS @join__enumValue(graph: IRIS)
  LOWER_SHELF_PRICE @join__enumValue(graph: IRIS)
  LOWER_PRICE @join__enumValue(graph: IRIS)
}

input ProductRatingsAndReviewsDetailsInput
  @join__type(graph: IRIS)
{
  """A unique id represents product"""
  productId: String!

  """Sort by LATEST, HIGHEST_RATING, LOWEST_RATING"""
  sortOption: RatingsReviewSortType = LATEST

  """Used to specify the maximum size of the paginated response."""
  pageSize: Int

  """
  Used to determine where paginated response should begin. Defaults to 0.
  """
  pageNumber: Int

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]
}

input ProductRatingsAndReviewsPreviewInput
  @join__type(graph: IRIS)
{
  """A unique id represents product"""
  productId: String!

  """
  List of deeplink sections that the client supports. This ensures
  that deepLinks coming out of this response works for the client
  """
  supportedLinks: [String!]
}

"""Product Ratings and reviews summary section on product details page"""
type ProductRatingsAndReviewsSummary
  @join__type(graph: IRIS)
{
  """
  Average rating of the product
  e.g. 3.7
  """
  averageRatings: Float!

  """how many stars frontend need to render based on the averageRatings"""
  displayRatings: Float!

  """
  Max rating of the product
  e.g. 5
  """
  maximumRating: Int!

  """Average ratings text of the product"""
  ratingText: TextWithAlt!

  """Call to action for the section"""
  cta: ProductRatingsAndReviewsSummaryCta
}

type ProductRatingsAndReviewsSummaryCta
  @join__type(graph: IRIS)
{
  """
  Text to be displayed on the CTA
  e.g. 41 reviews
  """
  ctaText: TextWithAlt!

  """Defines the action to be taken when the CTA is clicked."""
  action: Action!
}

type ProductReviewAlternative
  @join__type(graph: IRIS)
{
  title: String!

  """Type of product alternatives"""
  type: ProductReviewAlternativeType!
}

type ProductReviewAlternativeInfoBottomSheet implements BottomSheetContent
  @join__implements(graph: IRIS, interface: "BottomSheetContent")
  @join__type(graph: IRIS)
{
  """Title of the bottom sheet"""
  bottomSheetTitle: String!

  """Body of the bottom sheet"""
  bottomSheetBody: String!

  """Null"""
  showOnceOnly: Boolean

  """Null"""
  bannerAsset: DownloadableAsset

  """Primary call to action"""
  primaryCta: ContentCta!

  """Null"""
  secondaryCta: ContentCta

  """Analytics for infoClick icon"""
  infoClickAnalytics: Analytics!
}

input ProductReviewAlternativeInput
  @join__type(graph: IRIS)
{
  """
  Product ID of the unavailable product for which we want to show alternatives
  """
  productId: String!
}

type ProductReviewAlternativeResponse
  @join__type(graph: IRIS)
{
  """The unavailable or restricted product"""
  product: ProductReviewCard!

  """Product alternatives"""
  alternatives: [ProductCard!]!

  """Search hint for the search field"""
  searchHint: String!

  """Title for the alternatives section"""
  alternativesTitle: String

  """Error message"""
  errorMessage: String

  """Error action title"""
  errorActionTitle: String

  """Additional legal information"""
  info: ProductReviewAlternativeInfoBottomSheet!

  """Analytics for alternatives page impression"""
  pageImpressionAnalytics: Analytics!
}

"""
AVAILABLE when products substitutions suggestions available
SEARCH otherwise
"""
enum ProductReviewAlternativeType
  @join__type(graph: IRIS)
{
  AVAILABLE @join__enumValue(graph: IRIS)
  SEARCH @join__enumValue(graph: IRIS)
}

"""
Product review card for cart and checkout products that are restricted or unavailable
"""
type ProductReviewCard
  @join__type(graph: IRIS)
{
  """Product name"""
  title: String!

  """Product stockcode"""
  productId: String!

  """Current quantity in cart"""
  quantity: Float!

  """Product image"""
  imageUrl: String!

  """OOS badge"""
  badge: Badge

  """Quantity information for quantity selector"""
  quantityInfo: CartProductQuantityInfo

  """The total price"""
  price: Int

  """Is the product available (true or false)"""
  isAvailable: Boolean!

  """Product alternatives for restricted or out of stock products"""
  alternative: ProductReviewAlternative

  """The unit price of the product"""
  unitPrice: String

  """New text to display available limit for ATP/Trader limit restrictions"""
  availableLimit: String
}

"""Empty state response, indicating if review is required"""
type ProductReviewEmpty
  @join__type(graph: IRIS)
{
  requiresProductReview: Boolean!
}

type ProductReviewError
  @join__type(graph: IRIS)
{
  """Errors when trying to update products"""
  errors: [UpdateProductReviewProductQuantitiesError!]
}

union ProductReviewFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ProductReviewGroup")
 = ProductReviewGroup

type ProductReviewGroup
  @join__type(graph: IRIS)
{
  banner: InsetBanner!
  type: ProductReviewGroupType!
  products: [ProductReviewCard!]!
  analytics: Analytics!
}

enum ProductReviewGroupType
  @join__type(graph: IRIS)
{
  """everything in here dont have an action"""
  STANDARD @join__enumValue(graph: IRIS)

  """everything in here need to do a time selection"""
  FULFILMENT_WINDOW @join__enumValue(graph: IRIS)
}

input ProductReviewInput
  @join__type(graph: IRIS)
{
  """
  Enum representing which screen calls review products modal
  Contents are different between cart and checkout
  """
  source: ProductReviewSource!
}

input ProductReviewProductQuantityUpdate
  @join__type(graph: IRIS)
{
  """Product stockcode"""
  productId: String!

  """Desired quantity"""
  quantity: Float!
}

type ProductReviewResponse
  @join__type(graph: IRIS)
{
  message: String!
  feed: [ProductReviewFeedItem!]!
  analytics: [Analytics!]!
}

union ProductReviewResult
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ProductReviewResponse")
  @join__unionMember(graph: IRIS, member: "ProductReviewError")
  @join__unionMember(graph: IRIS, member: "ProductReviewEmpty")
 = ProductReviewResponse | ProductReviewError | ProductReviewEmpty

enum ProductReviewSource
  @join__type(graph: IRIS)
{
  CART @join__enumValue(graph: IRIS)
  CHECKOUT @join__enumValue(graph: IRIS)
}

interface ProductRow
  @join__type(graph: IRIS)
{
  title: String!
  productId: String!
  quantity: Float!
  imageUrl: String!
  cartProductInfo: CartProductInfo
}

type ProductSection
  @join__type(graph: IRIS)
{
  """An optional product section id"""
  productSectionId: String

  """
  An optional standalone link to display at the bottom
  of the product section. ie. This can have a deepLink
  allowing the user to view all products.
  """
  productSectionLink: Link

  """
  Sticky header when the full productSection is
  longer than the device
  """
  productSectionTotal: String

  """List of different content to be rendered in the ProductSection"""
  productSectionFeed: [ProductSectionFeedItem]!
}

union ProductSectionFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ProductCard")
 = ProductCard

"""
Represents the Product Quantities which can be added to Customer's shopping list
"""
type ProductShoppingList
  @join__type(graph: IRIS)
{
  """Minimum amount that can be added to list."""
  minimum: Float!

  """Maximum amount that can be added to list."""
  maximum: Float!

  """Increment for adding products to list."""
  increment: Float!

  """
  Default amount to initialize the quantity selector when item is not already added to any list
  """
  default: Float!

  """Measurement used for product."""
  unit: String
}

"""Represents a list of products"""
type ProductsInList
  @join__type(graph: IRIS)
{
  products: [ProductCard!]!
}

"""A list of sort options."""
type ProductSortOption
  @join__type(graph: IRIS)
{
  """
  Represents the key of the sort option which should be used while selecting the sort option .
  """
  key: String!

  """Represents the value of the sort option *e.g. "Price"."""
  title: String!

  """
  Represents the ordering or more description of the sort option  *e.g. "Low to High".
  """
  subtitle: String

  """Represent whether the sort option is applied or not."""
  isApplied: Boolean!
}

type ProductSubstitute
  @join__type(graph: IRIS)
{
  productId: String!
  quantity: Float!
  name: String!
  imageUrl: String!
  isSelected: Boolean!
}

type ProductSubstitutesSection
  @join__type(graph: IRIS)
{
  substitutions: [ProductSubstitute!]
}

type ProductToBeSubstituteSection
  @join__type(graph: IRIS)
{
  name: String!
  productId: String!
  imageUrl: String!
}

"""
Represents the items currently added to users shopping cart. Available if mode is ONLINE or PICKUP.
"""
type ProductTrolley
  @join__type(graph: IRIS)
{
  """Minimum amount that can be added to cart."""
  minimum: Float!

  """Maximum amount that can be added to cart."""
  maximum: Float!

  """Increment for adding products to cart."""
  increment: Float!

  """Default amount of items to be added to cart."""
  default: Float!

  """
  Represents how many products are currently in users cart. Comes from Trader downstream service.
  """
  inTrolley: Float

  """Measurement used for product."""
  unit: String

  """Add/Update/Unavailable determining style of the button"""
  buttonState: String!

  """Add/Update/Unavailable what the text will be on the label."""
  buttonLabel: String!

  """The amount you can add to the cart. e.g. Update "12"."""
  buttonQuantity: String

  """
  Used for displaying quantity or weight option title when adding items to card
  Currently only used for NZ
  """
  title: String
}

type ProductVarieties
  @join__type(graph: IRIS)
{
  totalCount: Int!
  label: String
  priceFamilyId: String!
}

"""Stepper Component"""
type ProgressStepper
  @join__type(graph: IRIS)
{
  """
  Current active step title (e.g., 1. Placed (Order placed), 2. Ready (Ready for collection), Collected etc)
  """
  currentStep: String!

  """Current active step position"""
  currentStepPosition: Int!

  """Current active step type"""
  currentStepType: ProgressStepType!

  """Total steps in the stepper component (e.g., 3)"""
  totalSteps: Int!

  """Number of steps completed (e.g., 1)"""
  completedSteps: Int! @deprecated(reason: "Use currentStepPosition")

  """Show tooltip if true or else tooltip will not be shown"""
  shouldShowToolTip: Boolean! @deprecated(reason: "Use imageName")

  """imageName"""
  imageName: TooltipType
}

enum ProgressStepType
  @join__type(graph: IRIS)
{
  """Completed state - static green bar"""
  DONE @join__enumValue(graph: IRIS)

  """Current state - animated once green bar"""
  LOAD @join__enumValue(graph: IRIS)

  """Current state - animated loop green bar"""
  INPROGRESS @join__enumValue(graph: IRIS)

  """Warning state such as store closed - flashing bar"""
  WARNING @join__enumValue(graph: IRIS)
}

"""Always showing. Drives the product group promotional tile on the FE."""
type PromoCard
  @join__type(graph: IRIS)
{
  """
  The type of content that the card targets on action. This should be used to determine the target screen.
  """
  promotionType: String!

  """The type of content."""
  dataPathType: String!

  """
  The query parameters used when clicking on the card to get the product list from productsByProductGroup.
  """
  queryParameters: QueryParameters!

  """A full URL to the promotional image asset."""
  image: String!

  """
  A description of the image content for accessibility and fallback when an image fails to load.
  """
  title: String!
}

type PromoDiscount
  @join__type(graph: IRIS)
{
  discountItems: [PromoDiscountItem!]!

  """Remove"""
  buttonTitle: String!
}

type PromoDiscountItem
  @join__type(graph: IRIS)
{
  """Promo code name. 5PERCENT etc"""
  title: String!

  """-$5.0"""
  price: String!
}

"""
Can be used to display an inset banner and on click display a content page
eg: Everyday Market shipping promotion, and on click display terms and conditions page
"""
type PromotionBanner
  @join__type(graph: IRIS)
{
  """Banner details"""
  banner: InsetBanner!

  """Content to be displayed on clicking the banner"""
  promotionContent: PromotionContent
}

type PromotionCard
  @join__type(graph: IRIS)
{
  promotionCardProduct: ProductCard!

  """Promotion card offer id"""
  promotionCardOfferId: String
}

union PromotionContent
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "PromotionMarkdownContent")
 = PromotionMarkdownContent

type PromotionDetailsHeader
  @join__type(graph: IRIS)
{
  """Represents the title"""
  promotionDetailsHeaderTitle: String!

  """Color of the title, hex code. e.g. #c45021"""
  promotionDetailsHeaderTitleColor: String

  """Represents the sub title"""
  promotionDetailsHeaderSubtitle: String

  """Represents the image url"""
  promotionDetailsHeaderImage: String
}

type PromotionMarkdownContent
  @join__type(graph: IRIS)
{
  """eg: Terms & Conditions"""
  promotionMarkdownTitle: String!

  """Markdown text"""
  promotionMarkdownText: String!
}

"""Represents a purchase history event"""
type PurchaseHistoryEvent
  @join__type(graph: IRIS)
{
  """
  Unique id of a purchase history event, if no Id, means "Everything I've ever bought" cell
  """
  basketID: ID

  """
  title to represents the date, e.g. "23rd of Feb 2022"
  """
  title: String!
}

"""A paginated list of purchase history events"""
type PurchaseHistoryList
  @join__type(graph: IRIS)
{
  """Represents total sum of purchase history events"""
  totalItemCount: Int!

  """Points to next page in response. Null if not page available."""
  nextPage: Int

  """Represent a list of purchase history event."""
  items: [PurchaseHistoryEvent!]!
}

"""
Purchase restrictions for some types of products.
The default value is NO_RESTRICTIONS, meaning any user can purchase this product
"""
enum PurchaseRestriction
  @join__type(graph: IRIS)
{
  LEGAL_AGE_RESTRICTION @join__enumValue(graph: IRIS)
  NO_RESTRICTION @join__enumValue(graph: IRIS)
}

type Query
  @join__type(graph: CPS)
  @join__type(graph: IRIS)
{
  """Fetches a user by their ID."""
  user(id: ID!): User @join__field(graph: CPS)

  """Fetches all available users."""
  users: [User] @join__field(graph: CPS)

  """Fetches a company by its ID."""
  company(id: ID!): Company @join__field(graph: CPS)

  """Fetches all available companies."""
  companies: [Company] @join__field(graph: CPS)
  getAddresses: [Address] @join__field(graph: IRIS)
  getAddressById(id: Int!): Address @join__field(graph: IRIS)
  searchAddresses(query: String!): [AddressItem] @join__field(graph: IRIS)
  searchSuburbs(postcode: String!): [AddressItem] @join__field(graph: IRIS)
  getPickupStores(input: GetPickupStoresInput): [PickupStore] @join__field(graph: IRIS)

  """DEPRECATED: Get ads by search term"""
  productsBySearchAds(
    """
    Represents the product name. **Must** always be provided *e.g. "milk"*.
    """
    searchTerm: String!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """Used to determine size of paginated response. Defaults to 200."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """
    Apply a sorting option to the search result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
    If a sorting option in not supplied, Iris defaults the sort option to `TraderRelevance`.
    """
    sortOption: String

    """Apply the list of filter options to the search results."""
    filterOptions: [ProductFilterOption]
  ): ProductListAds @join__field(graph: IRIS) @deprecated(reason: "Use `productsBySearch.productsFeed` to get the ads associated to a search")

  """Serves the aem content page that follows generic page standard."""
  aemContentPage(pageType: String!, pagePath: String, contentPageExtraInput: ContentPageExtraInput): AEMContentPage! @join__field(graph: IRIS)
  getAlternativeProducts(getAlternativeProductsInput: GetAlternativeProductsInput!): GetAlternativeProductsResponse @join__field(graph: IRIS)
  _apigee: ApigeeResponse! @join__field(graph: IRIS)
  config(configInput: ConfigInput!): AppConfig! @join__field(graph: IRIS)

  """Serves the article page content."""
  articlePage(articleId: String!): ArticlePage! @join__field(graph: IRIS)

  """Serves the Branded shop content and products."""
  brandedShop(brandedShopInput: BrandedShopInput!): BrandedShopPage! @join__field(graph: IRIS)
  bundles(bundlesInput: BundlesInput!): Bundles! @join__field(graph: IRIS)

  """Get Buy Again Reorder products from DAAS"""
  buyAgainProductList(
    """
    Represents the store id. Optional parameter. When provided, inStoreDetails will be available on ProductCard
    """
    storeId: String

    """
    Represents Rewards card number. Optional parameter.
    Android App sends this information only on version 21.16
    iOS App doesn't send this information at all.
    This field is kept so that it won't break Android version 21.16
    """
    rewardsCardNumber: String

    """
    Represents Shopping mode such as PICKUP, INSTORE, DELIVERY, DELIVERY_NOW
    """
    shoppingMode: ShoppingModeId!

    """State and changes to chips"""
    chips: ChipsProductListInputArgs
  ): BuyAgainProductList! @join__field(graph: IRIS)
  changeMyOrderSummary: ChangeMyOrderSummary! @join__field(graph: IRIS)

  """Checkout details page query"""
  checkout: CheckoutContent @join__field(graph: IRIS)

  """Checkout products page query"""
  checkoutProducts: CheckoutContent @join__field(graph: IRIS)

  """Checkout summary page query"""
  checkoutSummary: CheckoutContent @join__field(graph: IRIS)

  """Serves the content playbook"""
  contentPlaybook(url: String): ContentPlaybookPage @join__field(graph: IRIS)

  """
  Returns a valid deepLink based on the provided `id` (identifier). If no deepLink was found, `null` is returned.
  """
  deepLink(deepLinkInput: DeepLinkInput!): String @join__field(graph: IRIS)
  deliveryUnlimitedSubscribe: DeliveryUnlimitedSubscribe @join__field(graph: IRIS)

  """ Deprecating: See deliveryUnlimitedPayment """
  deliveryUnlimitedSubscribePayment(planId: ID!): DeliveryUnlimitedSubscribePayment! @join__field(graph: IRIS)
  deliveryUnlimitedSubscribeConfirmation: DeliveryUnlimitedSubscribeConfirmation! @join__field(graph: IRIS)

  """ Confirm subscription (payment) screen"""
  deliveryUnlimitedPayment(input: DeliveryUnlimitedPaymentInput!): DeliveryUnlimitedPayment! @join__field(graph: IRIS)

  """Serves the Marketing Landing Page content"""
  dynamicPage(dynamicPageInput: DynamicPageInput!): DynamicPage @join__field(graph: IRIS)

  """
  Fetches content for a specific node based on provided input
  @param nodeInput Required input parameters for fetching node content
  @return Returns the node content which can be of type defined in NodeContent union
  """
  fetchNodeContent(nodeInput: NodeInput!): NodeContent @join__field(graph: IRIS)
  foodTrackerPage(isEDRLinkingEnabled: Boolean, referralCode: String): FoodTrackerPage @join__field(graph: IRIS)
  fulfilmentWindows: CheckoutFulfilmentWindows @join__field(graph: IRIS)
  guidesPage(
    """guides page name, e.g. how-to-reduce-food-waste"""
    guidesPageName: String!
  ): GuidesPage! @join__field(graph: IRIS)

  """Filter products by product group."""
  home(
    """Represents the sales finder store id. *e.g. "1550"*."""
    catalogueStoreId: String

    """Represents the store id. *e.g. "1550"*."""
    storeId: String

    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    mode: ShoppingModeType!

    """Represents the shopper opted for WiFi."""
    isWiFiProfileInstalled: Boolean

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]

    """chatbot session id for getting the number of unread messages"""
    chatbotSessionId: String

    """Represents the consolidated specials flag."""
    isConsolidatedSpecials: Boolean
  ): HomeList @join__field(graph: IRIS)
  homePage(homePageInput: HomePageInput!): HomePage! @join__field(graph: IRIS)
  lastChatbotMsg(
    """
    Represents chatbot session id to get whether there are unread messages.
    """
    chatbotSessionId: String
  ): LastChatbotMsg! @join__field(graph: IRIS)
  lists: [List!]! @join__field(graph: IRIS)
  list(listId: ID!): List @join__field(graph: IRIS)
  listDetails(listDetailsInput: ListDetailsInput!): ListDetailsResponse! @join__field(graph: IRIS)

  """Given a specific list of page names and return related page content"""
  marketplace(
    """input to provide list of page names to return, optional"""
    pageNames: [MarketplaceLandingPageName!]
  ): Marketplace! @join__field(graph: IRIS)
  menuPage(menuPageInput: MenuPageInput!): MenuPage! @join__field(graph: IRIS)

  """Shopping modes screen. App provided storeId for in-store mode"""
  shoppingModeSelector(storeId: ID, geoLocation: GeoLocation): ShoppingModeSelectorResponse! @join__field(graph: IRIS)
  more(
    """Represents the store id. *e.g. "1550"*."""
    storeId: String

    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    mode: ShoppingModeType

    """
    Represents chatbot session id to get whether there are unread messages.
    """
    chatbotSessionId: String
  ): More! @join__field(graph: IRIS)
  accountDetails: AccountDetailsPage! @join__field(graph: IRIS)
  notificationMessages: [NCMessage!]! @join__field(graph: IRIS)
  preferences(key: String, supportedToggles: [String!]): Preferences @join__field(graph: IRIS)
  productDetails(productId: String, barcode: String, barcodeType: BarcodeType, storeId: String, supportedLinks: [String!]): ProductDetails @join__field(graph: IRIS)
  productDetailsPage(productDetailsPageInput: ProductDetailsPageInput!): ProductDetailsPage! @join__field(graph: IRIS)

  """Filter products by product group."""
  productsByProductGroup(
    """
    Represents the product group id. **Must** always be provided *e.g. "25"*.
    """
    groupId: String!

    """
    Represents the unique store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """
    DEPRECATED: Used to determine size of paginated response. Defaults to 200.
    """
    limit: Int

    """
    DEPRECATED: Used to determine where paginated response should begin. Defaults to 1.
    """
    offset: String

    """
    Apply a sorting option to the products result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
    If a sorting option in not supplied, Iris defaults the sort option to `ProductGroupDisplayOrderAsc`.
    """
    sortOption: String

    """
    Apply the list of filter options to the products in the requested product group.
    """
    filterOptions: [ProductFilterOption]

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]

    """product group name for product source"""
    source: String

    """State and changes to chips"""
    chips: ChipsProductListInputArgs
  ): ProductList @join__field(graph: IRIS) @deprecated(reason: "Removed from FE as of Shop App 25.9, remove after next force-upgrade")

  """Filter products by aisle and category"""
  productsByCategory(
    """**Must** be provided. Relates to final category and is an id field."""
    categoryId: String!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """Used to determine size of paginated response. Defaults to 200."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """
    Used to filter the products from the list and return only the special ones
    """
    isSpecial: Boolean @deprecated(reason: "Since Shop App 23.16, use chips instead")

    """
    Used to filter the products from the list and return only the available ones
    """
    excludeUnavailableProducts: Boolean @deprecated(reason: "Since Shop App 23.16, use chips instead")

    """
    Used to filter the products from the list and return only the groceries or include market products
    Default as true
    """
    includeMarketProducts: Boolean = true

    """
    Apply a sorting option to the products result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
    If a sorting option in not supplied, Iris defaults the sort option to `TraderRelevance`.
    """
    sortOption: String

    """
    Apply the list of filter options to the products in the requested category. Todo: Just the contract is added for now. Applying filters ticket is in backlog, will be done later.
    """
    filterOptions: [ProductFilterOption]

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]

    """category navigation path for product source"""
    source: String

    """State and changes to chips"""
    chips: ChipsProductListInputArgs
  ): ProductList @join__field(graph: IRIS)

  """Filter products on special by aisle and category"""
  productsOnSpecialByCategory(
    """**Must** be provided. Relates to final category and is an id field."""
    categoryId: String!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """
    Used to filter the products from the list and return only the available ones
    """
    excludeUnavailableProducts: Boolean @deprecated(reason: "Since Shop App 23.16, use chips instead")

    """
    Used to filter the products from the list and return only the groceries or include market products
    Default as true
    """
    includeMarketProducts: Boolean = true

    """
    Apply a sorting option to the products result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
    If a sorting option in not supplied, Iris defaults the sort option to `TraderRelevance`.
    """
    sortOption: String

    """
    Apply the list of filter options to the products in the requested category. Todo: Just the contract is added for now. Applying filters ticket is in backlog, will be done later.
    """
    filterOptions: [ProductFilterOption]

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]

    """category navigation path for product source"""
    source: String

    """State and changes to chips"""
    chips: ChipsProductListInputArgs
  ): ProductList @join__field(graph: IRIS)

  """
  Filter products by specials group
  @deprecated Removed from FE as of Shop App 25.11, remove after next force-upgrade
  """
  productsBySpecialsGroup(
    """The specials group id."""
    specialsGroup: String!

    """The specials group title."""
    specialsGroupTitle: String

    """The EDR of the rewards card."""
    edr: String

    """HashCrn passed from RewardsApp deeplink"""
    hashCrn: String

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """Used to determine size of paginated response. Defaults to 200."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """
    Used to filter the products from the list and return only the available ones
    """
    excludeUnavailableProducts: Boolean

    """
    Used to filter the products from the list and return only the groceries or include market products
    Default as true
    """
    includeMarketProducts: Boolean = true

    """
    Apply a sorting option to the products result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
    If a sorting option in not supplied, Iris defaults the sort option to `TraderRelevance`.
    """
    sortOption: String

    """
    Apply the list of filter options to the products in the requested special group. Todo: Just the contract is added for now. Applying filters ticket is in backlog, will be done later.
    """
    filterOptions: [ProductFilterOption]

    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    shoppingMode: ShoppingModeType

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]

    """Used for ad targeting"""
    adTargeting: String

    """State and changes to chips"""
    chips: ChipsProductListInputArgs
  ): ProductList @join__field(graph: IRIS) @deprecated(reason: "Removed from FE as of Shop App 25.11, remove after next force-upgrade")

  """Filter products by search term"""
  productsBySearch(
    """
    Represents the product name. **Must** always be provided *e.g. "milk"*.
    """
    searchTerm: String!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """
    Used to filter the products from the list and return only the special ones
    """
    isSpecial: Boolean @deprecated(reason: "Since Shop App 23.16, use chips instead")

    """
    Used to filter the products from the list and return only the available ones
    """
    excludeUnavailableProducts: Boolean @deprecated(reason: "Since Shop App 23.16, use chips instead")

    """
    Used to filter the products from the list and return only the groceries or include market products
    Default as true
    """
    includeMarketProducts: Boolean = true

    """Used to determine size of paginated response. Defaults to 200."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """
    Apply a sorting option to the search result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
    If a sorting option in not supplied, Iris defaults the sort option to `TraderRelevance`.
    """
    sortOption: String

    """Apply the list of filter options to the search results."""
    filterOptions: [ProductFilterOption]

    """
    Set of variables to be passed to every call to Adobe Target Delivery API
    """
    croVariables: CroVariables

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]

    """State and changes to chips"""
    chips: ChipsProductListInputArgs

    """Selected facet chip"""
    facetChip: ID
  ): ProductList @join__field(graph: IRIS)

  """Get ProductCard by productIds"""
  productsByProductIds(
    """Array of unique id that can be used to lookup product details."""
    productIds: [String!]!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """
    Example value is `lists`, then the value is `lists`
    resolver would fill product `source` value as `MySavedLists`
    """
    requestSource: String
  ): ProductsInList @join__field(graph: IRIS)

  """
  Get products for a recipe
  n.b. This will replace the
  """
  productsByRecipe(
    """Required recipe id (slug) field, NOT recipeId (int/guid) field value"""
    recipeId: String!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String

    """Represents the adjusted serves quantity. Optional parameter."""
    servesQuantity: Int
  ): ProductList @join__field(graph: IRIS)

  """
  Get boosted offers products, only those offers with product sku eg. TIGER offers
  Optional rewards hashCrn via deeplink to check for mismatched cards
  """
  productsByRewardsOffers(storeId: String, hashCrn: String, offerStatus: [RewardsOfferStatus!]!): ProductList @join__field(graph: IRIS)

  """Get product varieties by priceFamilyId"""
  productsByPriceFamily(
    """Product price family Id"""
    priceFamilyId: String!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String
  ): ProductList @join__field(graph: IRIS)

  """
  Get the list of HaveYouForgotten products that can appear before going to checkout.
  The query does not always return a result.
  """
  productsByHaveYouForgotten: ProductList @join__field(graph: IRIS)

  """Get the product list based on searchType"""
  productList(productListInput: ProductListInput!): ProductList! @join__field(graph: IRIS)

  """
  Marketplace Query
  
  Returns products for the requested facet-channel eg: marketplace Categories/Brands/Sellers
  """
  productsByFacet(
    """
    **Must** be provided. Field to indicate the specific products request. Possible value is `Marketplace`, `WOW`
    """
    channel: ProductListChannelType!

    """**Must** be provided. Its the facet that is being requested."""
    facet: ProductListFacetType!

    """id of the interested facet."""
    id: String

    """Name of the interested facet."""
    name: String!

    """Used to determine size of paginated response. Defaults to 200."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """
    Apply a sorting option to the products result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g "PriceAsc", "PriceDesc", "Name"
    If a sorting option in not supplied, Iris defaults the sort option to `TraderRelevance`.
    """
    sortOption: String

    """
    Apply the list of filter options to the products in the requested category. Todo: Just the contract is added for now. Applying filters ticket is in backlog, will be done later.
    """
    filterOptions: [ProductFilterOption]

    """category navigation path for product source"""
    source: String
  ): ProductList @join__field(graph: IRIS)
  categoryAndEvents(categoryAndEventsInput: CategoryAndEventsInput!): CategoryAndEventsPage! @join__field(graph: IRIS)
  productCategories(categoryId: String, storeId: String, categoriesType: CategoriesType): ProductCategories @join__field(graph: IRIS)
  specialCategories(storeId: String, rewardsCardNumber: String): SpecialCategories @join__field(graph: IRIS)
  productReview(productReviewInput: ProductReviewInput!): ProductReviewResponse! @join__field(graph: IRIS)
  substitutionPreference(substitutionPreferenceInput: SubstitutionPreferenceInput!): SubstitutionPreferenceResponse! @join__field(graph: IRIS)

  """Get list of pastshop events"""
  pastshopEvent(
    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int
  ): PastshopList @join__field(graph: IRIS)

  """Get list of products for a Past Shop event"""
  purchaseHistory(
    """
    Represents the store id. Optional parameter. When provided, inStoreDetails will be available on ProductCard
    """
    storeId: String

    """Unique id of a Past Shop event, if not provided, will return all"""
    id: Int @deprecated(reason: "Use `basketID` if fetch data from new purchase history API")

    """
    Unique id of a purchase history event, if not provided, will return 'Everything I've ever bought products' from purchase history API
    """
    basketID: ID

    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int
  ): ProductList @join__field(graph: IRIS)

  """Get list of purchase history events"""
  purchaseHistoryEvent(
    """Used to determine size of paginated response."""
    pageSize: Int

    """Used to determine where paginated response should begin."""
    pageNumber: Int
  ): PurchaseHistoryList @join__field(graph: IRIS)

  """Get ratings and reviews details for a product"""
  productRatingsAndReviewsDetails(productRatingsAndReviewsDetailsInput: ProductRatingsAndReviewsDetailsInput!): RatingsAndReviewsDetailsResponse @join__field(graph: IRIS)

  """Product Ratings and reviews preview query"""
  productRatingsAndReviewsPreview(productRatingsAndReviewsPreviewInput: ProductRatingsAndReviewsPreviewInput!): RatingsAndReviewsPreviewResponse @join__field(graph: IRIS)
  writeReviewForm(writeReviewFormInput: WriteReviewFormInput!): WriteReviewFormResponse! @join__field(graph: IRIS)
  receiptDetails(receiptId: String!): ReceiptDetails @join__field(graph: IRIS)
  receipts(pageNumber: Int): ReceiptsList @join__field(graph: IRIS)
  currentShopper: Shopper! @join__field(graph: IRIS)

  """Shopping modes screen"""
  shoppingMode(
    """Which shopping mode to select, determined by an ID"""
    id: ShoppingModeId!
  ): ShoppingModeVariant! @join__field(graph: IRIS)

  """Shopping modes screen"""
  shoppingModes: ShoppingModes! @join__field(graph: IRIS)
  magicLink(linkId: String): WebLink! @join__field(graph: IRIS)
  checkNearbyStoresForProduct(storesForProductInput: StoresForProductInput!): StoreProductAvailabilityList @join__field(graph: IRIS)
  storesByPostcode(postcode: String!, max: Int): StoreList @join__field(graph: IRIS)
  storesByLocation(geoLocation: GeoLocation, max: Int): StoreList @join__field(graph: IRIS)
  storesBySuburb(suburbName: String!, max: Int): SuburbList @join__field(graph: IRIS)
  storeDetails(storeId: String!): StoreDetailCard! @join__field(graph: IRIS)
  subscriptions: SubscriptionsInfo @join__field(graph: IRIS)

  """Get list of suggested list"""
  suggestedListItems(
    """
    Represents the store id. Optional parameter. When provided, inStoreDetails will be available on ProductCard
    """
    storeId: String

    """Unique identifier of the list."""
    id: Int!

    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int
  ): ProductList @join__field(graph: IRIS)

  """Get list of suggested list"""
  suggestedLists(
    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int
  ): SuggestedLists @join__field(graph: IRIS)

  """
  Get the list of questions/survey for online checkout
  
  Usage:
  ```graphql
  checkoutSurvey {
    surveyId
    responseId
    commentText
    commentPrompt
    questions {
      id
      text
      type
    }
  }
  
  ```
  """
  checkoutSurvey(
    """Represents the current shopping mode"""
    mode: ShoppingModeType
  ): CheckoutSurvey @join__field(graph: IRIS)

  """Traffic drivers for search suggestions"""
  trafficDrivers: TrafficDriver! @join__field(graph: IRIS)

  """Serves the video page content."""
  videoPage(videoPageId: String!): VideoPage! @join__field(graph: IRIS)
  voiceSearch(input: String!): VoiceSearchResult @join__field(graph: IRIS)

  """Returns user wxid, and next fetch time"""
  wxidDetails: WXIDDetails! @join__field(graph: IRIS)

  """Get cart details such as products, rewards points, rewards credits etc"""
  cart: CartResponse! @join__field(graph: IRIS)
  cartInfo: CartInfoResponse @join__field(graph: IRIS)
  catalogueBrowse(
    """Represents the store id. *e.g. "1550"*."""
    storeId: String

    """Represents the current shopping mode"""
    mode: ShoppingModeType!

    """
    Used to determine size of paginated response. Defaults to 1.
    Note: when pageSize is "PROMOTION", pageSize will be fixed to 1.
    """
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """Represents the current catalogue Id"""
    catalogueId: String
  ): CatalogueBrowse @join__field(graph: IRIS)
  catalogueHome(
    """
    Represents the Woolworths store id. *e.g. "1550" for Sydney Metcentre*.
    """
    storeId: String

    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    mode: ShoppingModeType!

    """
    SaleFinder catalogue store info passed in so it can be reflected back to the mobile apps
    to achieve server-driven UI
    """
    catalogueHomeSaleFinderStore: CatalogueHomeSaleFinderStore!
  ): CatalogueHome @join__field(graph: IRIS)
  catalogueLanding(
    """Represents the store id. *e.g. "1550"*."""
    storeId: String

    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    mode: ShoppingModeType!

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]
  ): CatalogueLanding @join__field(graph: IRIS)
  catalogueListing(
    """Represents the store id. *e.g. "1550"*."""
    storeId: String

    """Represents the current shopping mode"""
    mode: ShoppingModeType!

    """Represents the category id. *e.g. ["1-E5BEE36E"]*."""
    categoryIds: [String!]

    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """Product source for analytics"""
    requestSource: String
  ): CatalogueListing @join__field(graph: IRIS)
  cataloguePromotionDetails(cataloguePromotionDetailsInput: CataloguePromotionDetailsInput!): CataloguePromotionDetails @join__field(graph: IRIS)
  cataloguePromotionListing(
    """Represents the store id. *e.g. "1550"*."""
    storeId: String

    """Represents the current shopping mode"""
    mode: ShoppingModeType!

    """Used to determine size of paginated response. Defaults to 20."""
    pageSize: Int

    """
    Used to determine where paginated response should begin. Defaults to 1.
    """
    pageNumber: Int

    """Product source for analytics"""
    requestSource: String

    """Represents the current page path"""
    pagePath: String
  ): CataloguePromotionListing @join__field(graph: IRIS)
  hasHaveYouForgotten: HasHaveYouForgotten! @join__field(graph: IRIS) @deprecated(reason: "Moved to cart")

  """Payment Instruments page query"""
  paymentInstruments(paymentInstrumentsInput: PaymentInstrumentsInput!): PaymentInstrumentsResponse! @join__field(graph: IRIS)

  """Add Credit Card page query"""
  addCreditCard(addCreditCardInput: AddCreditCardInput!): AddCreditCardResponse! @join__field(graph: IRIS)

  """get data to link PayPal"""
  linkPayPal: LinkPayPalResponse! @join__field(graph: IRIS)
  freshMagHome: FreshMagHome @join__field(graph: IRIS)

  """
  Get Terms and conditions for deleting account in shop app
  Apple Store requirements to provide an option to
  delete within apps required starting January 31
  https://developer.apple.com/news/?id=mdkbobfo
  """
  deleteAccountTnC: DeleteAccountTnCResponse @join__field(graph: IRIS)
  orderConfirmation(
    orderId: String!

    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    shoppingMode: ShoppingModeType

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]
  ): OrderConfirmationContent @join__field(graph: IRIS)
  orderInvoice(orderId: ID!): OrderInvoice! @join__field(graph: IRIS)
  orders(pageNumber: Int, orderType: OrderType): Orders! @join__field(graph: IRIS)
  orderProductList(orderId: ID!, fulfilmentFilterKey: String): OrderProductList! @join__field(graph: IRIS)
  orderSummary(orderId: ID!, callerState: CallerState): OrderSummary! @join__field(graph: IRIS)
  productReviewAlternative(productReviewAlternativeInput: ProductReviewAlternativeInput!): ProductReviewAlternativeResponse! @join__field(graph: IRIS)
  recipeDetails(
    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    shoppingMode: ShoppingModeType
    recipeId: String

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]
  ): RecipeDetail @join__field(graph: IRIS)
  getIngredients(recipeId: String, serves: Int): IngredientsSection @join__field(graph: IRIS)
  recipeHome(storeId: String): Feed @join__field(graph: IRIS)
  recipeSearch(
    """
    Represents the current shopping mode
    selected by the shopper id.
    """
    shoppingMode: ShoppingModeType
    tags: [String]
    key: String
    source: String
    pageNumber: Int
    searchTerm: String

    """
    List of deeplink sections that the client supports. This ensures
    that deeplinks coming out of this response works for the client
    """
    supportedLinks: [String!]
  ): RecipeList @join__field(graph: IRIS)

  """
  @deprecated(reason: "Use `productsByRecipe` instead")
  Accepts recipe id, searches Whisk products by ingredients, verifies resulting Whisk ProductIds against WX services and returns valid WX Products
  """
  recipeProducts(
    """Required recipe id (slug) field, NOT recipeId (int/guid) field value"""
    recipeId: String!

    """
    Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
    """
    storeId: String
  ): ProductsInList @join__field(graph: IRIS)
  savedRecipes(pageNumber: Int): RecipeList @join__field(graph: IRIS)

  """Serves the Specials hub home content and products."""
  specialsHome(specialsHomeInput: SpecialsHomeInput!): SpecialsHomePage @join__field(graph: IRIS)
  editOrderStatus(currentMode: EditOrderMode): EditOrderStatus! @join__field(graph: IRIS)
}

"""
The query parameters used when clicking on the card to get the product list from productsByProductGroup. Mode is not included.
"""
type QueryParameters
  @join__type(graph: IRIS)
{
  """
  Represents the product group id. **Must** always be provided *e.g. "25"*.
  """
  groupId: String!

  """
  Represents the unique store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. "1550"*.
  """
  storeId: String
}

type Question
  @join__type(graph: IRIS)
{
  """Survey ID"""
  id: ID!

  """Question text to display"""
  text: String!

  """
  Survey type
  Type dictates the UI controls
  """
  type: SurveyQuestionType!
}

"""Home page Quick Link Card"""
type QuickLinkCard implements LinkCardBase
  @join__implements(graph: IRIS, interface: "LinkCardBase")
  @join__type(graph: IRIS)
{
  linkCardTitle: String!
  linkCardSubtitle: String
  linkCardImage: String

  """@deprecated(reason: "Use `linkCardAction` instead")"""
  linkCardLink: String!
  linkCardAction: Action!
  linkCardAnimation: OverlayAnimation
  linkCardSize: CardSize!
  analytics: Analytics

  """
  Represents the background color of quick link card(at the moment it's either gray or white)
  """
  isQuickLinkView: Boolean
}

"""Display list of quick links"""
type QuickLinkHorizontalList implements HorizontalListBase & BaseNode
  @join__implements(graph: IRIS, interface: "HorizontalListBase")
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  actionTitle: String
  deepLink: String
  items: [QuickLinkCard!]!
  nodeId: String
}

"""Home page QuickLink list"""
type QuickLinkList
  @join__type(graph: IRIS)
{
  items: [QuickLinkCard!]!
}

"""Ratings and reviews details response"""
type RatingsAndReviewsDetailsResponse
  @join__type(graph: IRIS)
{
  """Ratings and reviews ratings details"""
  ratings: RatingsAndReviewsRatingsDetails

  """Ratings and reviews reviews details"""
  reviews: [RatingsAndReviewsReviewItem!]!

  """
  Call to action item for "Write a review"
  """
  cta: Link

  """Ratings and reviews page info"""
  pageInfo: RatingsAndReviewsPageInfo
}

"""Ratings and reviews page info"""
type RatingsAndReviewsPageInfo
  @join__type(graph: IRIS)
{
  """Points to next page in response. Null if reaching end of page"""
  nextPage: Int
}

"""Ratings and reviews preview CTA section"""
type RatingsAndReviewsPreviewCta
  @join__type(graph: IRIS)
{
  button: Button!
}

"""Ratings and reviews preview ratings details section"""
type RatingsAndReviewsPreviewHeader
  @join__type(graph: IRIS)
{
  """Ratings and reviews preview header title"""
  title: String!

  """Ratings and reviews preview header subtitle"""
  subtitle: String!
}

type RatingsAndReviewsPreviewResponse
  @join__type(graph: IRIS)
{
  """Sections of ratings and reviews preview response"""
  sections: [RatingsAndReviewsPreviewSections!]!
}

"""Union type for ratings and reviews preview sections"""
union RatingsAndReviewsPreviewSections
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsPreviewHeader")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsRatingsDetails")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsReviewDetails")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsPreviewCta")
 = RatingsAndReviewsPreviewHeader | RatingsAndReviewsRatingsDetails | RatingsAndReviewsReviewDetails | RatingsAndReviewsPreviewCta

"""Union type for ratings and reviews rating distribution"""
union RatingsAndReviewsRatingDistribution
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsRatingDistributionOverview")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsRatingDistributionDetails")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsRatingDistributionWriteReview")
 = RatingsAndReviewsRatingDistributionOverview | RatingsAndReviewsRatingDistributionDetails | RatingsAndReviewsRatingDistributionWriteReview

"""Details section of rating distribution"""
type RatingsAndReviewsRatingDistributionDetails
  @join__type(graph: IRIS)
{
  """Ratings distribution items"""
  items: [RatingsDistributionItem!]!
}

"""Overview section of rating distribution"""
type RatingsAndReviewsRatingDistributionOverview
  @join__type(graph: IRIS)
{
  """
  Average ratings
  e.g. 3.7
  """
  averageRating: Float!

  """how many stars frontend need to render based on the averageRatings"""
  displayRatings: Float!

  """Average ratings text of the product"""
  ratingText: TextWithAlt!

  """
  Maximum ratings the rating system can have
  used for rendering the max number of rating stars in frontend
  """
  maximumRating: Int!

  """
  Total number of reviews text
  e.g. 41 reviews
  """
  totalReviewsText: String!

  """Call to action item for rating distribution"""
  cta: Link
}

"""Write review section of rating distribution"""
type RatingsAndReviewsRatingDistributionWriteReview
  @join__type(graph: IRIS)
{
  button: Button!
}

"""Ratings details section of preview response"""
type RatingsAndReviewsRatingsDetails
  @join__type(graph: IRIS)
{
  """Ratings section"""
  sections: [RatingsAndReviewsRatingDistribution!]!
}

"""Review details section"""
type RatingsAndReviewsReviewDetails
  @join__type(graph: IRIS)
{
  """Review items"""
  items: [RatingsAndReviewsReviewItem!]!
}

"""Review item of ratings details section"""
type RatingsAndReviewsReviewItem
  @join__type(graph: IRIS)
{
  """Sections of ratings and reviews review item"""
  sections: [RatingsAndReviewsReviewItemSections!]!
}

"""Review body section of review item"""
type RatingsAndReviewsReviewItemBody
  @join__type(graph: IRIS)
{
  """Review body content"""
  content: String!
}

"""Review info section of review item"""
type RatingsAndReviewsReviewItemInfo
  @join__type(graph: IRIS)
{
  """User name"""
  userName: String!

  """
  Display when the review conducted
  e.g. 5 days ago
  """
  createdAt: String!
}

"""Overall rating section of review item"""
type RatingsAndReviewsReviewItemRating
  @join__type(graph: IRIS)
{
  """
  Rating score
  e.g. 4
  """
  rating: Int!

  """Maximum ratings the rating system can have"""
  maximumRating: Int!

  """Verified text"""
  text: String
}

"""Recommendation section of review item"""
type RatingsAndReviewsReviewItemRecommendation
  @join__type(graph: IRIS)
{
  """
  Recommendation text
  e.g. Yes, I recommend this product
  """
  text: String
}

"""Review title section of review item"""
type RatingsAndReviewsReviewItemReviewTitle
  @join__type(graph: IRIS)
{
  """e.g. Easy, refreshing, and effective"""
  title: String!
}

"""Union type for ratings and reviews review item sections"""
union RatingsAndReviewsReviewItemSections
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsReviewItemRating")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsReviewItemReviewTitle")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsReviewItemRecommendation")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsReviewItemInfo")
  @join__unionMember(graph: IRIS, member: "RatingsAndReviewsReviewItemBody")
 = RatingsAndReviewsReviewItemRating | RatingsAndReviewsReviewItemReviewTitle | RatingsAndReviewsReviewItemRecommendation | RatingsAndReviewsReviewItemInfo | RatingsAndReviewsReviewItemBody

"""Ratings distribution item"""
type RatingsDistributionItem
  @join__type(graph: IRIS)
{
  """
  Rating distribution score
  e.g. 5
  """
  ratingScore: String!

  """
  Rating distribution percentage
  e.g. 0.75
  """
  percentage: Float!

  """Rating distribution count for a certain distribution score"""
  ratingCount: String!
}

enum RatingsReviewSortType
  @join__type(graph: IRIS)
{
  LATEST @join__enumValue(graph: IRIS)
  HIGHEST_RATING @join__enumValue(graph: IRIS)
  LOWEST_RATING @join__enumValue(graph: IRIS)
}

type ReceiptAnalytics
  @join__type(graph: IRIS)
{
  partnerName: String!
}

type ReceiptDetails
  @join__type(graph: IRIS)
{
  download: ReceiptDownload
  details: [ReceiptDetailsItem!]!
  analytics: ReceiptAnalytics!
}

type ReceiptDetailsBarcode
  @join__type(graph: IRIS)
{
  value: String!
  type: String
}

type ReceiptDetailsCoupon
  @join__type(graph: IRIS)
{
  headerImageUrl: String
  sections: [ReceiptDetailsCouponSection!]!
  footer: String
  barcode: ReceiptDetailsBarcode
}

type ReceiptDetailsCouponSection
  @join__type(graph: IRIS)
{
  sectionTitle: String
  details: [String!]!
}

type ReceiptDetailsFooter
  @join__type(graph: IRIS)
{
  barcode: ReceiptDetailsBarcode
  transactionDetails: String!
  abnAndStore: String!
}

type ReceiptDetailsHeader
  @join__type(graph: IRIS)
{
  iconUrl: String
  title: String!
  content: String!
  storeNo: String
  division: String
}

type ReceiptDetailsInfo
  @join__type(graph: IRIS)
{
  header: ReceiptDetailsLineItem!
  info: [ReceiptDetailsLineItem!]!
}

union ReceiptDetailsItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsHeader")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsTotal")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsItems")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsSummary")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsPayments")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsSavings")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsCoupon")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsFooter")
  @join__unionMember(graph: IRIS, member: "ReceiptDetailsInfo")
 = ReceiptDetailsHeader | ReceiptDetailsTotal | ReceiptDetailsItems | ReceiptDetailsSummary | ReceiptDetailsPayments | ReceiptDetailsSavings | ReceiptDetailsCoupon | ReceiptDetailsFooter | ReceiptDetailsInfo

type ReceiptDetailsItems
  @join__type(graph: IRIS)
{
  header: ReceiptDetailsLineItem!
  items: [ReceiptDetailsLineItem!]!
}

type ReceiptDetailsLineItem
  @join__type(graph: IRIS)
{
  prefixChar: String
  description: String!
  amount: String
}

type ReceiptDetailsPayment
  @join__type(graph: IRIS)
{
  details: [ReceiptDetailsPaymentInfo!]!
  description: String!
  amount: String!
  iconUrl: String
  altText: String
}

type ReceiptDetailsPaymentInfo
  @join__type(graph: IRIS)
{
  text: String!
}

type ReceiptDetailsPayments
  @join__type(graph: IRIS)
{
  payments: [ReceiptDetailsPayment!]!
}

type ReceiptDetailsSavings
  @join__type(graph: IRIS)
{
  savings: String!
  summaryItems: [ReceiptDetailsLineItem!]!
}

type ReceiptDetailsSummary
  @join__type(graph: IRIS)
{
  discounts: [ReceiptDetailsLineItem!]!
  summaryItems: [ReceiptDetailsLineItem!]!
  gst: ReceiptDetailsLineItem
  receiptTotal: ReceiptDetailsLineItem!
}

type ReceiptDetailsTotal
  @join__type(graph: IRIS)
{
  total: String!
}

type ReceiptDownload
  @join__type(graph: IRIS)
{
  url: String!
  filename: String!
}

type ReceiptFeedGroupHeader
  @join__type(graph: IRIS)
{
  title: String!
}

union ReceiptFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ReceiptFeedGroupHeader")
  @join__unionMember(graph: IRIS, member: "ReceiptItem")
 = ReceiptFeedGroupHeader | ReceiptItem

type ReceiptItem
  @join__type(graph: IRIS)
{
  """id is encrypted to consist basketKey+card+banner"""
  id: ID!
  displayDate: String!
  displayValue: String!
}

type ReceiptListPageInfo
  @join__type(graph: IRIS)
{
  nextPage: Int
}

type ReceiptsList
  @join__type(graph: IRIS)
{
  items: [ReceiptFeedItem!]!
  pageInfo: ReceiptListPageInfo!
}

type RecipeByLine
  @join__type(graph: IRIS)
{
  image: String
  title: String!
}

union RecipeCard
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RecipeSummaryCard")
  @join__unionMember(graph: IRIS, member: "RecipeMoreCard")
 = RecipeSummaryCard | RecipeMoreCard

type RecipeCostPerServe
  @join__type(graph: CPS)
{
  """represents cost per serve dollar amount"""
  recipeCostPerServePrice: Float!

  """represents cost per serve broadcast banner"""
  recipeCostPerServeBanner: BasicCoreBroadcastBanner
}

type RecipeDetail
  @join__type(graph: CPS, key: "id", extension: true)
  @join__type(graph: IRIS, key: "id")
{
  id: String!
  recipeCostPerServe: RecipeCostPerServe @join__field(graph: CPS)
  recipeId: String! @join__field(graph: IRIS)
  recipeUrl: String @join__field(graph: IRIS)
  title: String! @join__field(graph: IRIS)
  image: String! @join__field(graph: IRIS)
  video: Video @join__field(graph: IRIS)
  byline: RecipeByLine @join__field(graph: IRIS)
  features: [RecipeFeature!] @join__field(graph: IRIS)
  ingredients: [String!]! @join__field(graph: IRIS)
  ingredientProductIds: [String!]! @join__field(graph: IRIS) @deprecated(reason: "Use `ingredientList`")
  ingredientList: [RecipeIngredientDetail!]! @join__field(graph: IRIS) @deprecated
  ingredientsSection: IngredientsSection! @join__field(graph: IRIS)
  serveDefault: String! @join__field(graph: IRIS)
  method: RecipeMethod! @join__field(graph: IRIS)
  latestRecipes: HorizontalList @join__field(graph: IRIS)
  nutritionTile: RecipeNutritionTile @join__field(graph: IRIS)
  disclaimer: String @join__field(graph: IRIS) @deprecated
  sourceName: String @join__field(graph: IRIS)
  tags: [String!]! @join__field(graph: IRIS)
  userInteraction: RecipeUserInteraction @join__field(graph: IRIS)

  """Different contents from CMS to be displayed in recipe details screen"""
  universalInventory: UniversalInventory @join__field(graph: IRIS)
  shopIngredientButton: ShopIngredientButton! @join__field(graph: IRIS)

  """represents recipe page analytics"""
  analytics: Analytics @join__field(graph: IRIS)

  """
  represents recipe page impression analytics, only available when cps is not null
  """
  impressionAnalytics: Analytics @join__field(graph: IRIS)
}

type RecipeDuration
  @join__type(graph: IRIS)
{
  duration: String!
  altText: String!
}

union RecipeFeature
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RecipeSummaryFeature")
  @join__unionMember(graph: IRIS, member: "RecipeSummaryDifficulty")
 = RecipeSummaryFeature | RecipeSummaryDifficulty

type RecipeGroupTile
  @join__type(graph: IRIS)
{
  tags: [String!]
  source: String
  title: String!
  image: String!
}

"""Displays list of recipe cards"""
type RecipeHorizontalList implements HorizontalListBase & BaseNode
  @join__implements(graph: IRIS, interface: "HorizontalListBase")
  @join__implements(graph: IRIS, interface: "BaseNode")
  @join__type(graph: IRIS)
{
  title: String!
  subtitle: String
  actionTitle: String
  deepLink: String
  items: [HorizontalListItem!]!
  nodeId: String
}

type RecipeIngredientDetail
  @join__type(graph: IRIS)
{
  """Full ingredient information eg. [amount] [unit] [name]"""
  ingredient: String!

  """Optional eg. ISO, P, M"""
  ingredientType: String
  productId: String
  sponsor: String
}

type RecipeList
  @join__type(graph: IRIS)
{
  nextPage: Int
  recipes: [RecipeSummaryCard!]! @deprecated(reason: "For 23.7 and above, Use `recipeListFeed`")

  """List of display components."""
  recipeListFeed: [RecipeListFeed]!
  totalNumberOfRecipes: Int!
  title: String

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics
}

union RecipeListFeed
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "RecipeSummaryCard")
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "GoogleAdBannerCard")
  @join__unionMember(graph: IRIS, member: "UniversalInventoryContainer")
 = RecipeSummaryCard | ActionableCard | GoogleAdBannerCard | UniversalInventoryContainer

type RecipeMethod
  @join__type(graph: IRIS)
{
  panelTitle: String
  caption: String
  description: MethodDescription
  items: [MethodItem!]!
  disclaimer: String
}

type RecipeMoreCard
  @join__type(graph: IRIS)
{
  actionMetadata: [ActionMetaData!]!
}

type RecipeNutritionTile
  @join__type(graph: IRIS)
{
  perServeKilojoules: String!
  perServeCalories: String!
  dailyIntakePercentage: Int!
  dailyIntakeText: String!
  disclaimer: String!
  title: String!
  features: [RecipeNutritionTileFeature!]!
}

type RecipeNutritionTileFeature
  @join__type(graph: IRIS)
{
  title: String!
  value: String!
}

type RecipeSaveInfo
  @join__type(graph: IRIS)
{
  isSaved: Boolean!
  message: String!
}

"""Drives the recipes tile on the FE."""
type RecipesCard
  @join__type(graph: IRIS)
{
  """'Recipes'"""
  title: String

  """'1000's of new recipes to inspire your cooking'"""
  subtitle: String

  """
  'A fully qualified url to an image chosen at random from a finite list'
  """
  image: String
}

type RecipeServes
  @join__type(graph: IRIS)
{
  quantity: Int!
  title: String!
  minimum: Int!
  maximum: Int!
}

type RecipeSource
  @join__type(graph: IRIS)
{
  source: String!
}

type RecipeSummaryCard
  @join__type(graph: IRIS)
{
  title: String!
  image: String!
  id: String!
  tags: [String!]
  sourceName: String!
  isVideoAvailable: Boolean!

  """represents preparation time of the recipe. e.g. 1h 2m"""
  recipePrepDuration: RecipeDuration

  """represents cooking time of the recipe. e.g.  2h 30m"""
  recipeCookDuration: RecipeDuration
}

type RecipeSummaryDifficulty
  @join__type(graph: IRIS)
{
  title: String!
  value: Int!
  maxValue: Int!
  altText: String!
}

type RecipeSummaryFeature
  @join__type(graph: IRIS)
{
  title: String!
  amount: String!
  unit: String
  altText: String!
  featureType: FeatureType!
}

type RecipeTagList
  @join__type(graph: IRIS)
{
  tags: [String!]!
}

type RecipeUserInteraction
  @join__type(graph: IRIS)
{
  isSaved: Boolean
  recipeUrl: String
}

"""Unknown. Is this being used?"""
type RegistrationCard
  @join__type(graph: IRIS)
{
  """
  Common BFF custom flag to allow independent chain resolvers.
  Having item with _excluded:true, means it should not be used in FE
  """
  _excluded: Boolean
}

type RemoveCheckoutCreditResponse
  @join__type(graph: IRIS)
{
  success: Boolean!

  """message used for failure"""
  message: String!

  """checkout summary after removing store credits"""
  checkoutSummary: CheckoutContent
}

type RemoveCheckoutPromoCodeResponse
  @join__type(graph: IRIS)
{
  success: Boolean!

  """message used for failure"""
  message: String!

  """checkout summary after removing store credits"""
  checkoutSummary: CheckoutContent
}

input RemoveListItemInput
  @join__type(graph: IRIS)
{
  id: ID!
  timestamp: Float!
}

input ReviewProductUpdateInput
  @join__type(graph: IRIS)
{
  """stock code"""
  productId: Int!

  """Quantity"""
  quantity: Float!
}

"""Display if valid edr new component"""
type RewardsBalanceCard
  @join__type(graph: IRIS)
{
  edrNumber: String!
  rewardsState: String!
  offersTitle: String!
  currentBalance: Int!
  goalBalance: Int!
  actionUrl: String!
  pointsDescriptionFormat: String!
  pointsDescriptionReplacements: [String!]!
  altText: String!
  offersAlertIndicator: AlertIndicator
  pointsAlertIndicator: AlertIndicator
}

"""Represents the rewards offer analytics details"""
type RewardsOfferAnalytics
  @join__type(graph: IRIS)
{
  offerName: String
  campaignStream: String
  channel: String
  status: String
  offerType: String
  partnerId: String
  rtlAccountID: String
  rtlCampaignID: String
  rtlCampaignCode: String
}

"""Represents the rewards offer details"""
type RewardsOfferInfo
  @join__type(graph: IRIS)
{
  """Offer id of rewards offer"""
  offerId: String!

  """Offer expiry date to be shown to the user"""
  displayExpiry: String!

  """Offer minimum spend to be shown to the user"""
  minimumSpend: String

  """Status of the offer"""
  offerStatus: RewardsOfferStatus!

  """Status text to be shown to the user"""
  displayStatus: String

  """Analytics details of the rewards offer"""
  offerAnalytics: RewardsOfferAnalytics

  """Button to Boost offer"""
  boostButton: Button
}

"""Represents the list of rewards offer status"""
enum RewardsOfferStatus
  @join__type(graph: IRIS)
{
  NOT_ACTIVATED @join__enumValue(graph: IRIS)
  ACTIVATED @join__enumValue(graph: IRIS)
  MISSED @join__enumValue(graph: IRIS)
  COMPLETED @join__enumValue(graph: IRIS)
  ENDED @join__enumValue(graph: IRIS)
  PENDING @join__enumValue(graph: IRIS)
}

"""Displays if valid edr."""
type RewardsSummaryCard
  @join__type(graph: IRIS)
{
  """The rewards card number"""
  edrNumber: String!

  """Card Title"""
  rewardsSummaryCardTitle: String!

  """Card Subtitle"""
  rewardsSummaryCardSubtitle: String!

  """Rewards State"""
  rewardsState: String!
}

type RoundelImage
  @join__type(graph: IRIS)
{
  """The URL of the roundel image"""
  url: String!

  """Alternative text for the roundel image, used for accessibility"""
  altText: String!

  """The priority of the roundel image, indicating its importance"""
  priority: RoundelImagePriority!
}

enum RoundelImagePriority
  @join__type(graph: IRIS)
{
  PRIMARY @join__enumValue(graph: IRIS)
  SECONDARY @join__enumValue(graph: IRIS)
  TERTIARY @join__enumValue(graph: IRIS)
}

enum RtlBoostState
  @join__type(graph: IRIS)
{
  BOOSTED @join__enumValue(graph: IRIS)
  NOT_BOOSTED @join__enumValue(graph: IRIS)
}

enum RtlOfferStatus
  @join__type(graph: IRIS)
{
  ACTIVE @join__enumValue(graph: IRIS)
  ENDED @join__enumValue(graph: IRIS)
  COMPLETED @join__enumValue(graph: IRIS)
}

"""Savings information"""
type SavingsOnCart
  @join__type(graph: IRIS)
{
  """label i.e., You have saved"""
  label: String!

  """Savings amount $0.20"""
  amount: String!
}

"""
Represents a universal search nav card, more fields can be added base on the needs. E.g. placeholder, etc.
"""
type SearchNavCard
  @join__type(graph: IRIS)
{
  """
  represents the context of the search nav card, FE can use this to determine which bff query to call
  """
  searchNavCardContext: ContextType

  """represents the text to be displayed on the search nav card"""
  searchNavCardPlaceholderText: String

  """represents the action to be taken when the search nav card is clicked"""
  searchNavCardAction: Action!
}

"""Seller info"""
type SellerItem implements MarketplaceItem
  @join__implements(graph: IRIS, interface: "MarketplaceItem")
  @join__type(graph: IRIS)
{
  id: String
  title: String!
  imageUrl: String!
  link: String!
}

"""List of Sellers"""
type Sellers implements MarketplaceSectionItem
  @join__implements(graph: IRIS, interface: "MarketplaceSectionItem")
  @join__type(graph: IRIS)
{
  pageName: MarketplaceLandingPageName!
  displayName: String!
  channel: ProductListChannelType!
  facet: ProductListFacetType!
  items: [SellerItem!]!
}

input SetEditOrderStatusInput
  @join__type(graph: IRIS)
{
  orderId: ID!
  mode: EditOrderMode!
}

type SetEditOrderStatusResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  reason: EditOrderReason
  message: String
  currentMode: EditOrderMode!
}

type SetFulfilmentWindowResultSuccess
  @join__type(graph: IRIS)
{
  _: Boolean

  """The Shopping Mode, after fulfilment window has been set"""
  modeId: CollectionModeId!
}

union SetShoppingModeResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelectorErrorResponse")
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelectorRedirectResponse")
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelector")
 = ShoppingModeSelectorErrorResponse | ShoppingModeSelectorRedirectResponse | ShoppingModeSelector

union ShippingMessageBanner
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "InlineMessage")
  @join__unionMember(graph: IRIS, member: "PromotionBanner")
 = InlineMessage | PromotionBanner

type ShopIngredientButton
  @join__type(graph: IRIS)
{
  button: Button!
  isStickyStyle: Boolean!
}

type Shopper
  @join__type(graph: IRIS)
{
  shopperId: String
  firstName: String
  middleInitial: String
  lastName: String
  fullName: String
  dateOfBirth: String
  email: String
  homePhone: String
  businessPhone: String
  mobilePhone: String
  comments: String
  company: String
  orderCount: Int
  abn: String
  jobTitle: String
  typeOfBusiness: String
  isBusinessAccount: Boolean
  teamMember: Boolean
  dateCreated: String
  dateLastModified: String
  allowSMS: Boolean
  allowSamples: Boolean
  catalogueOptIn: Boolean
  isGuest: Boolean
}

"""Default Shopping Mode"""
type ShoppingMode
  @join__type(graph: IRIS)
{
  """Kind of shopping mode"""
  type: ShoppingModeType!

  """
  Shopping mode title, normally title of currently selected (or default) variant
  """
  title: String!

  """
  Shopping mode variants
  For example for Delivery mode we have `Delivery` and `Delivery Now` variants
  """
  variants: [ShoppingModeVariantUnion!]!

  """Shopping mode address: `DeliveryAddress` in for Delivery Mode"""
  address: AddressUnion

  """
  Current state of the *Delivery* shopping mode
  (e.g. `SELECTED` or `AVAIABLE`)
  """
  state: ShoppingModeState!
}

"""Generic type used to "sync" shopping mode details with APP"""
type ShoppingModeDetails
  @join__type(graph: IRIS)
{
  mode: String!
  displayName: String
  storeAddressId: Int
}

"""Browsing mode of the app selected by user."""
enum ShoppingModeId
  @join__type(graph: IRIS)
{
  DELIVERY @join__enumValue(graph: IRIS)
  DELIVERY_NOW @join__enumValue(graph: IRIS)
  PICKUP @join__enumValue(graph: IRIS)
  INSTORE @join__enumValue(graph: IRIS)
}

"""Mutation reponse with shopping modes list"""
type ShoppingModeMutationResponse
  @join__type(graph: IRIS)
{
  """If mutation was successfuls"""
  isSuccess: Boolean!

  """Shopping modes screen"""
  shoppingModes: ShoppingModes!
}

type ShoppingModes
  @join__type(graph: IRIS)
{
  """List of available shopping modes"""
  modes: [ShoppingModeUnion!]!
}

"""(Shopping) Mode Selector Screen"""
type ShoppingModeSelector
  @join__type(graph: IRIS)
{
  header: ShoppingModeSelectorHeader!
  sections: [ShoppingModeSelectorSection!]!
}

"""Store or delivery address details"""
type ShoppingModeSelectorAddressInfo
  @join__type(graph: IRIS)
{
  """Optional, Map Image displayed for Pick-up and In-Store modes"""
  image: DownloadableAsset

  """Optional used only for Pick up and In-store modes"""
  title: String

  """Optional used only for Delivery mode"""
  subtitle: String

  """
  Edit button that triggers delivery/pick up address selector screen as well as store selector screen
  """
  button: Button!

  """Store details button instore mode to navigate to store details screen"""
  secondaryButton: Button

  """
  Fields required for old mode selector screen to work.
  This will be used for V2 as well until V3 (aka Drop 3) is released.
  """
  v1AddressDetails: ModeSelectorV1AddressDetails @deprecated(reason: "Use shoppingModeDetails instead")

  """Fields used to "sync" shopping mode with App"""
  shoppingModeDetails: ShoppingModeDetails!
}

type ShoppingModeSelectorAddressInfoSection
  @join__type(graph: IRIS)
{
  """Delivering to | Pick up location | Selected store"""
  title: String!

  """Store or delivery address details"""
  details: ShoppingModeSelectorAddressInfo!
}

type ShoppingModeSelectorErrorResponse
  @join__type(graph: IRIS)
{
  """User friendly error message"""
  message: String!

  """
  (Optional) deep-link if FE should redirect the user to a different screen
  """
  deepLinkUrl: String
}

"""
Header part of the Mode Selector Screen.
Contains the 3 buttons on top "Pick up", "Delivery" and "In-store".
Plus the asset for the selected mode+variant.
"""
type ShoppingModeSelectorHeader
  @join__type(graph: IRIS)
{
  buttons: [ShoppingModeSelectorHeaderButton!]!
  image: DownloadableAsset!
}

type ShoppingModeSelectorHeaderButton
  @join__type(graph: IRIS)
{
  """DELIVERY | PICKUP | INSTORE"""
  id: ID!

  """Button title: Delivery | Pickup | In-store"""
  title: String!

  """State of the button"""
  isSelected: Boolean!
}

type ShoppingModeSelectorOption
  @join__type(graph: IRIS)
{
  """DELIVERY | DELIVERY_NOW | PICK_UP"""
  id: ID!

  """
  Current state of the Variant
  (e.g. `SELECTED`, `DISABLED` or `AVAILABLE`)
  """
  state: ShoppingModeSelectorOptionState!

  """
  Badge of the Variant
  (e.g: `Temporarily unavailable` or `null` if no extra badge is necessary)
  """
  badge: Badge

  """Delivery Now | Schedule for later | Direct to boot"""
  title: String!

  """
  Get in 1-2 hours | Delivery at the time that suits you | Order placed into your car boot
  """
  subtitle: String!

  """"$15 | Up to $15 | $0","""
  price: String

  """
  Array of Badges
  
  values: $50 minimum | 50 item limit | No minimum spend and so on...
  """
  conditions: [Badge!]!

  """Divider and Button to show empty or selected fulfilment window state"""
  fulfilment: [ShoppingModeSelectorOptionFulfilmentSection!]
}

union ShoppingModeSelectorOptionFulfilmentSection
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "DividerCard")
  @join__unionMember(graph: IRIS, member: "Button")
 = DividerCard | Button

type ShoppingModeSelectorOptionsSection
  @join__type(graph: IRIS)
{
  """Delivery options | Pick up options"""
  title: String

  """Array of option items"""
  items: [ShoppingModeSelectorOption!]!

  """
  Footnote for one or more delivery options
  (e.g: `Delivery Unlimited discounts shown at checkout`)
  """
  footnote: String
}

enum ShoppingModeSelectorOptionState
  @join__type(graph: IRIS)
{
  AVAILABLE @join__enumValue(graph: IRIS)
  DISABLED @join__enumValue(graph: IRIS)
  SELECTED @join__enumValue(graph: IRIS)
}

type ShoppingModeSelectorRedirectResponse
  @join__type(graph: IRIS)
{
  """deep-link if FE should redirect the user to a different screen"""
  deepLinkUrl: String!
}

union ShoppingModeSelectorResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelectorErrorResponse")
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelector")
 = ShoppingModeSelectorErrorResponse | ShoppingModeSelector

union ShoppingModeSelectorSection
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelectorAddressInfoSection")
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelectorOptionsSection")
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelectorStoreDetailsSection")
  @join__unionMember(graph: IRIS, member: "ShoppingModeSelectorStoreFeaturesSection")
 = ShoppingModeSelectorAddressInfoSection | ShoppingModeSelectorOptionsSection | ShoppingModeSelectorStoreDetailsSection | ShoppingModeSelectorStoreFeaturesSection

type ShoppingModeSelectorStoreDetail
  @join__type(graph: IRIS)
{
  """To display the trading hours and direction icon"""
  image: DownloadableAsset

  """Trading hours | Getting there"""
  title: String

  """Store timings | distance in km"""
  subtitle: String

  """See all Hours - details screen | Get Direction - open map"""
  button: Button
}

type ShoppingModeSelectorStoreDetailsSection
  @join__type(graph: IRIS)
{
  storeDetails: [ShoppingModeSelectorStoreDetail!]!
}

type ShoppingModeSelectorStoreFeaturesSection
  @join__type(graph: IRIS)
{
  """In-store features"""
  title: String!

  """To display features as text and icon"""
  features: [IconTextBanner!]!
}

"""Possible state for shopping mode"""
enum ShoppingModeState
  @join__type(graph: IRIS)
{
  AVAILABLE @join__enumValue(graph: IRIS)
  SELECTED @join__enumValue(graph: IRIS)
}

"""Type of shopping mode"""
enum ShoppingModeType
  @join__type(graph: IRIS)
{
  DELIVERY @join__enumValue(graph: IRIS)
  PICKUP @join__enumValue(graph: IRIS)
  INSTORE @join__enumValue(graph: IRIS)
  NOTSET @join__enumValue(graph: IRIS)
}

"""
One of the available shopping modes

Usage:
```graphql
shoppingModes {
  ... on ShoppingMode {
    __typename
  }
}
```
"""
union ShoppingModeUnion
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ShoppingMode")
 = ShoppingMode

"""Default the Variant"""
type ShoppingModeVariant
  @join__type(graph: IRIS)
{
  """ID of the the Variant for selection"""
  id: ShoppingModeId!

  """Title for the Variant"""
  title: String!

  """
  The Variant subtitle
  (ETA: e.g. `Approx. 1hr and 20mins`)
  """
  subtitle: String!

  """
  The Variant price
  (e.g. `{text: "$19"}`)
  """
  price: ShoppingModeVariantPrice

  """
  The Variant conditions
  (e.g. `[{text: "50 item limit"}]`)
  """
  conditions: [ShoppingModeVariantCondition]

  """
  Current state of the Variant
  (e.g. `SELECTED`, `DISABLED` or `AVAIABLE`)
  """
  state: ShoppingModeVariantState!

  """
  Current state of the Variant, currently present only for Delivery Now
  (e.g. `Closed`, `Available`, `Exhausted`, etc)
  """
  status: DeliveryWindowStatus

  """
  Badge of the Variant
  (e.g: `Temporarily unavailable` or `null` if no extra badge is necessary)
  """
  badge: ShoppingModeVariantBadge @deprecated(reason: "Use `statusBadge`")

  """
  Badge of the Variant
  (e.g: `Temporarily unavailable` or `null` if no extra badge is necessary)
  """
  statusBadge: Badge

  """
  Footnote of the Variant
  (e.g: `Delivery Unlimited discounts shown at checkout`)
  """
  footnote: String

  """
  DeliveryNowStoreId of the Variant
  (e.g: `Delivery Now store id 1213`)
  """
  expressDeliveryStoreId: Int
  fulfilment: [ShoppingModeVariantFulfilmentWindowSection!]
}

"""
Badge of a shopping mode variant
(e.g: "Temporarily unavailable")
"""
type ShoppingModeVariantBadge
  @join__type(graph: IRIS)
{
  """Printable condition text"""
  text: String!
}

"""
Condition of a shopping mode variant
(e.g: "Order by 6pm for the next day delivery")
"""
type ShoppingModeVariantCondition
  @join__type(graph: IRIS)
{
  """Printable condition text"""
  text: String!
}

union ShoppingModeVariantFulfilmentWindowSection
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "DividerCard")
  @join__unionMember(graph: IRIS, member: "ShoppingModeVariantFulfilmentWindowState")
  @join__unionMember(graph: IRIS, member: "Button")
 = DividerCard | ShoppingModeVariantFulfilmentWindowState | Button

type ShoppingModeVariantFulfilmentWindowState implements FulfilmentWindowState
  @join__implements(graph: IRIS, interface: "FulfilmentWindowState")
  @join__type(graph: IRIS)
{
  fulfilmentWindowStateTitle: String!
  fulfilmentWindowStateSubtitle: TextWithAlt
  fulfilmentWindowStateButton: Button!
}

"""
Price for different shopping mode variants could be either range or exact

Usage:
```gql
price {
  ... on Price {
    text
    value
  }
  ... on PriceRange {
    text
    min
    max
  }
}
```
"""
union ShoppingModeVariantPrice
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "Price")
  @join__unionMember(graph: IRIS, member: "PriceRange")
 = Price | PriceRange

"""Possible state for shopping mode variant"""
enum ShoppingModeVariantState
  @join__type(graph: IRIS)
{
  AVAILABLE @join__enumValue(graph: IRIS)
  DISABLED @join__enumValue(graph: IRIS)
  SELECTED @join__enumValue(graph: IRIS)
}

"""
One of the available the Variants

Usage:
```graphql
variants {
   ... on ShoppingModeVariant {
     __typename
   }
 }
```
"""
union ShoppingModeVariantUnion
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ShoppingModeVariant")
 = ShoppingModeVariant

type SnackBar
  @join__type(graph: IRIS)
{
  message: String!

  """source where the message snackbar triggerred"""
  eventSource: String!
}

type SortOption
  @join__type(graph: IRIS)
{
  key: String!
  title: String!
  subtitle: String
  isApplied: Boolean!
}

type Spacer
  @join__type(graph: IRIS)
{
  size: SpacerType!
}

enum SpacerType
  @join__type(graph: IRIS)
{
  NONE @join__enumValue(graph: IRIS)
  SMALL @join__enumValue(graph: IRIS)
  REGULAR @join__enumValue(graph: IRIS)
  LARGE @join__enumValue(graph: IRIS)
  XLARGE @join__enumValue(graph: IRIS)
}

type SpecialCategories
  @join__type(graph: IRIS)
{
  catalogue: CatalogueCard
  headerTitle: String!
  categories: [SpecialMenuItem!]!
}

type SpecialMenuItem
  @join__type(graph: IRIS)
{
  title: String!
  productCount: Int!
  filterName: String
  isClickable: Boolean!
  adTargeting: String
}

"""Input parameters of the Query.specialsHome"""
input SpecialsHomeInput
  @join__type(graph: IRIS)
{
  """Represents the store id. *e.g. "1550"*."""
  storeId: String

  """
  Represents the current shopping mode
  selected by the shopper id.
  """
  mode: ShoppingModeType!

  """
  List of deeplink sections that the client supports. This ensures
  that deeplinks coming out of this response works for the client
  """
  supportedLinks: [String!]!

  """Product source for analytics"""
  requestSource: String

  """
  SaleFinder catalogue store info passed in so it can be reflected back to the mobile apps
  to achieve server-driven UI
  """
  specialsHomeSaleFinderStore: SpecialsHomeSaleFinderStore

  """category type for retrieving category list"""
  categoriesType: CategoriesType

  """Represents the consolidated specials flag."""
  isConsolidatedSpecials: Boolean
}

"""Represents the specials hub home page"""
type SpecialsHomePage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents the top section of the page
  """
  header: SpecialsHomePageHeader

  """
  Inherited from GenericPage.
  Represents the scrollable section of the page
  """
  items: [GenericPageFeedItem]!

  """
  Inherited from GenericPage.
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. opemBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type SpecialsHomePageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents text to display on top bar
  """
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  implement from generic type, represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

input SpecialsHomeSaleFinderStore
  @join__type(graph: IRIS)
{
  """
  The SaleFinder storeId e.g., 4922 for Sydney Metcentre (different from Woolies storeId)
  """
  id: String!

  """e.g., Woolworths Sydney Metcentre"""
  name: String

  """e.g., 2000"""
  postCode: String
}

"""One visible Product Card on top of a stack or Product Cards"""
type StackedProductCards
  @join__type(graph: IRIS)
{
  """The visible Product Card on top of the stack"""
  productCard: ProductCard!

  """
  e.g. "Mains" or "Sides"
  """
  subtitle: String!
}

"""
Represents a new layer to be displayed on top of the main
page. This has child components that can be displayed in the
scrollable part of the this component.
"""
type StaticBottomSheet
  @join__type(graph: IRIS)
{
  id: String!
  title: String!
  staticBottomSheetItems: [StaticBottomSheetFeedItem]!
}

union StaticBottomSheetFeedItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ParagraphTextItem")
 = ParagraphTextItem

"""Tooltip used in Progress Stepper"""
type StepsTooltip
  @join__type(graph: IRIS)
{
  """message that describes the info modal tool tip"""
  message: String!

  """All steps with progress on each of them"""
  stepInfoList: [TooltipStepInfo!]!
}

"""A type representing the address information of a store."""
type StoreAddress
  @join__type(graph: IRIS)
{
  line1: String!
  line2: String
  suburb: String!
  state: String!
  country: String!
  postcode: String!
  phone: String
  email: String
}

"""A type representing the base store details card"""
type StoreDetailCard
  @join__type(graph: IRIS)
{
  storeId: String!
  name: String!
  icon: StoreIcon!
  division: String
  address: StoreAddress!
  facilities: [String]!
  tradingHours: [TradingHour]!
  geo: GeoInfo!
}

"""A type representing the store icon."""
type StoreIcon
  @join__type(graph: IRIS)
{
  small: String
  large: String
}

type StoreList
  @join__type(graph: IRIS)
{
  stores: [StoreDetailCard!]!
}

"""A type representing the store details and product availability"""
type StoreProductAvailability
  @join__type(graph: IRIS)
{
  storeId: String!
  name: String!
  icon: StoreIcon!
  division: String
  address: StoreAddress!
  facilities: [String!]!
  tradingHours: [TradingHour!]!
  geo: GeoInfo!
  isProductAvailable: Boolean!
}

"""A type representing the stores list"""
type StoreProductAvailabilityList
  @join__type(graph: IRIS)
{
  stores: [StoreProductAvailability!]!
}

input StoresForProductInput
  @join__type(graph: IRIS)
{
  storeId: String
  geoLocation: GeoLocation
  postcode: String
  productId: String!
}

"""Response type for the submitDriverRatingSurvey mutation."""
type SubmitDriverRatingResponse
  @join__type(graph: IRIS)
{
  """Indicates if the submission was successful."""
  success: Boolean!

  """
  A message associated with the submission result, e.g., success or failure message.
  """
  message: String!

  """
  Optional error field to provide error details if the submission failed.
  """
  error: SubmitDriverRatingResponseError
}

"""Error type detailing what went wrong in case of a failure."""
type SubmitDriverRatingResponseError
  @join__type(graph: IRIS)
{
  """code identifying the type of error."""
  code: String!

  """message describing the error."""
  message: String!
}

"""Error type detailing what went wrong in case of a failure."""
type SubmitProductResponseError
  @join__type(graph: IRIS)
{
  """code identifying the type of error."""
  code: String!

  """message describing the error."""
  message: String!
}

"""Input fields required for submitting a product review."""
input SubmitProductReviewInput
  @join__type(graph: IRIS)
{
  """Unique identifier for the product being reviewed."""
  productId: String!

  """The rating given to the product, typically on a scale (e.g., 1 to 5)."""
  rating: Float!

  """A brief title for the review."""
  title: String!

  """Detailed text body of the review."""
  reviewText: String!

  """Nickname of the user submitting the review."""
  userNickname: String!

  """Flag indicating if the user has agreed to terms and conditions."""
  agreedToTermsAndConditions: Boolean!
}

"""Response type for the submitProductReview mutation."""
type SubmitProductReviewResponse
  @join__type(graph: IRIS)
{
  """Indicates if the submission was successful."""
  success: Boolean!

  """
  A message associated with the submission result, e.g., success or failure reason.
  """
  message: String!

  """
  Optional error field to provide error details if the submission failed.
  """
  error: SubmitProductResponseError
}

type SubscriptionAnalyticsData
  @join__type(graph: IRIS)
{
  subscriptionTypes: [String]
  subscriptionBillingPeriods: [String]
  subscriptionAllowedUsageTypes: [String]
  subscriptionIds: [String]
  userStatus: [String]
  userSubscriberTypes: [String]
}

type SubscriptionInfo
  @join__type(graph: IRIS)
{
  name: String!
  status: String!
  trialStartDate: String
  trialEndDate: String
  allowedUsageType: String
  billingPeriod: String
  subscriptionType: String
  subscriberType: String
  nextBillingDate: String
  subscriptionId: String
  price: String
}

type SubscriptionsInfo
  @join__type(graph: IRIS)
{
  isB2b: Boolean
  subscriptions: [SubscriptionInfo]
  analyticsData: SubscriptionAnalyticsData
}

type SubstitutionPreferenceFooter
  @join__type(graph: IRIS)
{
  button: Button!
}

input SubstitutionPreferenceInput
  @join__type(graph: IRIS)
{
  """ Product Id to fetch the substitutions for """
  productId: String!

  """ The quantity the customer has selected, depending the product this could be a weight or the number of units
  """
  quantity: Float!
}

type SubstitutionPreferenceOption
  @join__type(graph: IRIS)
{
  id: String!
  title: String!
  showProducts: Boolean!
  isEnabled: Boolean!
  isSelected: Boolean!
  description: String
}

type SubstitutionPreferenceOptionsSection
  @join__type(graph: IRIS)
{
  title: String!
  insetBanner: InsetBanner
  items: [SubstitutionPreferenceOption!]!
}

type SubstitutionPreferenceResponse
  @join__type(graph: IRIS)
{
  productToBeSubstituteSection: ProductToBeSubstituteSection!
  cheaperSubstitutesSection: CheaperSubstitutesSection!
  substitutionPreferenceOptionsSection: SubstitutionPreferenceOptionsSection!
  productSubstitutesSection: ProductSubstitutesSection!
  substitutionPreferenceFooter: SubstitutionPreferenceFooter!
}

enum SubstitutionState
  @join__type(graph: IRIS)
{
  SELECTED @join__enumValue(graph: IRIS)
  UNSELECTED @join__enumValue(graph: IRIS)
  ERROR @join__enumValue(graph: IRIS)
}

"""A type representing the base suburb details card"""
type SuburbDetailCard
  @join__type(graph: IRIS)
{
  name: String!
  state: String!
  postcode: String!
  latitude: String!
  longitude: String!
}

type SuburbList
  @join__type(graph: IRIS)
{
  suburbs: [SuburbDetailCard!]!
}

"""Represents a suggested List"""
type SuggestedListItem
  @join__type(graph: IRIS)
{
  """Unique id of a list"""
  id: Int!

  """List name"""
  name: String!

  """Image url"""
  image: String
}

"""A paginated list of suggested lists"""
type SuggestedLists
  @join__type(graph: IRIS)
{
  """Represents total sum of lists"""
  totalItemCount: Int!

  """Points to next page in response. Null if not page available."""
  nextPage: Int

  """Represent a list of suggested list."""
  items: [SuggestedListItem!]!
}

"""NOTE: Still in draft version"""
enum SurveyQuestionType
  @join__type(graph: IRIS)
{
  NPS @join__enumValue(graph: IRIS)
  FIVE_STAR @join__enumValue(graph: IRIS)
}

input SyncListItemsInput
  @join__type(graph: IRIS)
{
  listId: ID!
  timestamp: Float!
  createdProductItems: [CreateProductItemInput!]!
  createdFreeTextItems: [CreateFreeTextItemInput!]!
  updatedProductItems: [UpdateProductItemInput!]!
  updatedFreeTextItems: [UpdateFreeTextItemInput!]!
  deletedItems: [RemoveListItemInput!]!
}

type SyncListItemsResponse
  @join__type(graph: IRIS)
{
  listId: ID!
  timestamp: Float!

  """Contains the newly created product Items of a list"""
  createdProductItems: [ProductListItem!]!

  """Contains the edited product items of a list"""
  editedProductItems: [ProductListItem!]!

  """Contains the newly created free text Items of a list"""
  createdFreeTextItems: [FreeTextListItem!]!

  """Contains the edited free text items of a list"""
  editedFreeTextItems: [FreeTextListItem!]!
  deletedItems: [ListItemDeleted!]!
  itemsToBeSynced: ItemsToBeSynced!
}

"""Perform sync actions(create, update, delete) on list level"""
input SyncListsInput
  @join__type(graph: IRIS)
{
  options: SyncListsInputOptions
  localLists: [LocalList!]!
  createdLists: [CreateListInput!]!
  updatedLists: [UpdateListInput!]!
  deletedLists: [DeleteListInput!]!
}

input SyncListsInputOptions
  @join__type(graph: IRIS)
{
  """supported special list types, for example ["watchlist"]"""
  supportedListTypes: [String!]
}

"""Response for sync list of lists"""
type SyncListsResponse
  @join__type(graph: IRIS)
{
  """Create list response"""
  createdLists: [CreateListResponse!]!

  """Update list response"""
  updatedLists: [ListResponse!]!

  """Delete list response"""
  deletedLists: [ID!]!
}

"""Represent the single member of the TabSection"""
type TabItem
  @join__type(graph: IRIS)
{
  """Tab item id"""
  tabItemId: String

  """
  The text to appear on top of the TabSection Component.
  This text appear along with all the other TabItems of the TabSection
  """
  tabItemTitle: String!

  """
  This is the Panel to display when the tab item is selected.
  Contains different components
  """
  tabItemFeed: [TabItemFeed]!
}

union TabItemFeed
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ProductSection")
 = ProductSection

"""Represents the whole Tab component"""
type TabSection
  @join__type(graph: IRIS)
{
  """Tab section id"""
  tabSectionId: String

  """List of tab items that a tab contains"""
  tabSectionItems: [TabItem!]!
}

type TagLabel
  @join__type(graph: IRIS)
{
  """
  label text e.g. "Unavailable in App" "Unavailable" "Featured"
  """
  text: String!

  """label style"""
  style: TagStyle
}

enum TagStyle
  @join__type(graph: IRIS)
{
  UNAVAILABLE @join__enumValue(graph: IRIS)
  FEATURED @join__enumValue(graph: IRIS)
}

"""A scalar object to pass dynamic data to tealium."""
scalar TealiumAnalytics
  @join__type(graph: IRIS)

type TermsAndConditions
  @join__type(graph: IRIS)
{
  """Title of terms and conditions"""
  termsAndConditionsTitle: String!

  """Content of terms and conditions"""
  termsAndConditionsContent: String!
}

"""TextArea module based on Core Design System"""
interface TextArea
  @join__type(graph: IRIS)
{
  """Label for the text area, indicating its purpose or content."""
  label: String!

  """Additional help text providing guidance about the text area's usage."""
  helpText: String

  """
  Indicates if the text area is optional. 'true' means optional, 'false' means required.
  """
  isOptional: Boolean!

  """Minimum character count allowed in the text area."""
  minCharacterCount: Int

  """Maximum character count allowed in the text area."""
  maxCharacterCount: Int!

  """Placeholder text displayed in the text area before user input."""
  placeholderText: String
}

"""TextField module based on Core Design System"""
interface TextField
  @join__type(graph: IRIS)
{
  """Label for the text field, indicating its purpose or content."""
  label: String!

  """Additional help text providing guidance about the text field's usage."""
  helpText: String

  """
  Indicates if the field is optional. 'true' means optional, 'false' means required.
  """
  isOptional: Boolean!

  """Minimum character count allowed in the text field."""
  minCharacterCount: Int

  """Maximum character count allowed in the text field."""
  maxCharacterCount: Int!

  """Placeholder text displayed in the text field before user input."""
  placeholderText: String
}

type TextWithAlt
  @join__type(graph: IRIS)
{
  """Text to be displayed on screen"""
  text: String!

  """Text to be read out by screen reader"""
  altText: String!
}

type TextWithLink
  @join__type(graph: IRIS)
{
  label: String!
  url: String!
}

"""
Represents one of many title section in a page.
the titleSectionType value is used by FE to style the text
"""
type TitleSection
  @join__type(graph: IRIS)
{
  titleSectionId: String
  titleSectionType: TitleSectionTypes!
  titleSectionText: String!
}

"""Primary is the biggest FE style for the text"""
enum TitleSectionTypes
  @join__type(graph: IRIS)
{
  PRIMARY @join__enumValue(graph: IRIS)
  SECONDARY @join__enumValue(graph: IRIS)
  TERTIARY @join__enumValue(graph: IRIS)
  NOT_SET @join__enumValue(graph: IRIS)
}

input ToggleOrderLeaveUnattendedInput
  @join__type(graph: IRIS)
{
  orderId: ID!
  leaveUnattendedEnabled: Boolean!
}

enum ToggleOrderLeaveUnattendedReason
  @join__type(graph: IRIS)
{
  WINDOW_CLOSED @join__enumValue(graph: IRIS)
}

type ToggleOrderLeaveUnattendedResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  reason: ToggleOrderLeaveUnattendedReason
  message: String
}

input ToggleRecipeSaveInput
  @join__type(graph: IRIS)
{
  id: String!
  enabled: Boolean!
}

type TooltipDeliveryMethodInfo
  @join__type(graph: IRIS)
{
  title: String!
  imageUrl: String!
  description: String!
  bulletInfoList: [DeliveryMethodBulletInfo!]!
  driverRatingBanner: BasicCoreBroadcastBanner
}

"""Individual steps with progress"""
type TooltipStepInfo
  @join__type(graph: IRIS)
{
  """Step number (i.e., 1, 2, 3 etc)"""
  number: Int!

  """If true, tick is displayed else (false) number is displayed in the FE"""
  isCompleted: Boolean!

  """
  true: draw green line, false: draw grey line,null: no line (for last step)
  """
  isNextProgressed: Boolean

  """title for each step"""
  title: String!

  """description of each step"""
  description: String

  """Step icon URL: completed, current, not started"""
  stepIconUrl: String
}

"""Type of tooltip such as info, tick etc"""
enum TooltipType
  @join__type(graph: IRIS)
{
  """For Info icon image"""
  INFO @join__enumValue(graph: IRIS)

  """For completed tick icon image"""
  COMPLETED @join__enumValue(graph: IRIS)
}

"""A type representing the store day and opening hours."""
type TradingHour
  @join__type(graph: IRIS)
{
  dayLabel: String!
  hoursLabel: String!
}

type TrafficDriver
  @join__type(graph: IRIS)
{
  """Maximum number of items to display in FE if multiple matches are found"""
  numberOfItemsToDisplay: Int!

  """
  Starting position to inject the traffic drivers in search suggestions result UI.
  It's 0 based indexing. To appear after the 3rd search item in position 4.
    - if search suggestions return 5 items, inject traffic driver item(s) from 4th position
    - if search suggestions return 1 items, move up the traffic driver item(s) to 2nd position
  """
  startingIndex: Int!

  """List of traffic drivers"""
  items: [TrafficDriverItem!]!

  """Base Analytics fields which will be used in child analytics"""
  analytics: Analytics
}

type TrafficDriverItem
  @join__type(graph: IRIS)
{
  """AEM title field"""
  title: String!

  """AEM tagline field"""
  subtitle: String

  """AEM image field"""
  imageUrl: String!

  """AEM keywords field"""
  keywords: [String!]!

  """AEM path + search_tracking fields"""
  action: Action!

  """Item tag with TagStyle 'FEATURED'"""
  tag: TagLabel

  """Item impression Analytics"""
  impressionAnalytics: Analytics
}

union UniversalInventory
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "GoogleAdBannerCard")
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "UniversalInventoryContainer")
 = GoogleAdBannerCard | ActionableCard | UniversalInventoryContainer

"""
Container to hold one or more possible banners.
This is to enable fallback to other banners (in future releases) if one is not available.
"""
type UniversalInventoryContainer
  @join__type(graph: IRIS)
{
  """Paid Banner which is the higher priority to display"""
  googleAdBannerCard: GoogleAdBannerCard

  """
  Fallback content (usually In-House Banner) when there 
  is no available paid banner from GAM
  """
  nextBestAction: UniversalInventoryNextBestAction
}

union UniversalInventoryNextBestAction
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "ActionableCard")
  @join__unionMember(graph: IRIS, member: "EdrOfferBanner")
 = ActionableCard | EdrOfferBanner

type UnlinkCreditCardFailure
  @join__type(graph: IRIS)
{
  errorMessage: String!
  analytics: Analytics!
}

union UnlinkCreditCardResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "UnlinkCreditCardSuccess")
  @join__unionMember(graph: IRIS, member: "UnlinkCreditCardValidationFailure")
  @join__unionMember(graph: IRIS, member: "UnlinkCreditCardFailure")
 = UnlinkCreditCardSuccess | UnlinkCreditCardValidationFailure | UnlinkCreditCardFailure

type UnlinkCreditCardSuccess
  @join__type(graph: IRIS)
{
  _: Boolean
}

type UnlinkCreditCardValidationFailure
  @join__type(graph: IRIS)
{
  errorMessage: String!
  errorTitle: String!
  errorButton: String!
  analytics: Analytics!
}

type UnlinkedCreditCard
  @join__type(graph: IRIS)
{
  icon: String!
  title: String!
  subtitle: String
  isSelected: Boolean!
  amountTitle: String!
  amountValue: String!
  amountToPay: Int!
  id: String!
}

type UnlinkedGiftCard
  @join__type(graph: IRIS)
{
  number: String!
  pin: String!
  title: String!
  isSelected: Boolean!
  amountTitle: String!
  amountValue: String!

  """Amount to redeem in cents"""
  amountRedeem: Int!
  errorBanner: InsetBanner
}

input UnlinkedGiftCardInput
  @join__type(graph: IRIS)
{
  number: String!
  pin: String!
  isSelected: Boolean!

  """Amount redeemed in cents"""
  amountRedeemed: Int!
}

type UnlinkGiftCardResponse
  @join__type(graph: IRIS)
{
  success: Boolean!
  message: String
}

type UnlinkPayPalResponse
  @join__type(graph: IRIS)
{
  success: Boolean!

  """ when not successful, this will be populated """
  message: String
}

"""Type to show number of unread chatbot messages"""
type UnreadChatbotMsg
  @join__type(graph: IRIS)
{
  count: Int!
}

"""Request to update the quantity of products that are in cart"""
input UpdateCartProductQuantitiesInput
  @join__type(graph: IRIS)
{
  cartProductQuantityUpdates: [CartProductQuantityUpdate!]!
}

enum UpdateCartProductQuantityFailedReason
  @join__type(graph: IRIS)
{
  LOG_IN_REQUIRED @join__enumValue(graph: IRIS)
  AGE_RESTRICTION @join__enumValue(graph: IRIS)
  UNSPECIFIED @join__enumValue(graph: IRIS)
}

input UpdateFreeTextItemInput
  @join__type(graph: IRIS)
{
  id: ID!
  text: String!
  checked: Boolean!
  timestamp: Float!
}

"""Contains ids of the lists which need to be updated"""
input UpdateListInput
  @join__type(graph: IRIS)
{
  id: ID!
  title: String!
  color: String!
  timestamp: Float!
}

input UpdateProductItemInput
  @join__type(graph: IRIS)
{
  id: ID!
  productId: String!
  quantity: Float!
  checked: Boolean!
  timestamp: Float!
}

type UpdateProductReviewProductQuantitiesError
  @join__type(graph: IRIS)
{
  productId: String!
  message: String
}

input UpdateProductReviewProductQuantitiesInput
  @join__type(graph: IRIS)
{
  """
  Enum representing which screen calls review products modal
  Contents are different between cart and checkout
  """
  source: ProductReviewSource!
  productReviewProductQuantityUpdates: [ProductReviewProductQuantityUpdate!]!
}

union UpdateSubstitutionPreferencesResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "CheckoutContent")
  @join__unionMember(graph: IRIS, member: "UpdateSubstitutionPreferencesSuccessResponse")
 = CheckoutContent | UpdateSubstitutionPreferencesSuccessResponse

type UpdateSubstitutionPreferencesSuccessResponse
  @join__type(graph: IRIS)
{
  isSuccess: Boolean!
}

enum UpgradeType
  @join__type(graph: IRIS)
{
  APP @join__enumValue(graph: IRIS)
  OS @join__enumValue(graph: IRIS)

  """No upgrade required"""
  NONE @join__enumValue(graph: IRIS)
}

"""Represents a user in the system."""
type User
  @join__type(graph: CPS, key: "id")
{
  id: ID!
  name: String
  email: String

  """The company the user belongs to."""
  company: Company
}

input UserSubstitutionPreference
  @join__type(graph: IRIS)
{
  """text"""
  allowSubstitution: Boolean

  """stock code"""
  productId: String!

  """Selected product recommendations"""
  preferred: [String!]

  """non selected product recommendations"""
  nonPreferred: [String!]

  """selected customer selection"""
  customerSelection: String
}

input UserSubstitutionPreferencesInput
  @join__type(graph: IRIS)
{
  """array of substitution preferences to be updated"""
  items: [UserSubstitutionPreference!]!
  withCheckoutResponse: Boolean
}

type VerticalList
  @join__type(graph: IRIS)
{
  verticalListTitle: String
  verticalListSubtitle: String
  verticalListItems: [VerticalListItem!]!
  verticalListAction: VerticalListAction
}

"""represents the stacked layout in FE"""
type VerticalListAction
  @join__type(graph: IRIS)
{
  actionTitle: String
  action: Action!
}

union VerticalListItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "FullWidthContentCard")
 = FullWidthContentCard

type Video
  @join__type(graph: IRIS)
{
  url: String!
  title: String!
  thumbnail: String!
  duration: String!
  id: String
}

"""The video component that user may play / pause."""
type VideoAd
  @join__type(graph: IRIS)
{
  """The url source to download the video"""
  url: String!

  """The image to display when the url is not streamable/downloadable."""
  fallbackImage: ImageWithAlt

  """The ad duration to be displayed as overlay"""
  duration: Int!

  """The accessibility transcript of the video"""
  transcript: VideoAdBottomSheet

  """The terms and condition of the advertisement"""
  termsAndConditions: VideoAdBottomSheet

  """
  Common analytics for VideoAd
  Any analytics fields provided here will be for
  every events to be tracked by FE
  """
  analytics: Analytics

  """
  Holds all the event specific
  Analytics payload
  """
  eventAnalytics: VideoAdEventAnalytics
}

"""
The bottom sheet component specific for 
stand alone VideoAdUnit component.
"""
type VideoAdBottomSheet
  @join__type(graph: IRIS)
{
  """The markdown formatted string to be rendered"""
  contentMarkdown: String!

  """The title to be used on top of the bottomsheet"""
  title: String!

  """The text to display to the button that will open up the bottomsheet"""
  buttonText: String

  """The accessibility text to be read for the button"""
  accessibilityText: String!

  """
  Additional Analytics Payload
  for BottomSheet Impression event
  """
  impressionAnalytics: Analytics
}

"""
Holder of all the event specific analytics
for VideoAd Component
"""
type VideoAdEventAnalytics
  @join__type(graph: IRIS)
{
  """
  Additional Analytics Payload
  for Impression event
  """
  impression: Analytics

  """
  Additional Analytics Payload
  for Video Complete event
  """
  videoComplete: Analytics

  """
  Additional Analytics Payload
  for Video's First Auto Start event
  """
  videoAutoStart: Analytics

  """
  Additional Analytics Payload
  for Video Manually Paused event
  """
  videoPause: Analytics

  """
  Additional Analytics Payload
  for Video Manually Played event
  """
  videoPlay: Analytics

  """
  Additional Analytics Payload
  for Video Load Error
  """
  videoErrorImpression: Analytics
}

"""
A sellable advertisement showing a video 
with product to purchase or add to list
"""
type VideoAdUnit
  @join__type(graph: IRIS)
{
  """The video component that user may play / pause."""
  videoAdUnitVideoAd: VideoAd!

  """
  The product card that is related to the video. With this, the user may add to cart, list a product that the related to the video.
  """
  videoAdUnitProductCard: ProductCard

  """
  The product carousel that is related to the video. With this, the user may add to cart, list a product that the related to the video.
  """
  videoAdUnitCarousel: VideoAdUnitCarousel

  """The link component at the bottom of the carousel"""
  videoAdUnitBottomLink: Link
}

"""The carousel component the user can do transaction"""
type VideoAdUnitCarousel
  @join__type(graph: IRIS)
{
  items: [HorizontalListItem!]!
}

"""Represents the AEM video page"""
type VideoPage implements GenericPage
  @join__implements(graph: IRIS, interface: "GenericPage")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents the top section of the page
  """
  header: VideoPageHeader

  """
  Inherited from GenericPage.
  Represents the scrollable section of the page
  """
  items: [GenericPageFeedItem]!

  """
  Inherited from GenericPage.
  List of different bottomSheet components. To be displayed
  on demand, when a component of the page has actionLink
  related to bottom sheet ie. openBottomSheet?id=sheet1
  """
  bottomSheets: [GenericPageBottomSheetItem]

  """
  Page level analytics, generally:
  * appSection
  * screenName
  
  Any analytics fields provided here will be persisted
  for all subsequent analytics calls within the screen
  """
  analytics: Analytics

  """
  Page level Screen / Page View analytics, generally:
  * tealiumEvent - *_screen
  
  Any analytics fields provided here will only be
  part of the tealium_event_type "view" event
  """
  impressionAnalytics: Analytics

  """
  next page number to be used for pagination, FE use this to send to bff to get the next page
  when nextPageNumber is null, it means there is no more page to be fetched
  """
  nextPageNumber: Int
}

type VideoPageHeader implements GenericPageHeader
  @join__implements(graph: IRIS, interface: "GenericPageHeader")
  @join__type(graph: IRIS)
{
  """
  Inherited from GenericPage.
  Represents text to display on top bar
  """
  pageTitle: String!

  """
  When true, the page title will be shown in large size under the top row on load.
  Scrolling down will transform the title into small size in the top row.
  """
  largePageTitle: Boolean

  """
  implement from generic type, represents hero image url
  optional field, usually only one hero image in a page
  """
  heroImage: String

  """
  represents hero image type
  If null, the hero image will be treated as ASPECT_FILL
  """
  heroImageType: GenericPageHeroImageType

  """represents the video when hero image obj has a video url in it"""
  video: Video
}

type VocSurvey
  @join__type(graph: IRIS)
{
  """
  Survey url
  url for web based survey url
  """
  surveyUrl: String
  promptTitle: String!
  promptSubTitle: String
  cta: Button!
  screenTitle: String
}

type VoiceSearchResult
  @join__type(graph: IRIS)
{
  result: String!
  selectedChips: [String!]!
}

"""Drives the webcard tile on the FE. Always showing."""
type WebCard
  @join__type(graph: IRIS)
{
  isExternal: Boolean!
  requiresAuth: Boolean!
  url: String!
  image: String!
  altText: String!
}

type WebLink
  @join__type(graph: IRIS)
{
  cookies: [WebLinkCookie!]!
  headers: [WebLinkHeader!]!
  url: String!
  title: String!
}

type WebLinkCookie
  @join__type(graph: IRIS)
{
  name: String!
  value: String!
  domain: String!
  path: String!
  maxAge: Int!
  httpOnly: Boolean!
  secure: Boolean!
}

type WebLinkHeader
  @join__type(graph: IRIS)
{
  key: String!
  value: String!
}

"""
A card that opens a webview which does not require authentication
Card's data and webview url are fully managed in AEM & Target
"""
type WebViewCard
  @join__type(graph: IRIS)
{
  """Title to display on screen where the webview is embedded"""
  title: String

  """URL to be loaded in webview"""
  url: String

  """A full URL to the image asset"""
  image: String!

  """Accessibility alternate text for image"""
  altText: String!

  """
  The size of the card.
  e.g. SMALL, MEDIUM, LARGE
  """
  cardHeight: CardHeight!
}

type WpayPaymentFailure
  @join__type(graph: IRIS)
{
  errorMessage: String!
  analytics: Analytics!
  regenerateIdempotencyKey: Boolean!
}

union WpayPaymentResponse
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "WpayPaymentSuccess")
  @join__unionMember(graph: IRIS, member: "WpayPaymentFailure")
 = WpayPaymentSuccess | WpayPaymentFailure

type WpayPaymentSuccess
  @join__type(graph: IRIS)
{
  orderId: Int!
}

"""Instructs the UI to insert a horizontal divider"""
type WriteReviewFormDivider
  @join__type(graph: IRIS)
{
  _: Boolean
}

"""input for writeReviewForm"""
input WriteReviewFormInput
  @join__type(graph: IRIS)
{
  """Unique identifier for the product."""
  productId: String!

  """current store id,"""
  storeId: String
}

"""Field for entering the reviewer's name or nickname."""
type WriteReviewFormNameField implements TextField
  @join__implements(graph: IRIS, interface: "TextField")
  @join__type(graph: IRIS)
{
  """Label for the name field, e.g. 'Public name'."""
  label: String!

  """Indicates if the field is optional, e.g. false."""
  isOptional: Boolean!

  """Minimum character count for the name field."""
  minCharacterCount: Int

  """Maximum character count for the name field."""
  maxCharacterCount: Int!

  """Help text for the name field, e.g. 'Visible to public'."""
  helpText: String

  """placeholderText field for the input"""
  placeholderText: String
}

"""Ratings section of the review form."""
type WriteReviewFormRatings
  @join__type(graph: IRIS)
{
  """
  Title for the ratings section, e.g. 'How would you rate this product overall'.
  """
  title: String!
}

"""Response type for writeReviewForm."""
type WriteReviewFormResponse
  @join__type(graph: IRIS)
{
  """The title of the page, e.g. 'Write review'."""
  pageTitle: String!

  """Sections of the write review form."""
  sections: [WriteReviewFormSections!]!

  """submit button"""
  submitButton: Button!
}

"""Review section items"""
type WriteReviewFormReview
  @join__type(graph: IRIS)
{
  items: [WriteReviewFormReviewItem!]!
}

"""Field for entering the main body of the review."""
type WriteReviewFormReviewBody implements TextArea
  @join__implements(graph: IRIS, interface: "TextArea")
  @join__type(graph: IRIS)
{
  """Label for the review body field, e.g. 'Review'."""
  label: String!

  """Indicates if the field is optional, e.g. false."""
  isOptional: Boolean!

  """Minimum character count for the review body."""
  minCharacterCount: Int

  """Maximum character count for the review body."""
  maxCharacterCount: Int!

  """help text field for the input"""
  helpText: String

  """placeholderText field for the input"""
  placeholderText: String
}

"""Union of Review section items"""
union WriteReviewFormReviewItem
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "WriteReviewFormReviewItemTitle")
  @join__unionMember(graph: IRIS, member: "WriteReviewFormRatings")
  @join__unionMember(graph: IRIS, member: "WriteReviewFormReviewTitle")
  @join__unionMember(graph: IRIS, member: "WriteReviewFormReviewBody")
  @join__unionMember(graph: IRIS, member: "WriteReviewFormNameField")
 = WriteReviewFormReviewItemTitle | WriteReviewFormRatings | WriteReviewFormReviewTitle | WriteReviewFormReviewBody | WriteReviewFormNameField

"""Represents a title section in the form."""
type WriteReviewFormReviewItemTitle
  @join__type(graph: IRIS)
{
  """Title text for a section, e.g. 'Review'."""
  title: String!
}

"""Field for entering the title of the review."""
type WriteReviewFormReviewTitle implements TextField
  @join__implements(graph: IRIS, interface: "TextField")
  @join__type(graph: IRIS)
{
  """Label for the review title field, e.g. 'Review title'."""
  label: String!

  """Indicates if the field is optional, e.g. false."""
  isOptional: Boolean!

  """Minimum character count for the review title."""
  minCharacterCount: Int

  """Maximum character count for the review title."""
  maxCharacterCount: Int!

  """help text field for the input"""
  helpText: String

  """placeholderText field for the input"""
  placeholderText: String
}

"""Union of different sections that can be part of the write review form."""
union WriteReviewFormSections
  @join__type(graph: IRIS)
  @join__unionMember(graph: IRIS, member: "WriteReviewFormTargetProduct")
  @join__unionMember(graph: IRIS, member: "WriteReviewFormReview")
  @join__unionMember(graph: IRIS, member: "WriteReviewFormTermsConditions")
 = WriteReviewFormTargetProduct | WriteReviewFormReview | WriteReviewFormTermsConditions

"""Submit button for the review form."""
type WriteReviewFormSubmitButton
  @join__type(graph: IRIS)
{
  """Details of the submit button."""
  button: Button!
}

"""Displays the target product for the review."""
type WriteReviewFormTargetProduct
  @join__type(graph: IRIS)
{
  """Details of the product."""
  product: ProductCard!

  """Alternative text for the product"""
  altText: String!
}

"""Terms and conditions section of the review form."""
type WriteReviewFormTermsConditions
  @join__type(graph: IRIS)
{
  """
  Markdown text for terms and conditions, e.g. 'I agree to the [**Terms and Conditions**](https://...)'.
  """
  markdownText: String

  """
  Additional terms text, e.g. 'You may receive emails regarding this submission. Any emails will include the ability to opt-out of future communications.'.
  """
  additionalTermsText: String
}

type WXIDDetails
  @join__type(graph: IRIS)
{
  """
  User wxid. This is used for user targetting
  For new signups, it takes at least a day for wxid to get generated.
  There will be a case where wxid will be null.
  """
  wxid: String

  """
  WXID changes if any of the PII details is updated.
  App should fetch to check for wxid updates after this timestamp.
  """
  nextFetchTime: Float!
}

"""Categories section (e.g. Popular Categories)"""
type ZeroResultProductCategories
  @join__type(graph: IRIS)
{
  zeroResultProductCategoriesTitle: String

  """List of category tiles"""
  zeroResultProductCategoriesItems: [ProductCategoryTile!]!
}